{
    "openapi": "3.1.0",
    "info": {
        "title": "UnifyAI HTTP API Reference",
        "version": "0.1.0"
    },
    "paths": {
        "/v0/providers": {
            "get": {
                "tags": [
                    "Supported Endpoints"
                ],
                "summary": "List Providers",
                "description": "Lists available providers. If `model` is specified,\nreturns the providers that support that model.",
                "operationId": "list_providers_v0_providers_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "model",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Model to get available providers for.",
                            "title": "Model"
                        },
                        "description": "Model to get available providers for.",
                        "example": "llama-3.1-405b-chat"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "title": "Response List Providers V0 Providers Get"
                                },
                                "example": [
                                    "openai",
                                    "anthropic",
                                    "together-ai",
                                    "..."
                                ]
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/models": {
            "get": {
                "tags": [
                    "Supported Endpoints"
                ],
                "summary": "List Models",
                "description": "Lists available models. If `provider` is specified,\nreturns the models that the provider supports.\nYou can also show all *custom* models by passing `custom` as the provider.",
                "operationId": "list_models_v0_models_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "provider",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Provider to get available models from.",
                            "title": "Provider"
                        },
                        "description": "Provider to get available models from.",
                        "example": "openai"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "title": "Response List Models V0 Models Get"
                                },
                                "example": [
                                    "gpt-3.5-turbo",
                                    "gpt-4",
                                    "claude-3-haiku",
                                    "..."
                                ]
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/endpoints": {
            "get": {
                "tags": [
                    "Supported Endpoints"
                ],
                "summary": "List Endpoints",
                "description": "Lists available endpoints in `model@provider` format.\nIf `model` or `provider` are specified, only the matching endpoints will be listed.\nYou can also show all *custom* endpoints by passing `custom` as the provider.",
                "operationId": "list_endpoints_v0_endpoints_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "model",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Model to get available endpoints for.",
                            "title": "Model"
                        },
                        "description": "Model to get available endpoints for.",
                        "example": "llama-3.1-405b-chat"
                    },
                    {
                        "name": "provider",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Provider to get available endpoints for.",
                            "title": "Provider"
                        },
                        "description": "Provider to get available endpoints for.",
                        "example": "openai"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "title": "Response List Endpoints V0 Endpoints Get"
                                },
                                "example": [
                                    "claude-3-haiku@anthropic",
                                    "llama-3-70b-chat@groq",
                                    "mistral-large@mistral-ai",
                                    "..."
                                ]
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/chat/completions": {
            "post": {
                "tags": [
                    "LLM Queries"
                ],
                "summary": "Chat Completions",
                "description": "OpenAI compatible `/chat/completions` endpoint for LLM inference.\nCheck the OpenAI\n[API reference](https://platform.openai.com/docs/api-reference/chat)\nfor the most updated documentation. The ground truth is always the latest OpenAI API\nReference. The arguments below are copied for convenience, but might not be fully\nup-to-date at all times.",
                "operationId": "chat_completions_v0_chat_completions_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "anyOf": [
                                    {
                                        "$ref": "#/components/schemas/ChatCompletionRequest"
                                    },
                                    {
                                        "items": {
                                            "$ref": "#/components/schemas/ChatCompletionRequest"
                                        },
                                        "type": "array"
                                    }
                                ],
                                "title": "Request"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChatCompletionResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/tags": {
            "get": {
                "tags": [
                    "Usage"
                ],
                "summary": "Get Query Tags",
                "description": "Returns a list of the tags in your account",
                "operationId": "get_query_tags_v0_tags_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array",
                                    "title": "Response Get Query Tags V0 Tags Get"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/queries": {
            "get": {
                "tags": [
                    "Usage"
                ],
                "summary": "Get Queries",
                "description": "Get the queries history, optionally for a given set of tags for a narrowed search.",
                "operationId": "get_queries_v0_queries_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "tags",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Tags to filter for queries that are marked with these tags.",
                            "title": "Tags"
                        },
                        "description": "Tags to filter for queries that are marked with these tags.",
                        "example": "my_tag"
                    },
                    {
                        "name": "endpoints",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Optionally specify an endpoint, or a list of endpoints to filter for",
                            "title": "Endpoints"
                        },
                        "description": "Optionally specify an endpoint, or a list of endpoints to filter for",
                        "example": "gpt-4o@openai"
                    },
                    {
                        "name": "start_time",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Timestamp of the earliest query to aggregate. Format is `YYYY-MM-DD hh:mm:ss`.",
                            "title": "Start Time"
                        },
                        "description": "Timestamp of the earliest query to aggregate. Format is `YYYY-MM-DD hh:mm:ss`.",
                        "example": "2024-07-12 04:20:32"
                    },
                    {
                        "name": "end_time",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Timestamp of the latest query to aggregate. Format is `YYYY-MM-DD hh:mm:ss`.",
                            "title": "End Time"
                        },
                        "description": "Timestamp of the latest query to aggregate. Format is `YYYY-MM-DD hh:mm:ss`.",
                        "example": "2024-08-12 04:20:32"
                    },
                    {
                        "name": "page_number",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The query history is returned in pages, with up to 20 prompts per page. Increase the page number to see older prompts.",
                            "default": 1,
                            "title": "Page Number"
                        },
                        "description": "The query history is returned in pages, with up to 20 prompts per page. Increase the page number to see older prompts.",
                        "example": "1"
                    },
                    {
                        "name": "failures",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "boolean"
                                },
                                {
                                    "const": "only",
                                    "type": "string"
                                }
                            ],
                            "description": "indicates whether to includes failures in the return (when set as True ), or whether to return failures exlusively (when set as 'only').",
                            "default": false,
                            "title": "Failures"
                        },
                        "description": "indicates whether to includes failures in the return (when set as True ), or whether to return failures exlusively (when set as 'only').",
                        "example": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Usage"
                ],
                "summary": "Log Query",
                "operationId": "log_query_v0_queries_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_log_query_v0_queries_post"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/metrics": {
            "get": {
                "tags": [
                    "Usage"
                ],
                "summary": "Get Query Metrics",
                "description": "Returns aggregated telemetry data from previous queries to the `/chat/completions`\nendpoint, specifically the p50 and p95 for generation time and tokens per second,\nand also the total prompt and completion tokens processed within the interval. The\nuser id and total request count within the interval are also returned.",
                "operationId": "get_query_metrics_v0_metrics_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "start_time",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Timestamp of the earliest query to aggregate. Format is `YYYY-MM-DD hh:mm:ss`.",
                            "title": "Start Time"
                        },
                        "description": "Timestamp of the earliest query to aggregate. Format is `YYYY-MM-DD hh:mm:ss`.",
                        "example": "2024-07-12 04:20:32"
                    },
                    {
                        "name": "end_time",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Timestamp of the latest query to aggregate. Format is `YYYY-MM-DD hh:mm:ss`.",
                            "title": "End Time"
                        },
                        "description": "Timestamp of the latest query to aggregate. Format is `YYYY-MM-DD hh:mm:ss`.",
                        "example": "2024-08-12 04:20:32"
                    },
                    {
                        "name": "models",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Models to fetch metrics from. The list must be a set of comma-separated strings. i.e. `gpt-3.5-turbo,gpt-4o`",
                            "title": "Models"
                        },
                        "description": "Models to fetch metrics from. The list must be a set of comma-separated strings. i.e. `gpt-3.5-turbo,gpt-4o`",
                        "example": "gpt-4o,llama-3.1-405b-chat,claude-3.5-sonnet"
                    },
                    {
                        "name": "providers",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Providers to fetch metrics from. The list must be a set of comma-separated strings. i.e. `openai,together-ai`",
                            "title": "Providers"
                        },
                        "description": "Providers to fetch metrics from. The list must be a set of comma-separated strings. i.e. `openai,together-ai`",
                        "example": "openai,anthropic,fireworks-ai"
                    },
                    {
                        "name": "interval",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Number of seconds in the aggregation interval.",
                            "default": 300,
                            "title": "Interval"
                        },
                        "description": "Number of seconds in the aggregation interval.",
                        "example": 300
                    },
                    {
                        "name": "secondary_user_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Secondary user id. The secondary user id will match any string previously sent in the `user` attribute of `/chat/completions`.",
                            "title": "Secondary User Id"
                        },
                        "description": "Secondary user id. The secondary user id will match any string previously sent in the `user` attribute of `/chat/completions`.",
                        "example": "sample_user_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object"
                                    },
                                    "title": "Response Get Query Metrics V0 Metrics Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/custom_api_key": {
            "post": {
                "tags": [
                    "Custom API keys"
                ],
                "summary": "Create Custom Api Key",
                "description": "Stores a custom API key from an LLM provider in your account. This can be done in\none of two ways:\n\n1. As part of a custom endpoint. If you define a custom endpoint, you can reference\na custom API key. This will be sent to the endpoint as part of the request.\n\n2. To use your own API keys with the standard providers. If any of your custom API\nkeys match a provider name and you pass `use_custom_keys=True` to the\n`/chat/completions` endpoint, then this API key will be used, using your own\naccount with the provider directly.",
                "operationId": "create_custom_api_key_v0_custom_api_key_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the API key.",
                            "title": "Name"
                        },
                        "description": "Name of the API key.",
                        "example": "key1"
                    },
                    {
                        "name": "value",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Value of the API key.",
                            "title": "Value"
                        },
                        "description": "Value of the API key.",
                        "example": "value1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    },
                                    "title": "Response Create Custom Api Key V0 Custom Api Key Post"
                                },
                                "example": {
                                    "info": "API key created successfully!"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Custom API keys"
                ],
                "summary": "Get Custom Api Key",
                "description": "Returns the value of the key for the specified custom API key name.",
                "operationId": "get_custom_api_key_v0_custom_api_key_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the API key to get the value for.",
                            "title": "Name"
                        },
                        "description": "Name of the API key to get the value for.",
                        "example": "key1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomApiKeyModelResponse"
                                },
                                "example": {
                                    "name": "custom_api_key_name",
                                    "value": "custom_api_key_value"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Custom API key Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Custom API key not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Custom API keys"
                ],
                "summary": "Delete Custom Api Key",
                "description": "Deletes the custom API key from your account.",
                "operationId": "delete_custom_api_key_v0_custom_api_key_delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the custom API key to delete.",
                            "title": "Name"
                        },
                        "description": "Name of the custom API key to delete.",
                        "example": "key1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    },
                                    "title": "Response Delete Custom Api Key V0 Custom Api Key Delete"
                                },
                                "example": {
                                    "info": "API key deleted successfully!"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Custom API key Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Custom API key not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/custom_api_key/rename": {
            "post": {
                "tags": [
                    "Custom API keys"
                ],
                "summary": "Rename Custom Api Key",
                "description": "Renames the custom API key in your account.",
                "operationId": "rename_custom_api_key_v0_custom_api_key_rename_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the custom API key to be updated.",
                            "title": "Name"
                        },
                        "description": "Name of the custom API key to be updated.",
                        "example": "key1"
                    },
                    {
                        "name": "new_name",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "New name for the custom API key.",
                            "title": "New Name"
                        },
                        "description": "New name for the custom API key.",
                        "example": "key2"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    },
                                    "title": "Response Rename Custom Api Key V0 Custom Api Key Rename Post"
                                },
                                "example": {
                                    "info": "API key renamed successfully!"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Custom API key Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Custom API key not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/custom_api_key/list": {
            "get": {
                "tags": [
                    "Custom API keys"
                ],
                "summary": "List Custom Api Keys",
                "description": "Returns a list of the names for all custom API keys in your account.",
                "operationId": "list_custom_api_keys_v0_custom_api_key_list_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CustomApiKeyModelResponse"
                                    },
                                    "type": "array",
                                    "title": "Response List Custom Api Keys V0 Custom Api Key List Get"
                                },
                                "example": [
                                    {
                                        "name": "custom_key_1",
                                        "value": "****alue_1"
                                    },
                                    {
                                        "name": "custom_key_2",
                                        "value": "****alue_2"
                                    }
                                ]
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/custom_endpoint": {
            "post": {
                "tags": [
                    "Custom Endpoints"
                ],
                "summary": "Create Custom Endpoint",
                "description": "Creates a custom endpoint. This endpoint must either be a fine-tuned model from one\nof the supported providers (`/v0/providers`), in which case the \"provider\" argument\nmust be set accordingly. Otherwise, the endpoint must support the OpenAI\n`/chat/completions` format. To query your custom endpoint, replace your endpoint\nstring with `<endpoint_name>@custom` when querying any general custom endpoint. You\ncan show all *custom* endpoints by querying `/v0/endpoints` and passing `custom` as\nthe `provider` argument.",
                "operationId": "create_custom_endpoint_v0_custom_endpoint_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The endpoint name for your custom endpoint, in model@provider format. If it's a custom endpoint following the OpenAI format then the provider must be `@custom`, otherwise if it's a fine-tuned model from one of the existing providers it can be specified with a prepending `custom-`, i.e. `@custom-anthropic`.",
                            "title": "Name"
                        },
                        "description": "The endpoint name for your custom endpoint, in model@provider format. If it's a custom endpoint following the OpenAI format then the provider must be `@custom`, otherwise if it's a fine-tuned model from one of the existing providers it can be specified with a prepending `custom-`, i.e. `@custom-anthropic`.",
                        "example": "endpoint1"
                    },
                    {
                        "name": "url",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Base URL of the endpoint being called. Must support the OpenAI format.",
                            "title": "Url"
                        },
                        "description": "Base URL of the endpoint being called. Must support the OpenAI format.",
                        "example": "https://api.url1.com"
                    },
                    {
                        "name": "key_name",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the API key that will be passed as part of the query.",
                            "title": "Key Name"
                        },
                        "description": "Name of the API key that will be passed as part of the query.",
                        "example": "key1"
                    },
                    {
                        "name": "model_arg",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "The value passed to the model arugment of the *underlying* API which is being wrapped into Unify. For example, you might call your endpoint `llama-3-baseten@custom` to distinguish the custom endpoint within Unify, but under the hood need to pass `llama-3.2-90b-chat` to the Baseten endpoint.",
                            "title": "Model Arg"
                        },
                        "description": "The value passed to the model arugment of the *underlying* API which is being wrapped into Unify. For example, you might call your endpoint `llama-3-baseten@custom` to distinguish the custom endpoint within Unify, but under the hood need to pass `llama-3.2-90b-chat` to the Baseten endpoint.",
                        "example": "llama-3.1-8b-finetuned"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    },
                                    "title": "Response Create Custom Endpoint V0 Custom Endpoint Post"
                                },
                                "example": {
                                    "info": "Custom endpoint created successfully!"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Custom API Key Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Custom API Key not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Custom Endpoints"
                ],
                "summary": "Delete Custom Endpoint",
                "description": "Deletes a custom endpoint from your account.",
                "operationId": "delete_custom_endpoint_v0_custom_endpoint_delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the custom endpoint to delete.",
                            "title": "Name"
                        },
                        "description": "Name of the custom endpoint to delete.",
                        "example": "endpoint1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    },
                                    "title": "Response Delete Custom Endpoint V0 Custom Endpoint Delete"
                                },
                                "example": {
                                    "info": "Custom endpoint deleted successfully!"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Custom Endpoint Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Custom endpoint not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/custom_endpoint/rename": {
            "post": {
                "tags": [
                    "Custom Endpoints"
                ],
                "summary": "Rename Custom Endpoint",
                "description": "Renames a custom endpoint in your account.",
                "operationId": "rename_custom_endpoint_v0_custom_endpoint_rename_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the custom endpoint to be updated.",
                            "title": "Name"
                        },
                        "description": "Name of the custom endpoint to be updated.",
                        "example": "name1"
                    },
                    {
                        "name": "new_name",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "New name for the custom endpoint.",
                            "title": "New Name"
                        },
                        "description": "New name for the custom endpoint.",
                        "example": "name2"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    },
                                    "title": "Response Rename Custom Endpoint V0 Custom Endpoint Rename Post"
                                },
                                "example": {
                                    "info": "Custom endpoint renamed successfully!"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Custom endpoint Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Custom endpoint not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/custom_endpoint/list": {
            "get": {
                "tags": [
                    "Custom Endpoints"
                ],
                "summary": "List Custom Endpoints",
                "description": "Returns a list of the available custom endpoints.",
                "operationId": "list_custom_endpoints_v0_custom_endpoint_list_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CustomEndpointModelResponse"
                                    },
                                    "type": "array",
                                    "title": "Response List Custom Endpoints V0 Custom Endpoint List Get"
                                },
                                "example": [
                                    {
                                        "name": "endpoint_1",
                                        "model_arg": "llama_finetune",
                                        "url": "https://...",
                                        "key": "custom_key_1"
                                    },
                                    {
                                        "name": "endpoint_2",
                                        "model_arg": "mixtral_finetune",
                                        "url": "https://...",
                                        "key": "custom_key_2"
                                    }
                                ]
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/endpoint-metrics": {
            "post": {
                "tags": [
                    "Endpoint Metrics"
                ],
                "summary": "Log Endpoint Metric",
                "description": "Append speed or cost data to the standardized time-series benchmarks for a custom\nendpoint (only custom endpoints are publishable by end users).",
                "operationId": "log_endpoint_metric_v0_endpoint_metrics_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "endpoint_name",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the *custom* endpoint to append benchmark data for.",
                            "title": "Endpoint Name"
                        },
                        "description": "Name of the *custom* endpoint to append benchmark data for.",
                        "example": "my_endpoint"
                    },
                    {
                        "name": "metric_name",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the metric to submit. Allowed metrics are:\n        \"input_cost\", \"output_cost\", \"ttft\", \"itl\".",
                            "title": "Metric Name"
                        },
                        "description": "Name of the metric to submit. Allowed metrics are:\n        \"input_cost\", \"output_cost\", \"ttft\", \"itl\".",
                        "example": "tokens-per-second"
                    },
                    {
                        "name": "value",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "number",
                            "description": "Value of the metric to submit.",
                            "title": "Value"
                        },
                        "description": "Value of the metric to submit.",
                        "example": 10
                    },
                    {
                        "name": "measured_at",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp to associate with the submission. Defaults to current time if unspecified.",
                            "title": "Measured At"
                        },
                        "description": "The timestamp to associate with the submission. Defaults to current time if unspecified.",
                        "example": "2024-08-12T04:20:32.808410"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Custom endpoint benchmark uploaded successfully!"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Benchmark not valid",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Invalid data submitted"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Endpoint Metrics"
                ],
                "summary": "Get Endpoint Metrics",
                "description": "Extracts cost and speed data for the provided endpoint via our standardized\nefficiency benchmarks, in the specified region, with the specified sequence length,\nwith all benchmark values returned within the specified time window.\n\nWhen extracting data for a *custom* endpoint, then `model` is the endpoint name, and\n`provider` must be set as `\"custom\"`. The arguments `region` and `seq_len` are\nignored for custom endpoints (they are not publishable).\n\nIf neither `start_time` nor `end_time` are provided, then only the *latest*\nbenchmark data is returned. If only `start_time` is provided, then `end_time` is\nassumed to be the current time. An exception is raised if only `end_time` is\nprovided.",
                "operationId": "get_endpoint_metrics_v0_endpoint_metrics_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "model",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Name of the model.",
                            "title": "Model"
                        },
                        "description": "Name of the model.",
                        "example": "gpt-4o-mini"
                    },
                    {
                        "name": "provider",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Name of the provider.",
                            "title": "Provider"
                        },
                        "description": "Name of the provider.",
                        "example": "openai"
                    },
                    {
                        "name": "region",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Region where the benchmark is run.\n        Options are: `\"Belgium\"`, `\"Hong Kong\"` or `\"Iowa\"`.",
                            "default": "Iowa",
                            "title": "Region"
                        },
                        "description": "Region where the benchmark is run.\n        Options are: `\"Belgium\"`, `\"Hong Kong\"` or `\"Iowa\"`.",
                        "example": "Belgium"
                    },
                    {
                        "name": "seq_len",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Length of the sequence used for benchmarking, can be short or long",
                            "default": "short",
                            "title": "Seq Len"
                        },
                        "description": "Length of the sequence used for benchmarking, can be short or long",
                        "example": "short"
                    },
                    {
                        "name": "start_time",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Window start time. Only returns the latest benchmark if unspecified",
                            "title": "Start Time"
                        },
                        "description": "Window start time. Only returns the latest benchmark if unspecified",
                        "example": "2024-07-12T04:20:32.808410"
                    },
                    {
                        "name": "end_time",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Window end time. Assumed to be the current time if this is unspecified *and* start_time *is* specified. Only the latest benchmark is returned if both are unspecified.",
                            "title": "End Time"
                        },
                        "description": "Window end time. Assumed to be the current time if this is unspecified *and* start_time *is* specified. Only the latest benchmark is returned if both are unspecified.",
                        "example": "2024-08-12T04:20:32.808410"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "additionalProperties": {
                                            "anyOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "string",
                                                    "format": "date-time"
                                                },
                                                {
                                                    "type": "number"
                                                },
                                                {
                                                    "type": "object",
                                                    "additionalProperties": {
                                                        "anyOf": [
                                                            {
                                                                "type": "string"
                                                            },
                                                            {
                                                                "type": "string",
                                                                "format": "date-time"
                                                            }
                                                        ]
                                                    }
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ]
                                        }
                                    },
                                    "title": "Response Get Endpoint Metrics V0 Endpoint Metrics Get"
                                },
                                "example": {
                                    "ttft": 440.2323939998496,
                                    "itl": 8.797065147959705,
                                    "input_cost": 0.15,
                                    "output_cost": 0.6,
                                    "measured_at": "2024-08-17T19:19:37.289937"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Endpoint Metrics"
                ],
                "summary": "Delete Endpoint Metrics",
                "description": "Delete all benchmark time-series data for a given *custom* endpoint with the\nspecified timestamps. If timestamps are not specified, then *all* benchmark data\nwill be deleted for the specified custom endpoint.\nThe time-series benchmark data for *public* endpoints are not deletable.",
                "operationId": "delete_endpoint_metrics_v0_endpoint_metrics_delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "endpoint_name",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the *custom* endpoint to submit a benchmark for.",
                            "title": "Endpoint Name"
                        },
                        "description": "Name of the *custom* endpoint to submit a benchmark for.",
                        "example": "my_endpoint"
                    },
                    {
                        "name": "timestamps",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "format": "date-time"
                                    }
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "List of timestamps to delete the endpoint metrics for.",
                            "title": "Timestamps"
                        },
                        "description": "List of timestamps to delete the endpoint metrics for.",
                        "example": "2024-08-17T19:19:37.289937"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    },
                                    "title": "Response Delete Endpoint Metrics V0 Endpoint Metrics Delete"
                                },
                                "example": {
                                    "info": "Benchmark deleted successfully!"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/endpoint-details": {
            "get": {
                "tags": [
                    "Endpoint Metrics"
                ],
                "summary": "Get Endpoint Details",
                "description": "Extracts cost and context window data for the provided endpoint .\n\nThe `endpoint` is the endpoint name in the form \\<model\\>@\\<provider\\>.",
                "operationId": "get_endpoint_details_v0_endpoint_details_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "endpoint",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Name of the endpoint.",
                            "title": "Endpoint"
                        },
                        "description": "Name of the endpoint.",
                        "example": "claude-3.5-haiku@anthropic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "anyOf": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "type": "number"
                                            }
                                        ]
                                    },
                                    "title": "Response Get Endpoint Details V0 Endpoint Details Get"
                                },
                                "example": {
                                    "endpoint": "claude-3.5-haiku@anthropic",
                                    "context_window": 200000,
                                    "input_cost": 0.8,
                                    "output_cost": 4
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/project": {
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "Create Project",
                "description": "Creates a logging project and adds this to your account. This project will\nhave a set of logs associated with it.",
                "operationId": "create_project_v0_project_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectConfig"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Project created successfully!"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Already Existing Project",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "A logging project with this name already exists."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/project/{name}": {
            "delete": {
                "tags": [
                    "Projects"
                ],
                "summary": "Delete Project",
                "description": "Deletes a project from your account.",
                "operationId": "delete_project_v0_project__name__delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the project to delete.",
                            "title": "Name"
                        },
                        "description": "Name of the project to delete.",
                        "example": "eval-project"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Project deleted successfully!"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project <name> not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Projects"
                ],
                "summary": "Rename Project",
                "description": "Renames a project from `name` to `new_name` in your account.",
                "operationId": "rename_project_v0_project__name__patch",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the project to rename.",
                            "title": "Name"
                        },
                        "description": "Name of the project to rename.",
                        "example": "old-project-name"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectConfig"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Project renamed successfully!"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project <name> not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/projects": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "List Projects",
                "description": "Returns the names of all projects stored in your account.",
                "operationId": "list_projects_v0_projects_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": [
                                    "project_a",
                                    "project_b",
                                    "project_c"
                                ]
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/project/{name}/logs": {
            "delete": {
                "tags": [
                    "Projects"
                ],
                "summary": "Delete Project Logs",
                "description": "Deletes all logs in a project.",
                "operationId": "delete_project_logs_v0_project__name__logs_delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Name"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project logs deleted.",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "All logs in project deleted successfully"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project <name> not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/project/{name}/contexts": {
            "delete": {
                "tags": [
                    "Projects"
                ],
                "summary": "Delete Project Contexts",
                "description": "Deletes all contexts and their associated logs from a project.\nThe project's interfaces remain untouched.",
                "operationId": "delete_project_contexts_v0_project__name__contexts_delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the project to delete contexts from.",
                            "title": "Name"
                        },
                        "description": "Name of the project to delete contexts from.",
                        "example": "test-project"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project contexts and logs deleted.",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Project contexts and logs deleted successfully!"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project <name> not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/project/{project_name}/contexts": {
            "post": {
                "tags": [
                    "Contexts"
                ],
                "summary": "Create Context",
                "description": "Creates a new context within a project. Contexts can be used to organize logs\nand artifacts within a project.\n\nIf is_versioned=True, all logs in this context will be versioned and mutable.\nThe context version will increment automatically when logs are added, updated, or removed.",
                "operationId": "create_context_v0_project__project_name__contexts_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "project_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the project to create context in.",
                            "title": "Project Name"
                        },
                        "description": "Name of the project to create context in.",
                        "example": "my_project"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ContextCreateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "name": "experiment1/trial1",
                                    "description": "Context for experiment 1 trial 1",
                                    "is_versioned": true,
                                    "version": 1
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Already Existing Context",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "A context with this name already exists in the project."
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Contexts"
                ],
                "summary": "Get Contexts",
                "description": "Get a list of contexts within a project.\nReturns information about each context including its versioning status and current version.",
                "operationId": "get_contexts_v0_project__project_name__contexts_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "project_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the project to create context in.",
                            "title": "Project Name"
                        },
                        "description": "Name of the project to create context in.",
                        "example": "my_project"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Contexts retrieved.",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": [
                                    {
                                        "name": "context1",
                                        "description": "description1",
                                        "is_versioned": true,
                                        "version": 1
                                    },
                                    {
                                        "name": "context2",
                                        "description": "description2",
                                        "is_versioned": false,
                                        "version": 1
                                    }
                                ]
                            }
                        }
                    },
                    "404": {
                        "description": "Project Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/project/{project_name}/contexts/{context_name}": {
            "get": {
                "tags": [
                    "Contexts"
                ],
                "summary": "Get Context",
                "description": "Get information about a specific context including its versioning status and current version.",
                "operationId": "get_context_v0_project__project_name__contexts__context_name__get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "project_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the project containing the context.",
                            "title": "Project Name"
                        },
                        "description": "Name of the project containing the context.",
                        "example": "my_project"
                    },
                    {
                        "name": "context_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the context to retrieve.",
                            "title": "Context Name"
                        },
                        "description": "Name of the context to retrieve.",
                        "example": "my_context"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Context retrieved.",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "name": "context1",
                                    "description": "description1",
                                    "is_versioned": true,
                                    "version": 1
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project or Context Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project or context not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Contexts"
                ],
                "summary": "Delete Context",
                "description": "Deletes a context from a project. This will not delete the logs or artifacts\nwithin the context, but will remove their association with this context.",
                "operationId": "delete_context_v0_project__project_name__contexts__context_name__delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "project_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the project to create context in.",
                            "title": "Project Name"
                        },
                        "description": "Name of the project to create context in.",
                        "example": "my_project"
                    },
                    {
                        "name": "context_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the context to delete.",
                            "title": "Context Name"
                        },
                        "description": "Name of the context to delete.",
                        "example": "my_context"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Context deleted successfully!"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project or Context Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project or context not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/project/{project_name}/contexts/add_logs": {
            "post": {
                "tags": [
                    "Contexts"
                ],
                "summary": "Add Logs To Context",
                "description": "Adds existing logs to a context within a project. The logs must already exist\nin the project and can be specified by their IDs.\nThe same logs can be associated with multiple contexts.",
                "operationId": "add_logs_to_context_v0_project__project_name__contexts_add_logs_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "project_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the project to create context in.",
                            "title": "Project Name"
                        },
                        "description": "Name of the project to create context in.",
                        "example": "my_project"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddLogsToContextRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Logs added to context successfully!"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project, Context or Logs Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project, context or specified logs not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/project/{project}/artifacts": {
            "post": {
                "tags": [
                    "Project Artifacts"
                ],
                "summary": "Create Artifacts",
                "description": "Creates one or more artifacts associated to a project. Artifacts are\nproject-level metadata that don't depend on other variables.",
                "operationId": "create_artifacts_v0_project__project__artifacts_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "project",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the project the artifacts belong to.",
                            "title": "Project"
                        },
                        "description": "Name of the project the artifacts belong to.",
                        "example": "eval-project"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ArtifactConfig"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Artifact(s) created successfully!"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project <project> not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Project Artifacts"
                ],
                "summary": "List Artifacts",
                "description": "Returns the key-value pairs of all artifacts in a project.",
                "operationId": "list_artifacts_v0_project__project__artifacts_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "project",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the project to delete an artifact from.",
                            "title": "Project"
                        },
                        "description": "Name of the project to delete an artifact from.",
                        "example": "eval-project"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "artifact_1": "value_1",
                                    "artifact_2": "value_2"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project <project> not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/project/{project}/artifacts/{key}": {
            "delete": {
                "tags": [
                    "Project Artifacts"
                ],
                "summary": "Delete Artifact",
                "description": "Deletes an artifact from a project.",
                "operationId": "delete_artifact_v0_project__project__artifacts__key__delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "project",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the project to delete an artifact from.",
                            "title": "Project"
                        },
                        "description": "Name of the project to delete an artifact from.",
                        "example": "eval-project"
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Key of the artifact to delete.",
                            "title": "Key"
                        },
                        "description": "Key of the artifact to delete.",
                        "example": "project-description"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Artifact deleted successfully!"
                                }
                            }
                        }
                    },
                    "4041": {
                        "description": "Project Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project <project> not found."
                                }
                            }
                        }
                    },
                    "4042": {
                        "description": "Artifact Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Artifact <key> not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/project/{project}/contexts/{context_name}/artifacts": {
            "post": {
                "tags": [
                    "Context Artifacts"
                ],
                "summary": "Create Context Artifacts",
                "description": "Creates one or more artifacts associated to a context within a project.",
                "operationId": "create_context_artifacts_v0_project__project__contexts__context_name__artifacts_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "project",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the project the context belongs to.",
                            "title": "Project"
                        },
                        "description": "Name of the project the context belongs to.",
                        "example": "eval-project"
                    },
                    {
                        "name": "context_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the context to create artifacts in.",
                            "title": "Context Name"
                        },
                        "description": "Name of the context to create artifacts in.",
                        "example": "experiment1/trial1"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ContextArtifactCreateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Context artifact(s) created successfully!"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project or Context Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project <project> or context <context> not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Context Artifacts"
                ],
                "summary": "List Context Artifacts",
                "description": "Returns the key-value pairs of all artifacts in a context.",
                "operationId": "list_context_artifacts_v0_project__project__contexts__context_name__artifacts_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "project",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the project containing the context.",
                            "title": "Project"
                        },
                        "description": "Name of the project containing the context.",
                        "example": "eval-project"
                    },
                    {
                        "name": "context_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the context to list artifacts from.",
                            "title": "Context Name"
                        },
                        "description": "Name of the context to list artifacts from.",
                        "example": "training"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "artifact_1": "value_1",
                                    "artifact_2": "value_2"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project or Context Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project <project> or context <context> not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/project/{project}/contexts/{context}/artifacts/{key}": {
            "delete": {
                "tags": [
                    "Context Artifacts"
                ],
                "summary": "Delete Context Artifact",
                "description": "Deletes an artifact from a context within a project.",
                "operationId": "delete_context_artifact_v0_project__project__contexts__context__artifacts__key__delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "project",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the project containing the context.",
                            "title": "Project"
                        },
                        "description": "Name of the project containing the context.",
                        "example": "eval-project"
                    },
                    {
                        "name": "context",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the context to delete an artifact from.",
                            "title": "Context"
                        },
                        "description": "Name of the context to delete an artifact from.",
                        "example": "training"
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Key of the artifact to delete.",
                            "title": "Key"
                        },
                        "description": "Key of the artifact to delete.",
                        "example": "context-description"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Context artifact deleted successfully!"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project, Context, or Artifact Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project <project>, context <context>, or artifact <key> not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/logs": {
            "post": {
                "tags": [
                    "Logs"
                ],
                "summary": "Create Logs",
                "description": "Creates one or more logs associated to a project. Logs are\nLLM-call-level data that might depend on other variables.\n\nIf a context is specified and it is versioned, all logs will be versioned\nand mutable. The context version will be incremented automatically when\nlogs are added, updated, or removed.\n\nAn \"explicit_types\" dictionary can be passed as part of the `entries`.\nIf present, any matching key inside this dictionary will override the\ninferred type of that particular entry. The explicit_types dictionary\ncan also specify if a field is mutable via a 'mutable' boolean flag:\n\n{\n    \"field_name\": {\n        \"type\": \"str\",\n        \"mutable\": false  # Makes the field immutable\n    }\n}\n\nBy default, all fields are immmutable unless specified otherwise.\nOnce a field is marked as mutable, only then can it be modified through\nthe update endpoint.\n\nThis method returns the ids of the new stored logs.",
                "operationId": "create_logs_v0_logs_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateLogConfig"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Logs created successfully!",
                                    "log_event_ids": [
                                        1,
                                        2,
                                        3
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Logs"
                ],
                "summary": "Update Logs",
                "description": "Updates multiple logs with the provided entries. Each entry will be either added\nor overridden in the specified logs.\n\nA dictionary of \"explicit_types\" can be passed as part of the `entries`.\nIf present, it will override the inferred type of any matching key in all logs.",
                "operationId": "update_logs_v0_logs_put",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateLogRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Logs updated successfully!"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Log Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "One or more logs with the specified IDs were not found."
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Invalid request format or data."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Logs"
                ],
                "summary": "Delete Logs",
                "description": "Deletes log entries based on specified criteria. Can delete both base logs and derived logs.\n\nArgs:\n    source_type: Controls which type of logs to delete:\n        - 'all': Delete both base and derived logs (default)\n        - 'base': Only delete base logs\n        - 'derived': Only delete derived logs",
                "operationId": "delete_logs_v0_logs_delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "delete_empty_logs",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to delete logs which end up being empty as a result of the field deletion.",
                            "default": false,
                            "title": "Delete Empty Logs"
                        },
                        "description": "Whether to delete logs which end up being empty as a result of the field deletion.",
                        "example": true
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeleteLogEntryRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Log entries deleted successfully!"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Log Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "One or more logs were not found or you don't have permission to delete them."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Logs"
                ],
                "summary": "Get Logs",
                "description": "Returns a list of filtered log entries from a project with various expressiveness options:\n\n  1. **Monolithic mode** (when group_by is not provided):\n     - Returns a flat list of log entries (with fields clipped if value_limit is set).\n     - Optionally factors out repeated fields into a grouped_entries field if group_threshold is set.\n\n  2. **Grouped mode** (when group_by is provided):\n     - Supports multi-level grouping of logs. The order of fields in group_by dictates the nesting order.\n     - Supports pagination at the group level using group_limit and group_offset.\n     - Supports limiting the nesting depth with group_depth.\n     - When nested_groups is True, returns a nested structure under the \"logs\" key.\n     - When nested_groups is False, returns flat per-field mappings under the \"groups\" key.\n     - When groups_only is True, the detailed log objects are omitted and leaves are simplified\n       to either lists of log ids (if return_timestamps is False) or mappings of {log id: timestamp} (if True).\n\n  3. **Return IDs only mode**:\n     - If return_ids_only is True, returns only the log event ids.\n     - If return_versions is also True, returns a list of objects with both id and version information.\n\nThe response always includes:\n  - `params`: The parameter versions used across the logs.\n  - `count`: The total number of logs matching the query.\n  - Additionally, it includes either `logs` (in monolithic or nested grouping mode) or `groups` (in flat grouping mode)\n    as specified by the arguments.\n\nIf return_versions=True:\n- Returns all versions of logs in versioned contexts\n- from_ids and exclude_ids must be provided as lists of objects with 'id' and 'version' keys\n- Each object must have format: {\"id\": log_event_id, \"version\": version_number}\n- This is only valid for logs in versioned contexts\n\nIf return_versions=False (default):\n- Returns only the latest version of each log\n- from_ids and exclude_ids should be strings of '&'-separated log event IDs",
                "operationId": "get_logs_v0_logs_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "project",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the project to get entries from.",
                            "title": "Project"
                        },
                        "description": "Name of the project to get entries from.",
                        "example": "eval-project"
                    },
                    {
                        "name": "column_context",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The context (prepending '/' seperated field names) from which to retrieve the logs.",
                            "title": "Column Context"
                        },
                        "description": "The context (prepending '/' seperated field names) from which to retrieve the logs.",
                        "example": "subjects/science/physics"
                    },
                    {
                        "name": "context",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Static context to filter logs by.",
                            "title": "Context"
                        },
                        "description": "Static context to filter logs by.",
                        "example": "training"
                    },
                    {
                        "name": "return_versions",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to return all versions of logs. Only valid for versioned contexts.",
                            "default": false,
                            "title": "Return Versions"
                        },
                        "description": "Whether to return all versions of logs. Only valid for versioned contexts."
                    },
                    {
                        "name": "group_threshold",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "When set, entries that appear in at least this many logs will be grouped together.",
                            "title": "Group Threshold"
                        },
                        "description": "When set, entries that appear in at least this many logs will be grouped together."
                    },
                    {
                        "name": "value_limit",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Maximum number of characters to return for string values.",
                            "title": "Value Limit"
                        },
                        "description": "Maximum number of characters to return for string values."
                    },
                    {
                        "name": "filter_expr",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Boolean string to filter entries. TODO: Detailed page.",
                            "title": "Filter Expr"
                        },
                        "description": "Boolean string to filter entries. TODO: Detailed page.",
                        "example": "len(output) > 200 and temperature == 0.5"
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Dict with fields as keys and either 'ascending' or 'descending' as values. The first entry in the dict is the last field to be sorted by, which takes ultimate precedent, with other keys only remaining in order when the first key values are equal.",
                            "title": "Sorting"
                        },
                        "description": "Dict with fields as keys and either 'ascending' or 'descending' as values. The first entry in the dict is the last field to be sorted by, which takes ultimate precedent, with other keys only remaining in order when the first key values are equal.",
                        "example": {
                            "score": "ascending",
                            "timestamp": "descending"
                        }
                    },
                    {
                        "name": "group_sorting",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Sorting configuration for groups when using group_by. Specifies how to sort groups relative to each other based on aggregated metrics.",
                            "title": "Group Sorting"
                        },
                        "description": "Sorting configuration for groups when using group_by. Specifies how to sort groups relative to each other based on aggregated metrics.",
                        "example": {
                            "entries/student": {
                                "field": "score",
                                "direction": "descending",
                                "metric": "mean"
                            }
                        }
                    },
                    {
                        "name": "from_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {},
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The log ids which are permitted to be included in the search. Each log id listed does not need to be returned, but no logs which are not included in this list can be returned. This argument *cannot* be set if `exclude_ids` is set.",
                            "title": "From Ids"
                        },
                        "description": "The log ids which are permitted to be included in the search. Each log id listed does not need to be returned, but no logs which are not included in this list can be returned. This argument *cannot* be set if `exclude_ids` is set.",
                        "example": "0&1&2"
                    },
                    {
                        "name": "exclude_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {},
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The log ids which cannot be returned from the search. None of the listed ids will be returned, even if the logs are valid as per the filtering expression etc. This argument *cannot* be set if `from_ids` is set.",
                            "title": "Exclude Ids"
                        },
                        "description": "The log ids which cannot be returned from the search. None of the listed ids will be returned, even if the logs are valid as per the filtering expression etc. This argument *cannot* be set if `from_ids` is set.",
                        "example": "0&1&2"
                    },
                    {
                        "name": "from_fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The fields which are permitted to be included in the search. Each field listed does not need to be returned, but no fields which are not included in this list can be returned. This argument *cannot* be set if `exclude_fields` is set.",
                            "title": "From Fields"
                        },
                        "description": "The fields which are permitted to be included in the search. Each field listed does not need to be returned, but no fields which are not included in this list can be returned. This argument *cannot* be set if `exclude_fields` is set.",
                        "example": "score&response"
                    },
                    {
                        "name": "exclude_fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The fields which cannot be returned from the search. None of the listed fields will be returned, even if the fields are valid as per the filtering expression etc. This argument *cannot* be set if `from_fields` is set.",
                            "title": "Exclude Fields"
                        },
                        "description": "The fields which cannot be returned from the search. None of the listed fields will be returned, even if the fields are valid as per the filtering expression etc. This argument *cannot* be set if `from_fields` is set.",
                        "example": "score&response"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "integer",
                                    "maximum": 200,
                                    "minimum": 1
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Limit"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "default": 0,
                            "title": "Offset"
                        }
                    },
                    {
                        "name": "group_by",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "List of fields to group results by. Results will be nested based on these fields.",
                            "title": "Group By"
                        },
                        "description": "List of fields to group results by. Results will be nested based on these fields.",
                        "example": [
                            "model",
                            "temperature"
                        ]
                    },
                    {
                        "name": "group_limit",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "integer",
                                    "minimum": 1
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Maximum number of groups to return at each level",
                            "title": "Group Limit"
                        },
                        "description": "Maximum number of groups to return at each level"
                    },
                    {
                        "name": "group_offset",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "description": "Number of groups to skip at each level",
                            "default": 0,
                            "title": "Group Offset"
                        },
                        "description": "Number of groups to skip at each level"
                    },
                    {
                        "name": "group_depth",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Maximum depth of nested groups to return. If not specified, all levels are returned.",
                            "title": "Group Depth"
                        },
                        "description": "Maximum depth of nested groups to return. If not specified, all levels are returned."
                    },
                    {
                        "name": "nested_groups",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "If True, groups are returned as a nested structure; if False, groups are returned as flat per-field mappings.",
                            "default": true,
                            "title": "Nested Groups"
                        },
                        "description": "If True, groups are returned as a nested structure; if False, groups are returned as flat per-field mappings."
                    },
                    {
                        "name": "groups_only",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "If True, do not include a full logs list; only return groups (with leaf values being either log ids or timestamps).",
                            "default": false,
                            "title": "Groups Only"
                        },
                        "description": "If True, do not include a full logs list; only return groups (with leaf values being either log ids or timestamps)."
                    },
                    {
                        "name": "return_timestamps",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "When groups_only is True, return each leaf as a mapping from log id to timestamp instead of just a list of log ids.",
                            "default": false,
                            "title": "Return Timestamps"
                        },
                        "description": "When groups_only is True, return each leaf as a mapping from log id to timestamp instead of just a list of log ids."
                    },
                    {
                        "name": "return_ids_only",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "title": "Return Ids Only"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "params": {},
                                    "logs": [
                                        {
                                            "id": "0",
                                            "ts": "2024-10-30 12:20:03",
                                            "entries": {
                                                "key1": "a",
                                                "key2": 1.0
                                            },
                                            "derived_entries": {},
                                            "params": {}
                                        },
                                        {
                                            "id": "1",
                                            "ts": "2024-10-30 12:22:14",
                                            "entries": {
                                                "key1": "b",
                                                "key2": 2.0
                                            },
                                            "derived_entries": {},
                                            "params": {}
                                        }
                                    ],
                                    "count": 2
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project <project> not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/logs/derived": {
            "put": {
                "tags": [
                    "Logs"
                ],
                "summary": "Update Derived Log",
                "description": "Updates multiple derived logs, identified either by a direct list of derived IDs or by\nget_logs\u2013style filters. If 'referenced_logs' is provided, we delete all existing\nderived logs for each (log_event_id, key) group and re-insert new ones referencing\nthe new base logs. Finally, we recompute them.",
                "operationId": "update_derived_log_v0_logs_derived_put",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateDerivedEntriesConfig"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Derived log updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Derived logs updated successfully!"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Log Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "One or more logs with the specified IDs were not found."
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Invalid request format or data."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Logs"
                ],
                "summary": "Create Derived Entry",
                "description": "Creates one or more derived-log entries based on `body.equation` and `body.referenced_logs`.\nEagerly computes each derived value and stores it in DerivedLog.value.",
                "operationId": "create_derived_entry_v0_logs_derived_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateDerivedEntriesConfig"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Derived log entries created successfully.",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Created 3 derived logs with key='example_key'.",
                                    "derived_log_ids": [
                                        101,
                                        102,
                                        103
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project 'example_project' not found."
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "All referenced log lists must have the same length. Found lengths: [2, 3]."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/logs/latest_timestamp": {
            "get": {
                "tags": [
                    "Logs"
                ],
                "summary": "Get Logs Latest Timestamp",
                "description": "Returns the update timestamp of the most recently updated log within the specified\npage and filter bounds.",
                "operationId": "get_logs_latest_timestamp_v0_logs_latest_timestamp_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "project",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the project to get entries from.",
                            "title": "Project"
                        },
                        "description": "Name of the project to get entries from.",
                        "example": "eval-project"
                    },
                    {
                        "name": "column_context",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The context (prepending '/' seperated field names) from which to retrieve the logs.",
                            "title": "Column Context"
                        },
                        "description": "The context (prepending '/' seperated field names) from which to retrieve the logs.",
                        "example": "subjects/science/physics"
                    },
                    {
                        "name": "context",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Static context to filter logs by.",
                            "title": "Context"
                        },
                        "description": "Static context to filter logs by.",
                        "example": "training"
                    },
                    {
                        "name": "filter_expr",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Boolean string to filter entries. TODO: Detailed page.",
                            "title": "Filter Expr"
                        },
                        "description": "Boolean string to filter entries. TODO: Detailed page.",
                        "example": "len(output) > 200 and temperature == 0.5"
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Dict with fields as keys and either 'ascending' or 'descending' as values. The first entry in the dict is the last field to be sorted by, which takes ultimate precedent, with other keys only remaining in order when the first key values are equal.",
                            "title": "Sorting"
                        },
                        "description": "Dict with fields as keys and either 'ascending' or 'descending' as values. The first entry in the dict is the last field to be sorted by, which takes ultimate precedent, with other keys only remaining in order when the first key values are equal.",
                        "example": {
                            "score": "ascending",
                            "timestamp": "descending"
                        }
                    },
                    {
                        "name": "from_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The log ids which are permitted to be included in the search. Each log id listed does not need to be returned, but no logs which are not included in this list can be returned. This argument *cannot* be set if `exclude_ids` is set.",
                            "title": "From Ids"
                        },
                        "description": "The log ids which are permitted to be included in the search. Each log id listed does not need to be returned, but no logs which are not included in this list can be returned. This argument *cannot* be set if `exclude_ids` is set.",
                        "example": "0&1&2"
                    },
                    {
                        "name": "exclude_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The log ids which cannot be returned from the search. None of the listed ids will be returned, even if the logs are valid as per the filtering expression etc. This argument *cannot* be set if `from_ids` is set.",
                            "title": "Exclude Ids"
                        },
                        "description": "The log ids which cannot be returned from the search. None of the listed ids will be returned, even if the logs are valid as per the filtering expression etc. This argument *cannot* be set if `from_ids` is set.",
                        "example": "0&1&2"
                    },
                    {
                        "name": "from_fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The fields which are permitted to be included in the search. Each field listed does not need to be returned, but no fields which are not included in this list can be returned. This argument *cannot* be set if `exclude_fields` is set.",
                            "title": "From Fields"
                        },
                        "description": "The fields which are permitted to be included in the search. Each field listed does not need to be returned, but no fields which are not included in this list can be returned. This argument *cannot* be set if `exclude_fields` is set.",
                        "example": "score&response"
                    },
                    {
                        "name": "exclude_fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The fields which cannot be returned from the search. None of the listed fields will be returned, even if the fields are valid as per the filtering expression etc. This argument *cannot* be set if `from_fields` is set.",
                            "title": "Exclude Fields"
                        },
                        "description": "The fields which cannot be returned from the search. None of the listed fields will be returned, even if the fields are valid as per the filtering expression etc. This argument *cannot* be set if `from_fields` is set.",
                        "example": "score&response"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "integer",
                                    "maximum": 200,
                                    "minimum": 1
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Limit"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "default": 0,
                            "title": "Offset"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "params": {},
                                    "logs": [
                                        {
                                            "id": "0",
                                            "ts": "2024-10-30 12:20:03",
                                            "entries": {
                                                "key1": "a",
                                                "key2": 1.0
                                            },
                                            "params": {}
                                        },
                                        {
                                            "id": "1",
                                            "ts": "2024-10-30 12:22:14",
                                            "entries": {
                                                "key1": "b",
                                                "key2": 2.0
                                            },
                                            "params": {}
                                        }
                                    ],
                                    "count": 2
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project <project> not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/logs/metric/{default_metric}": {
            "get": {
                "tags": [
                    "Logs"
                ],
                "summary": "Get Logs Metric",
                "description": "Returns the reduction metric for filtered values (base + derived) for one or more keys from a project.\nIf a single key is provided, returns the metric value directly (for backward compatibility).\nIf multiple keys are provided, returns a dict of {key: metric result}.",
                "operationId": "get_logs_metric_v0_logs_metric__default_metric__get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "default_metric",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Default Metric"
                        }
                    },
                    {
                        "name": "project",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "anyOf": [
                                    {
                                        "$ref": "#/components/schemas/GetLogsMetricRequest"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "title": "Request"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "type": "object"
                                        },
                                        {
                                            "type": "number"
                                        },
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "title": "Response Get Logs Metric V0 Logs Metric  Default Metric  Get"
                                },
                                "example": 4.56
                            }
                        }
                    },
                    "404": {
                        "description": "Project Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project <project> not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/logs/groups": {
            "get": {
                "tags": [
                    "Logs"
                ],
                "summary": "Get Log Groups",
                "description": "Returns a dict with the different versions as keys and the values of the remaining\nitems within a given project based on its key.\nThe logs can be filtered using filter_expr, from_ids, and exclude_ids parameters\nbefore grouping.",
                "operationId": "get_log_groups_v0_logs_groups_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "project",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the project to get entries from.",
                            "title": "Project"
                        },
                        "description": "Name of the project to get entries from.",
                        "example": "eval-project"
                    },
                    {
                        "name": "key",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the log entry to get distinct values from.",
                            "title": "Key"
                        },
                        "description": "Name of the log entry to get distinct values from.",
                        "example": "system_prompt"
                    },
                    {
                        "name": "filter_expr",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Boolean string to filter entries before grouping.",
                            "title": "Filter Expr"
                        },
                        "description": "Boolean string to filter entries before grouping.",
                        "example": "len(output) > 200 and temperature == 0.5"
                    },
                    {
                        "name": "from_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The log ids which are permitted to be included in the search. Each log id listed does not need to be returned, but no logs which are not included in this list can be returned. This argument *cannot* be set if `exclude_ids` is set.",
                            "title": "From Ids"
                        },
                        "description": "The log ids which are permitted to be included in the search. Each log id listed does not need to be returned, but no logs which are not included in this list can be returned. This argument *cannot* be set if `exclude_ids` is set.",
                        "example": "0&1&2"
                    },
                    {
                        "name": "exclude_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The log ids which cannot be returned from the search. None of the listed ids will be returned, even if the logs are valid as per the filtering expression etc. This argument *cannot* be set if `from_ids` is set.",
                            "title": "Exclude Ids"
                        },
                        "description": "The log ids which cannot be returned from the search. None of the listed ids will be returned, even if the logs are valid as per the filtering expression etc. This argument *cannot* be set if `from_ids` is set.",
                        "example": "0&1&2"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Get Log Groups V0 Logs Groups Get"
                                },
                                "example": [
                                    {
                                        "version": "v0",
                                        "value": "First version of the system prompt"
                                    },
                                    {
                                        "version": "v1",
                                        "value": "Second version of the system prompt"
                                    }
                                ]
                            }
                        }
                    },
                    "404": {
                        "description": "Project Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project <project> not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/logs/rename_field": {
            "post": {
                "tags": [
                    "Logs"
                ],
                "summary": "Rename Field",
                "description": "Renames a field across all logs in a project. This includes:\n- Updating the field type record\n- Renaming the field in all logs (regular and history)\n\nThe operation is atomic - either all renames succeed or none do.",
                "operationId": "rename_field_v0_logs_rename_field_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RenameFieldRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Field renamed successfully",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Field renamed successfully from 'old_name' to 'new_name'"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Invalid field name or field already exists"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project or field not found"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/logs/fields": {
            "get": {
                "tags": [
                    "Logs"
                ],
                "summary": "Get Fields",
                "description": "Returns a dictionary of field names and their types for the specified project.\nIf a context is provided, returns only fields associated with that context.\n\nEach field entry contains:\n- data_type: The data type of the field (int, str, etc)\n- field_type: Whether it's an entry, param, or derived_entry\n- mutable: Whether the field can be modified\n- created_at: When the field was first created\n- artifacts: For derived entries, contains the equation",
                "operationId": "get_fields_v0_logs_fields_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "project",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the project to get fields and their types for.",
                            "title": "Project"
                        },
                        "description": "Name of the project to get fields and their types for.",
                        "example": "eval-project"
                    },
                    {
                        "name": "context",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Optional context name to filter field types",
                            "default": "",
                            "title": "Context"
                        },
                        "description": "Optional context name to filter field types",
                        "example": "training"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "field1": {
                                        "data_type": "string",
                                        "field_type": "entry",
                                        "mutable": "true",
                                        "created_at": "2025-02-14T10:00:00Z",
                                        "artifacts": ""
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project <project> not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/interface": {
            "post": {
                "tags": [
                    "Configs"
                ],
                "summary": "Create Interface",
                "operationId": "create_interface_v0_interface_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InterfaceConfig"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Interface created.",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Interface created successfully!"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Interface already exists.",
                        "content": {
                            "application/json": {
                                "example": {
                                    "info": "Interface already exists, update the interface instead."
                                }
                            }
                        }
                    },
                    "4041": {
                        "description": "Project Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project <project> not found."
                                }
                            }
                        }
                    },
                    "4042": {
                        "description": "Context Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Context <context> not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Configs"
                ],
                "summary": "Update Interface",
                "operationId": "update_interface_v0_interface_put",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InterfaceConfig"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Interface updated.",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "info": "Interface updated successfully!"
                            }
                        }
                    },
                    "4041": {
                        "description": "Project Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project <project> not found."
                                }
                            }
                        }
                    },
                    "4042": {
                        "description": "Context Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Context <context> not found."
                                }
                            }
                        }
                    },
                    "4043": {
                        "description": "Interface Not Found",
                        "content": {
                            "application/json": {
                                "example": "Interface not added yet. Create it first."
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Configs"
                ],
                "summary": "Get Interfaces",
                "operationId": "get_interfaces_v0_interface_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Name"
                        }
                    },
                    {
                        "name": "project",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project"
                        }
                    },
                    {
                        "name": "temporary",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "title": "Temporary"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Interface retrieved.",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": [
                                    {
                                        "name": "tab1",
                                        "project": "my_project",
                                        "items": [
                                            {
                                                "i": "n0",
                                                "x": 0,
                                                "y": 0,
                                                "w": 3,
                                                "h": 3
                                            },
                                            {
                                                "i": "n1",
                                                "x": 0,
                                                "y": 3,
                                                "w": 2,
                                                "h": 3,
                                                "tab": "Plot_1"
                                            }
                                        ],
                                        "new_counter": 2
                                    }
                                ]
                            }
                        }
                    },
                    "4041": {
                        "description": "Project Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project <project> not found."
                                }
                            }
                        }
                    },
                    "4042": {
                        "description": "Interface Not Found",
                        "content": {
                            "application/json": {
                                "example": "Interface not added yet. Create it first."
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Configs"
                ],
                "summary": "Delete Interface",
                "operationId": "delete_interface_v0_interface_delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Name"
                        }
                    },
                    {
                        "name": "project",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project"
                        }
                    },
                    {
                        "name": "temporary",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "title": "Temporary"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Interface deleted.",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Interface deleted successfully!"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Interface Not Found",
                        "content": {
                            "application/json": {
                                "example": "Interface not added yet. Create it first."
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/credits": {
            "get": {
                "tags": [
                    "Credits"
                ],
                "summary": "Get Credits",
                "description": "Returns the number of available credits.",
                "operationId": "get_credits_v0_credits_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreditsResponse"
                                },
                                "example": {
                                    "id": "<USER_ID>",
                                    "credits": 10
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/promo": {
            "post": {
                "tags": [
                    "Credits"
                ],
                "summary": "Promo Code",
                "description": "Activates a promotional code.",
                "operationId": "promo_code_v0_promo_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "code",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Promo code to be activated.",
                            "title": "Code"
                        },
                        "description": "Promo code to be activated.",
                        "example": "sample_code"
                    },
                    {
                        "name": "user",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "ID of the user that receives the credits,defaults to the user making the request.",
                            "title": "User"
                        },
                        "description": "ID of the user that receives the credits,defaults to the user making the request.",
                        "example": "sample_user_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    },
                                    "title": "Response Promo Code V0 Promo Post"
                                },
                                "example": {
                                    "info": "Code {code} activated successfully!"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Already activated code",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "This code has already been activated."
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Code Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Invalid code."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/metrics": {
            "get": {
                "summary": "Metrics",
                "description": "Endpoint that returns the aggregated Prometheus metrics.\nIncludes simple Bearer-token authentication to secure the endpoint.",
                "operationId": "metrics_metrics_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "AddLogsToContextRequest": {
                "properties": {
                    "context_name": {
                        "type": "string",
                        "title": "Context Name",
                        "description": "Name of the context to add logs to.",
                        "example": "experiment1/trial1"
                    },
                    "log_ids": {
                        "items": {
                            "type": "integer"
                        },
                        "type": "array",
                        "minItems": 1,
                        "title": "Log Ids",
                        "description": "List of log IDs to add to the context. At least one log ID must be provided.",
                        "example": [
                            123,
                            456,
                            789
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "context_name",
                    "log_ids"
                ],
                "title": "AddLogsToContextRequest",
                "description": "Request model for adding existing logs to a context."
            },
            "ArtifactConfig": {
                "properties": {
                    "artifacts": {
                        "type": "object",
                        "title": "Artifacts",
                        "description": "Dictionary containing one or more key:value pairs that will be stored as artifacts within a project.",
                        "example": {
                            "dataset": "high-jump-data",
                            "world-record": 2.45
                        }
                    }
                },
                "type": "object",
                "required": [
                    "artifacts"
                ],
                "title": "ArtifactConfig"
            },
            "Body_log_query_v0_queries_post": {
                "properties": {
                    "endpoint": {
                        "type": "string",
                        "title": "Endpoint",
                        "description": "Endpoint to log query for.",
                        "example": "llama-3.1-8b-chat_ollama@external"
                    },
                    "query_body": {
                        "type": "object",
                        "title": "Query Body",
                        "description": "A JSON object containing the body of the request",
                        "example": {
                            "max_tokens": 100,
                            "messages": [
                                {
                                    "content": "You are an useful assistant",
                                    "role": "system"
                                },
                                {
                                    "content": "Explain who Newton was.",
                                    "role": "user"
                                }
                            ],
                            "model": "llama-3.1-8b-chat_ollama@external",
                            "temperature": 0.5
                        }
                    },
                    "response_body": {
                        "anyOf": [
                            {
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Response Body",
                        "description": "An optional JSON object containing the response to the request",
                        "example": {
                            "choices": [
                                {
                                    "finish_reason": "stop",
                                    "index": 0,
                                    "message": {
                                        "content": "Sir Isaac Newton was an English mathematician, physicist, and astronomer who lived from 1643 to 1727.\\n\\nHe is widely recognized as one of the most influential scientists in history, and his work laid the foundation for the Scientific Revolution of the 17th century.\\n\\nNewton's most famous achievement is his theory of universal gravitation, which he presented in his groundbreaking book \"Philosophi\\u00e6 Naturalis Principia Mathematica\" in 1687.\\n\\nAccording to Newton's theory, every",
                                        "role": "assistant"
                                    }
                                }
                            ],
                            "created": 1725396241,
                            "id": "chatcmpl-92d3b36e-7b64-4ae8-8102-9b7e3f5dd30f",
                            "model": "meta.llama3-8b-instruct-v1:0",
                            "object": "chat.completion",
                            "usage": {
                                "completion_tokens": 100,
                                "prompt_tokens": 44,
                                "total_tokens": 144
                            }
                        }
                    },
                    "tags": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tags",
                        "description": "Tags for later filtering."
                    },
                    "timestamp": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Timestamp",
                        "description": "A timestamp (if not set, will be the time of sending)",
                        "example": "2024-07-12T04:20:32.808410"
                    }
                },
                "type": "object",
                "required": [
                    "endpoint",
                    "query_body"
                ],
                "title": "Body_log_query_v0_queries_post"
            },
            "ChatCompletionRequest": {
                "properties": {
                    "messages": {
                        "items": {
                            "type": "object"
                        },
                        "type": "array",
                        "title": "Messages",
                        "description": "A list of messages comprising the conversation so far.",
                        "example": [
                            {
                                "content": "Tell me a joke",
                                "role": "user"
                            }
                        ]
                    },
                    "model": {
                        "type": "string",
                        "title": "Model",
                        "description": "The endpoint to use, in the format `{model}@{provider}`, based on any of the supported endpoints as per the list returned by `/v0/endpoints`",
                        "example": "gpt-4o-mini@openai"
                    },
                    "max_tokens": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Max Tokens",
                        "description": "The maximum number of tokens that can be generated in the chat completion.\n\nThe total length of input tokens and generated tokens is limited by the model's context length.",
                        "example": 1024
                    },
                    "stop": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Stop",
                        "description": "Up to 4 sequences where the API will stop generating further tokens.",
                        "example": [
                            "The End.",
                            " is the answer."
                        ]
                    },
                    "stream": {
                        "type": "boolean",
                        "title": "Stream",
                        "description": "If set, partial message deltas will be sent. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a `data: [DONE]` message.",
                        "default": false,
                        "example": false
                    },
                    "temperature": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Temperature",
                        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n\nGenerally recommended to alter this or `top_p`, but not both.",
                        "default": 1.0,
                        "example": 0.9
                    },
                    "frequency_penalty": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Frequency Penalty",
                        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
                        "example": 1.5
                    },
                    "logit_bias": {
                        "anyOf": [
                            {
                                "additionalProperties": {
                                    "type": "number"
                                },
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Logit Bias",
                        "description": "Modify the likelihood of specified tokens appearing in the completion.\n\nAccepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.",
                        "example": {
                            "0": 10,
                            "1": -75,
                            "2": 90
                        }
                    },
                    "logprobs": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Logprobs",
                        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`.",
                        "example": false
                    },
                    "top_logprobs": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Top Logprobs",
                        "description": "An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.",
                        "example": 15
                    },
                    "n": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "N",
                        "description": "How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.",
                        "example": 15
                    },
                    "presence_penalty": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Presence Penalty",
                        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
                        "example": -1.1
                    },
                    "response_format": {
                        "anyOf": [
                            {
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Response Format",
                        "description": "An object specifying the format that the model must output.\n\nSetting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema.\n\nSetting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.",
                        "example": "{ \"type\": \"json_mode\"}"
                    },
                    "seed": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Seed",
                        "description": "If specified, the system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result. Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.",
                        "example": 11
                    },
                    "stream_options": {
                        "anyOf": [
                            {
                                "additionalProperties": {
                                    "type": "boolean"
                                },
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Stream Options",
                        "description": "Options for streaming response. Only set this when you set `stream: true`.",
                        "example": [
                            true,
                            "include_usage"
                        ]
                    },
                    "top_p": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Top P",
                        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nGenerally recommended to alter this or `temperature` but not both.",
                        "example": 0.5
                    },
                    "tools": {
                        "anyOf": [
                            {
                                "items": {},
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tools",
                        "description": "A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported."
                    },
                    "tool_choice": {
                        "anyOf": [
                            {},
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tool Choice",
                        "description": "Controls which (if any) tool is called by the model. `none` means the model will not call any tool and instead generates a message.`auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools. Specifying a particular tool via `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool.\n\n`none` is the default when no tools are present. `auto` is the default if tools are present.",
                        "example": "{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}"
                    },
                    "parallel_tool_calls": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Parallel Tool Calls",
                        "description": "Whether to enable parallel function calling during tool use.",
                        "default": true,
                        "example": true
                    },
                    "user": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "User",
                        "description": "A unique identifier representing your end-user.",
                        "example": "some_user"
                    },
                    "signature": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Signature",
                        "description": "A string used to represent where the request came from, for examples, did it come via the Python package, the NodeJS package, the chat interface etc. This should *not* be set by the user.",
                        "example": "python"
                    },
                    "use_custom_keys": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Use Custom Keys",
                        "description": "Whether or not to use custom API keys with the specified provider, meaning that you will be using your own account with that provider in the backend.",
                        "example": true
                    },
                    "tags": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tags",
                        "description": "Comma-separated list of tags to associate with the corresponding prompt.",
                        "example": [
                            "user123",
                            "CompanyABC"
                        ]
                    },
                    "drop_params": {
                        "type": "boolean",
                        "title": "Drop Params",
                        "description": "Whether or not to drop unsupported OpenAI params by the provider you're using",
                        "default": true,
                        "example": true
                    },
                    "region": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Region",
                        "description": "A string used to represent the region where the endpoint is accessed. This is only relevant for certain providers like `vertex-ai` and `aws-bedrock`, where the endpoint is being accessed through a specified region."
                    },
                    "log_query_body": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Log Query Body",
                        "description": "Whether to log the contents of the query json body.",
                        "default": true
                    },
                    "log_response_body": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Log Response Body",
                        "description": "Whether to log the contents of the response json body.",
                        "default": true
                    }
                },
                "additionalProperties": true,
                "type": "object",
                "required": [
                    "messages",
                    "model"
                ],
                "title": "ChatCompletionRequest",
                "description": "Request model for chat completion based language model.\n\nAttributes:\n    model (str): The model identifier.\n    messages (List[Dict[str]]): List of messages for completion.\n    temperature (float): The temperature parameter for generating completions.\n    stream (bool): Whether to stream the response."
            },
            "ChatCompletionResponse": {
                "properties": {
                    "model": {
                        "type": "string",
                        "title": "Model"
                    },
                    "created": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Created"
                    },
                    "id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Id"
                    },
                    "object": {
                        "type": "string",
                        "title": "Object",
                        "default": "chat.completion"
                    },
                    "usage": {
                        "type": "object",
                        "title": "Usage"
                    },
                    "choices": {
                        "items": {
                            "type": "object"
                        },
                        "type": "array",
                        "title": "Choices"
                    }
                },
                "type": "object",
                "required": [
                    "model",
                    "usage",
                    "choices"
                ],
                "title": "ChatCompletionResponse",
                "description": "Response model for chat completion based language model.\n\nAttributes:\n    model (str): The model identifier.\n    created (int): Timestamp indicating when the response was created.\n    id (str): Identifier for the completion response.\n    object (str): The type of object, defaults to \"chat.completion\".\n    usage (dict): Usage statistics or additional information.\n    choices (List[Dict]): List of completion choices."
            },
            "ContextArtifactCreateRequest": {
                "properties": {
                    "artifacts": {
                        "type": "object",
                        "title": "Artifacts",
                        "description": "Dictionary containing one or more key:value pairs that will be stored as artifacts within a project.",
                        "example": {
                            "dataset": "high-jump-data",
                            "world-record": 2.45
                        }
                    }
                },
                "type": "object",
                "required": [
                    "artifacts"
                ],
                "title": "ContextArtifactCreateRequest",
                "description": "Request model for creating a new context artifact within a context."
            },
            "ContextCreateRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "Context name, can be nested using '/' (e.g., 'parent/child'). Must contain only alphanumeric characters, underscores, and hyphens.",
                        "example": "experiment1/trial1"
                    },
                    "description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description",
                        "description": "Optional description of the context",
                        "example": "Context for experiment 1 trial 1"
                    },
                    "is_versioned": {
                        "type": "boolean",
                        "title": "Is Versioned",
                        "description": "Whether the context should be versioned. If True, the context will be versioned and mutable. ",
                        "default": false,
                        "example": true
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ],
                "title": "ContextCreateRequest",
                "description": "Request model for creating a new context within a project."
            },
            "CreateDerivedEntriesConfig": {
                "properties": {
                    "project": {
                        "type": "string",
                        "title": "Project",
                        "description": "Name of the project the stored entries will be associated to.",
                        "example": "eval-project"
                    },
                    "context": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ContextCreateRequest"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Optional context path to update for the logs. Can use '/' for nested contexts (e.g. 'training/batch1').",
                        "example": "experiment1/trial1"
                    },
                    "key": {
                        "type": "string",
                        "title": "Key",
                        "description": "The name of the entry.",
                        "example": "score_diff"
                    },
                    "equation": {
                        "type": "string",
                        "title": "Equation",
                        "description": "The equation for computing the value of each derived entry.",
                        "example": "{log0:score} - {log1:score}"
                    },
                    "referenced_logs": {
                        "additionalProperties": {
                            "anyOf": [
                                {
                                    "items": {
                                        "type": "integer"
                                    },
                                    "type": "array"
                                },
                                {
                                    "type": "object"
                                }
                            ]
                        },
                        "type": "object",
                        "title": "Referenced Logs",
                        "description": "The logs to use for each newly created derived entry, either as a list of log ids or as a set of arguments for the get_logs endpoint.",
                        "example": {
                            "log0": [
                                0,
                                1,
                                2
                            ],
                            "log1": {
                                "filter_expr": "score > 0.5"
                            }
                        }
                    }
                },
                "type": "object",
                "required": [
                    "project",
                    "key",
                    "equation",
                    "referenced_logs"
                ],
                "title": "CreateDerivedEntriesConfig"
            },
            "CreateLogConfig": {
                "properties": {
                    "project": {
                        "type": "string",
                        "title": "Project",
                        "description": "Name of the project the stored entries will be associated to.",
                        "example": "eval-project"
                    },
                    "context": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ContextCreateRequest"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Optional context path to update for the logs. Can use '/' for nested contexts (e.g. 'training/batch1').",
                        "example": "experiment1/trial1"
                    },
                    "params": {
                        "anyOf": [
                            {
                                "type": "object"
                            },
                            {
                                "items": {
                                    "type": "object"
                                },
                                "type": "array"
                            }
                        ],
                        "title": "Params",
                        "description": "Dictionary containing one or more key:value pairs that will be logged into the platform. Can be either a single dictionary or a list of dictionaries for batch processing. When using lists for both params and entries, their lengths must match. Parameters will be automatically versioned based on their values. Values must be JSON serializable. If a `explicit_types` dictionary is present, its values will override the inferred types of the entries. The explicit_types dictionary can also specify if a field is mutable via a 'mutable' boolean flag.",
                        "default": {},
                        "examples": [
                            {
                                "explicit_types": {
                                    "system-prompt": {
                                        "mutable": true,
                                        "type": "str"
                                    }
                                },
                                "function_definition": "...",
                                "system-prompt": "..."
                            },
                            [
                                {
                                    "system-prompt": "prompt1"
                                },
                                {
                                    "system-prompt": "prompt2"
                                }
                            ]
                        ]
                    },
                    "entries": {
                        "anyOf": [
                            {
                                "type": "object"
                            },
                            {
                                "items": {
                                    "type": "object"
                                },
                                "type": "array"
                            }
                        ],
                        "title": "Entries",
                        "description": "Dictionary containing one or more key:value pairs that will be logged into the platform. Can be either a single dictionary or a list of dictionaries for batch processing. When using lists for both params and entries, their lengths must match. Values must be JSON serializable. If a `explicit_types` dictionary is present, its values will override the inferred types of the entries. The explicit_types dictionary can also specify if a field is mutable via a 'mutable' boolean flag.",
                        "default": {},
                        "examples": [
                            {
                                "explicit_types": {
                                    "input": {
                                        "mutable": true,
                                        "type": "Image"
                                    }
                                },
                                "input": "...",
                                "score-test-1": "..."
                            },
                            [
                                {
                                    "input": "test1",
                                    "score": 0.8
                                },
                                {
                                    "input": "test2",
                                    "score": 0.9
                                }
                            ]
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "project"
                ],
                "title": "CreateLogConfig"
            },
            "CreditsResponse": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "credits": {
                        "type": "number",
                        "title": "Credits"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "credits"
                ],
                "title": "CreditsResponse",
                "description": "Response model for credits models.\n\nAttributes:\n    id (str): The id of the users.\n    credits (float): The credits of the users."
            },
            "CustomApiKeyModelResponse": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "value": {
                        "type": "string",
                        "title": "Value"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "value"
                ],
                "title": "CustomApiKeyModelResponse"
            },
            "CustomEndpointModelResponse": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "model_arg": {
                        "type": "string",
                        "title": "Model Arg"
                    },
                    "url": {
                        "type": "string",
                        "title": "Url"
                    },
                    "key": {
                        "type": "string",
                        "title": "Key"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "model_arg",
                    "url",
                    "key"
                ],
                "title": "CustomEndpointModelResponse"
            },
            "DeleteLogEntryRequest": {
                "properties": {
                    "project": {
                        "type": "string",
                        "title": "Project",
                        "description": "Name of the project the logs belong to.",
                        "example": "eval-project"
                    },
                    "context": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ContextCreateRequest"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Optional context path to update for the logs. Can use '/' for nested contexts (e.g. 'training/batch1').",
                        "example": "experiment1/trial1"
                    },
                    "ids_and_fields": {
                        "items": {
                            "prefixItems": [
                                {
                                    "anyOf": [
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "items": {
                                                "type": "integer"
                                            },
                                            "type": "array"
                                        }
                                    ]
                                },
                                {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ]
                                }
                            ],
                            "type": "array",
                            "maxItems": 2,
                            "minItems": 2
                        },
                        "type": "array",
                        "minItems": 1,
                        "title": "Ids And Fields",
                        "description": "List of tuples of log ID(s) and field(s) to delete, either as an individual item or a list of items.",
                        "example": [
                            [
                                123,
                                "score"
                            ],
                            [
                                [
                                    456,
                                    457
                                ],
                                [
                                    "score",
                                    "response"
                                ]
                            ],
                            [
                                [
                                    458,
                                    459,
                                    460
                                ],
                                "response"
                            ]
                        ]
                    },
                    "source_type": {
                        "type": "string",
                        "enum": [
                            "base",
                            "derived",
                            "all"
                        ],
                        "title": "Source Type",
                        "description": "Specifies which type of logs to delete. Can be 'base' for base logs only, 'derived' for derived logs only, or 'all' to delete from both types.",
                        "default": "all",
                        "example": "all"
                    }
                },
                "type": "object",
                "required": [
                    "project",
                    "ids_and_fields"
                ],
                "title": "DeleteLogEntryRequest"
            },
            "GetLogsMetricRequest": {
                "properties": {
                    "key": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Key",
                        "description": "Single key string or a list of keys."
                    },
                    "metrics": {
                        "anyOf": [
                            {
                                "additionalProperties": {
                                    "type": "string"
                                },
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Metrics",
                        "description": "Optional per-key metrics mapping. If provided, overrides the path metric for those keys."
                    },
                    "filter_expr": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "additionalProperties": {
                                    "type": "string"
                                },
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Filter Expr",
                        "description": "Expression to filter logs (string or key->expr dict)."
                    },
                    "from_ids": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "additionalProperties": {
                                    "type": "string"
                                },
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "From Ids",
                        "description": "Log IDs to include (string or key->IDs dict)."
                    },
                    "exclude_ids": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "additionalProperties": {
                                    "type": "string"
                                },
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Exclude Ids",
                        "description": "Log IDs to exclude (string or key->IDs dict)."
                    },
                    "context": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Context",
                        "description": "Context name (string)."
                    }
                },
                "type": "object",
                "title": "GetLogsMetricRequest"
            },
            "HTTPValidationError": {
                "properties": {
                    "detail": {
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        },
                        "type": "array",
                        "title": "Detail"
                    }
                },
                "type": "object",
                "title": "HTTPValidationError"
            },
            "InterfaceConfig": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "project": {
                        "type": "string",
                        "title": "Project"
                    },
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/Item"
                        },
                        "type": "array",
                        "title": "Items"
                    },
                    "new_counter": {
                        "type": "integer",
                        "title": "New Counter"
                    },
                    "temporary": {
                        "type": "boolean",
                        "title": "Temporary",
                        "default": false
                    },
                    "new_name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "New Name"
                    },
                    "context": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Context"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "project",
                    "items",
                    "new_counter"
                ],
                "title": "InterfaceConfig"
            },
            "Item": {
                "properties": {
                    "i": {
                        "type": "string",
                        "title": "I"
                    },
                    "x": {
                        "type": "number",
                        "title": "X"
                    },
                    "y": {
                        "type": "number",
                        "title": "Y"
                    },
                    "w": {
                        "type": "number",
                        "title": "W"
                    },
                    "h": {
                        "type": "number",
                        "title": "H"
                    },
                    "minW": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minw"
                    },
                    "minH": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minh"
                    },
                    "moved": {
                        "type": "boolean",
                        "title": "Moved",
                        "default": false
                    },
                    "static": {
                        "type": "boolean",
                        "title": "Static",
                        "default": false
                    },
                    "visible": {
                        "type": "boolean",
                        "title": "Visible",
                        "default": true
                    },
                    "tab": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tab"
                    },
                    "table": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Table"
                    },
                    "table_type": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Table Type"
                    },
                    "auto_update": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Auto Update"
                    },
                    "freeze": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Freeze"
                    },
                    "context": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Context"
                    },
                    "column_context": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Column Context"
                    },
                    "prev_context": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Prev Context"
                    },
                    "filters": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Filters"
                    },
                    "common_filter": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Common Filter"
                    },
                    "page_number": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Page Number"
                    },
                    "metric": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Metric"
                    },
                    "column_order": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Column Order"
                    },
                    "hidden_columns": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Hidden Columns"
                    },
                    "sorting": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Sorting"
                    },
                    "grouping": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Grouping"
                    },
                    "group_sorting": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Group Sorting"
                    },
                    "columns_pin_left": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Columns Pin Left"
                    },
                    "columns_pin_right": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Columns Pin Right"
                    },
                    "selected": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Selected"
                    },
                    "base_index": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Base Index"
                    },
                    "plot_type": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Plot Type"
                    },
                    "plot_scale_x": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Plot Scale X"
                    },
                    "plot_scale_y": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Plot Scale Y"
                    },
                    "is_aggregated": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Is Aggregated"
                    },
                    "x_axis": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "X Axis"
                    },
                    "y_axis": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Y Axis"
                    },
                    "plot_group_by": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Plot Group By"
                    },
                    "bin_count": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Bin Count"
                    },
                    "regression_line": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Regression Line"
                    }
                },
                "type": "object",
                "required": [
                    "i",
                    "x",
                    "y",
                    "w",
                    "h"
                ],
                "title": "Item"
            },
            "ProjectConfig": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "A unique, user-defined name used when referencing  the project.",
                        "example": "eval-project"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ],
                "title": "ProjectConfig"
            },
            "RenameFieldRequest": {
                "properties": {
                    "project": {
                        "type": "string",
                        "title": "Project",
                        "description": "Name of the project the field belongs to.",
                        "example": "eval-project"
                    },
                    "context": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Context",
                        "description": "The context of the field to rename.",
                        "default": "",
                        "example": "test-context"
                    },
                    "old_field_name": {
                        "type": "string",
                        "title": "Old Field Name",
                        "description": "The current name of the field to rename.",
                        "example": "score"
                    },
                    "new_field_name": {
                        "type": "string",
                        "title": "New Field Name",
                        "description": "The new name for the field.",
                        "example": "score_new"
                    }
                },
                "type": "object",
                "required": [
                    "project",
                    "old_field_name",
                    "new_field_name"
                ],
                "title": "RenameFieldRequest"
            },
            "UpdateDerivedEntriesConfig": {
                "properties": {
                    "project": {
                        "type": "string",
                        "title": "Project",
                        "description": "Name of the project these derived logs belong to.",
                        "example": "eval-project"
                    },
                    "target_derived_logs": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "integer"
                                },
                                "type": "array"
                            },
                            {
                                "type": "object"
                            }
                        ],
                        "title": "Target Derived Logs",
                        "description": "The derived logs to update, either as a list of derived_log IDs or as a set of arguments for the get_logs endpoint.",
                        "example": {
                            "log0": [
                                0,
                                1,
                                2
                            ],
                            "log1": {
                                "filter_expr": "derived_score > 0.5"
                            }
                        }
                    },
                    "key": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Key",
                        "description": "New key name for the derived entries",
                        "example": "temp_plus_20"
                    },
                    "equation": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Equation",
                        "description": "New equation for computing derived values",
                        "example": "{t:temperature} + 20"
                    },
                    "referenced_logs": {
                        "anyOf": [
                            {
                                "additionalProperties": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "type": "integer"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "object"
                                        }
                                    ]
                                },
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Referenced Logs",
                        "description": "Optional new referenced logs to use for computation. Can be specified either as a list of log IDs or as a set of arguments for the get_logs endpoint.",
                        "example": {
                            "other": {
                                "filter_expr": "score > 0.5"
                            },
                            "t": [
                                1,
                                2,
                                3
                            ]
                        }
                    }
                },
                "type": "object",
                "required": [
                    "project",
                    "target_derived_logs"
                ],
                "title": "UpdateDerivedEntriesConfig"
            },
            "UpdateLogRequest": {
                "properties": {
                    "ids": {
                        "items": {
                            "type": "integer"
                        },
                        "type": "array",
                        "minItems": 1,
                        "title": "Ids",
                        "description": "List of log IDs to update with new or overriding entries.",
                        "example": [
                            123,
                            456,
                            789
                        ]
                    },
                    "context": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ContextCreateRequest"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Optional context path to update for the logs. Can use '/' for nested contexts (e.g. 'training/batch1').",
                        "example": "experiment1/trial1"
                    },
                    "params": {
                        "anyOf": [
                            {
                                "type": "object"
                            },
                            {
                                "items": {
                                    "type": "object"
                                },
                                "type": "array"
                            }
                        ],
                        "title": "Params",
                        "description": "Dictionary or list of dictionaries of key-value parameter pairs to add or update in the logs.",
                        "default": {},
                        "example": {
                            "explicit_types": {
                                "system-prompt": {
                                    "mutable": true,
                                    "type": "str"
                                }
                            },
                            "function_definition": "...",
                            "system-prompt": "..."
                        }
                    },
                    "entries": {
                        "anyOf": [
                            {
                                "type": "object"
                            },
                            {
                                "items": {
                                    "type": "object"
                                },
                                "type": "array"
                            }
                        ],
                        "title": "Entries",
                        "description": "Dictionary or list of dictionaries of key-value entry pairs to add or update in the logs.",
                        "default": {},
                        "example": {
                            "explicit_types": {
                                "input": {
                                    "mutable": true,
                                    "type": "Image"
                                }
                            },
                            "input": "...",
                            "score-test-1": "..."
                        }
                    },
                    "overwrite": {
                        "type": "boolean",
                        "title": "Overwrite",
                        "description": "Whether to overwrite existing logs",
                        "default": false,
                        "example": false
                    }
                },
                "type": "object",
                "required": [
                    "ids"
                ],
                "title": "UpdateLogRequest"
            },
            "ValidationError": {
                "properties": {
                    "loc": {
                        "items": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer"
                                }
                            ]
                        },
                        "type": "array",
                        "title": "Location"
                    },
                    "msg": {
                        "type": "string",
                        "title": "Message"
                    },
                    "type": {
                        "type": "string",
                        "title": "Error Type"
                    }
                },
                "type": "object",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "title": "ValidationError"
            }
        },
        "securitySchemes": {
            "HTTPBearer": {
                "type": "http",
                "scheme": "bearer"
            }
        }
    }
}