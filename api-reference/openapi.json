{
    "openapi": "3.1.0",
    "info": {
        "title": "UnifyAI HTTP API Reference",
        "version": "0.1.0"
    },
    "paths": {
        "/v0/user/query-logging": {
            "get": {
                "tags": [
                    "Query Logging"
                ],
                "summary": "Get Query Logging Status",
                "description": "Get the current query logging status for the authenticated user.",
                "operationId": "get_query_logging_status_v0_user_query_logging_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Query Logging"
                ],
                "summary": "Update Query Logging Status",
                "description": "Update the query logging status for the authenticated user.",
                "operationId": "update_query_logging_status_v0_user_query_logging_patch",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateQueryLoggingRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/user/basic-info": {
            "get": {
                "tags": [
                    "Query Logging"
                ],
                "summary": "Get User Basic Info",
                "description": "Get basic information for the authenticated user.",
                "operationId": "get_user_basic_info_v0_user_basic_info_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/user/business-status": {
            "get": {
                "tags": [
                    "Query Logging"
                ],
                "summary": "Get User Business Status",
                "description": "Get the current user's business classification status.",
                "operationId": "get_user_business_status_v0_user_business_status_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserBusinessStatusResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/user/account-type": {
            "put": {
                "tags": [
                    "Query Logging"
                ],
                "summary": "Update User Account Type",
                "description": "Update user account type (individual vs business).",
                "operationId": "update_user_account_type_v0_user_account_type_put",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateAccountTypeRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/user/business-info": {
            "patch": {
                "tags": [
                    "Query Logging"
                ],
                "summary": "Update User Business Info",
                "description": "Update business information for business accounts.",
                "operationId": "update_user_business_info_v0_user_business_info_patch",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateBusinessInfoRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/user/create-with-business-info": {
            "post": {
                "tags": [
                    "Query Logging"
                ],
                "summary": "Create User With Business Info",
                "description": "Create a new user with business classification (for signup flow).",
                "operationId": "create_user_with_business_info_v0_user_create_with_business_info_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateAccountTypeRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/user/assistant-hiring-approval": {
            "post": {
                "tags": [
                    "Query Logging"
                ],
                "summary": "Request Assistant Hiring Approval",
                "operationId": "request_assistant_hiring_approval_v0_user_assistant_hiring_approval_post",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssistantHiringApprovalResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/user/claim-assistant-hiring-one-time-link": {
            "post": {
                "tags": [
                    "Query Logging"
                ],
                "summary": "Claim Assistant Hiring One Time Link",
                "operationId": "claim_assistant_hiring_one_time_link_v0_user_claim_assistant_hiring_one_time_link_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AssistantHiringOneTimeLinkClaimTokenRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssistantHiringApprovalResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/user/validate-tax-id": {
            "post": {
                "tags": [
                    "Query Logging"
                ],
                "summary": "Validate Tax Id",
                "description": "Validate a tax ID format for a specific country.",
                "operationId": "validate_tax_id_v0_user_validate_tax_id_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "tax_id",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Tax ID to validate",
                            "title": "Tax Id"
                        },
                        "description": "Tax ID to validate"
                    },
                    {
                        "name": "country",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Two-letter country code",
                            "title": "Country"
                        },
                        "description": "Two-letter country code"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/user/supported-tax-countries": {
            "get": {
                "tags": [
                    "Query Logging"
                ],
                "summary": "Get Supported Tax Countries",
                "description": "Get list of countries supported for tax ID validation.",
                "operationId": "get_supported_tax_countries_v0_user_supported_tax_countries_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/user/onboarding-status": {
            "get": {
                "tags": [
                    "Query Logging"
                ],
                "summary": "Get Onboarding Status",
                "description": "Get the current user's onboarding status.",
                "operationId": "get_onboarding_status_v0_user_onboarding_status_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OnboardingStatusResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Query Logging"
                ],
                "summary": "Update Onboarding Status",
                "description": "Update the current user's onboarding status.",
                "operationId": "update_onboarding_status_v0_user_onboarding_status_put",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateOnboardingStatusRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/providers": {
            "get": {
                "tags": [
                    "Supported Endpoints"
                ],
                "summary": "List Providers",
                "description": "Lists available providers. If `model` is specified,\nreturns the providers that support that model.",
                "operationId": "list_providers_v0_providers_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "model",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Model to get available providers for.",
                            "title": "Model"
                        },
                        "description": "Model to get available providers for.",
                        "example": "llama-3.1-405b-chat"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "title": "Response List Providers V0 Providers Get"
                                },
                                "example": [
                                    "openai",
                                    "anthropic",
                                    "together-ai",
                                    "..."
                                ]
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/models": {
            "get": {
                "tags": [
                    "Supported Endpoints"
                ],
                "summary": "List Models",
                "description": "Lists available models. If `provider` is specified,\nreturns the models that the provider supports.\nYou can also show all *custom* models by passing `custom` as the provider.",
                "operationId": "list_models_v0_models_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "provider",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Provider to get available models from.",
                            "title": "Provider"
                        },
                        "description": "Provider to get available models from.",
                        "example": "openai"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "title": "Response List Models V0 Models Get"
                                },
                                "example": [
                                    "gpt-3.5-turbo",
                                    "gpt-4",
                                    "claude-3-haiku",
                                    "..."
                                ]
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/endpoints": {
            "get": {
                "tags": [
                    "Supported Endpoints"
                ],
                "summary": "List Endpoints",
                "description": "Lists available endpoints in `model@provider` format.\nIf `model` or `provider` are specified, only the matching endpoints will be listed.\nYou can also show all *custom* endpoints by passing `custom` as the provider.",
                "operationId": "list_endpoints_v0_endpoints_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "model",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Model to get available endpoints for.",
                            "title": "Model"
                        },
                        "description": "Model to get available endpoints for.",
                        "example": "llama-3.1-405b-chat"
                    },
                    {
                        "name": "provider",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Provider to get available endpoints for.",
                            "title": "Provider"
                        },
                        "description": "Provider to get available endpoints for.",
                        "example": "openai"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "title": "Response List Endpoints V0 Endpoints Get"
                                },
                                "example": [
                                    "claude-3-haiku@anthropic",
                                    "llama-3-70b-chat@groq",
                                    "mistral-large@mistral-ai",
                                    "..."
                                ]
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/chat/completions": {
            "post": {
                "tags": [
                    "LLM Queries"
                ],
                "summary": "Chat Completions",
                "description": "OpenAI compatible `/chat/completions` endpoint for LLM inference.\nCheck the OpenAI\n[API reference](https://platform.openai.com/docs/api-reference/chat)\nfor the most updated documentation. The ground truth is always the latest OpenAI API\nReference. The arguments below are copied for convenience, but might not be fully\nup-to-date at all times.",
                "operationId": "chat_completions_v0_chat_completions_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "anyOf": [
                                    {
                                        "$ref": "#/components/schemas/ChatCompletionRequest"
                                    },
                                    {
                                        "items": {
                                            "$ref": "#/components/schemas/ChatCompletionRequest"
                                        },
                                        "type": "array"
                                    }
                                ],
                                "title": "Request"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChatCompletionResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/tags": {
            "get": {
                "tags": [
                    "Usage"
                ],
                "summary": "Get Query Tags",
                "operationId": "get_query_tags_v0_tags_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array",
                                    "title": "Response Get Query Tags V0 Tags Get"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/queries": {
            "get": {
                "tags": [
                    "Usage"
                ],
                "summary": "Get Queries",
                "operationId": "get_queries_v0_queries_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "tags",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Tags to filter for queries that are marked with these tags.",
                            "title": "Tags"
                        },
                        "description": "Tags to filter for queries that are marked with these tags.",
                        "example": "my_tag"
                    },
                    {
                        "name": "endpoints",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Optionally specify an endpoint, or a list of endpoints to filter for",
                            "title": "Endpoints"
                        },
                        "description": "Optionally specify an endpoint, or a list of endpoints to filter for",
                        "example": "gpt-4o@openai"
                    },
                    {
                        "name": "start_time",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Timestamp of the earliest query to aggregate. Format is `YYYY-MM-DD hh:mm:ss`.",
                            "title": "Start Time"
                        },
                        "description": "Timestamp of the earliest query to aggregate. Format is `YYYY-MM-DD hh:mm:ss`.",
                        "example": "2024-07-12 04:20:32"
                    },
                    {
                        "name": "end_time",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Timestamp of the latest query to aggregate. Format is `YYYY-MM-DD hh:mm:ss`.",
                            "title": "End Time"
                        },
                        "description": "Timestamp of the latest query to aggregate. Format is `YYYY-MM-DD hh:mm:ss`.",
                        "example": "2024-08-12 04:20:32"
                    },
                    {
                        "name": "page_number",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The query history is returned in pages, with up to 20 prompts per page. Increase the page number to see older prompts.",
                            "default": 1,
                            "title": "Page Number"
                        },
                        "description": "The query history is returned in pages, with up to 20 prompts per page. Increase the page number to see older prompts.",
                        "example": "1"
                    },
                    {
                        "name": "failures",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "boolean"
                                },
                                {
                                    "const": "only",
                                    "type": "string"
                                }
                            ],
                            "description": "indicates whether to includes failures in the return (when set as True ), or whether to return failures exlusively (when set as 'only').",
                            "default": false,
                            "title": "Failures"
                        },
                        "description": "indicates whether to includes failures in the return (when set as True ), or whether to return failures exlusively (when set as 'only').",
                        "example": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Usage"
                ],
                "summary": "Log Query",
                "operationId": "log_query_v0_queries_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_log_query_v0_queries_post"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/metrics": {
            "get": {
                "tags": [
                    "Usage"
                ],
                "summary": "Get Query Metrics",
                "description": "Returns aggregated telemetry data from previous queries to the `/chat/completions`\nendpoint, specifically the p50 and p95 for generation time and tokens per second,\nand also the total prompt and completion tokens processed within the interval. The\nuser id and total request count within the interval are also returned.",
                "operationId": "get_query_metrics_v0_metrics_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "start_time",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Timestamp of the earliest query to aggregate. Format is `YYYY-MM-DD hh:mm:ss`.",
                            "title": "Start Time"
                        },
                        "description": "Timestamp of the earliest query to aggregate. Format is `YYYY-MM-DD hh:mm:ss`.",
                        "example": "2024-07-12 04:20:32"
                    },
                    {
                        "name": "end_time",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Timestamp of the latest query to aggregate. Format is `YYYY-MM-DD hh:mm:ss`.",
                            "title": "End Time"
                        },
                        "description": "Timestamp of the latest query to aggregate. Format is `YYYY-MM-DD hh:mm:ss`.",
                        "example": "2024-08-12 04:20:32"
                    },
                    {
                        "name": "models",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Models to fetch metrics from. The list must be a set of comma-separated strings. i.e. `gpt-3.5-turbo,gpt-4o`",
                            "title": "Models"
                        },
                        "description": "Models to fetch metrics from. The list must be a set of comma-separated strings. i.e. `gpt-3.5-turbo,gpt-4o`",
                        "example": "gpt-4o,llama-3.1-405b-chat,claude-3.5-sonnet"
                    },
                    {
                        "name": "providers",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Providers to fetch metrics from. The list must be a set of comma-separated strings. i.e. `openai,together-ai`",
                            "title": "Providers"
                        },
                        "description": "Providers to fetch metrics from. The list must be a set of comma-separated strings. i.e. `openai,together-ai`",
                        "example": "openai,anthropic,fireworks-ai"
                    },
                    {
                        "name": "interval",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Number of seconds in the aggregation interval.",
                            "default": 300,
                            "title": "Interval"
                        },
                        "description": "Number of seconds in the aggregation interval.",
                        "example": 300
                    },
                    {
                        "name": "secondary_user_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Secondary user id. The secondary user id will match any string previously sent in the `user` attribute of `/chat/completions`.",
                            "title": "Secondary User Id"
                        },
                        "description": "Secondary user id. The secondary user id will match any string previously sent in the `user` attribute of `/chat/completions`.",
                        "example": "sample_user_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object"
                                    },
                                    "title": "Response Get Query Metrics V0 Metrics Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/custom_api_key": {
            "post": {
                "tags": [
                    "Custom API keys"
                ],
                "summary": "Create Custom Api Key",
                "description": "Stores a custom API key from an LLM provider in your account. This can be done in\none of two ways:\n\n1. As part of a custom endpoint. If you define a custom endpoint, you can reference\na custom API key. This will be sent to the endpoint as part of the request.\n\n2. To use your own API keys with the standard providers. If any of your custom API\nkeys match a provider name and you pass `use_custom_keys=True` to the\n`/chat/completions` endpoint, then this API key will be used, using your own\naccount with the provider directly.",
                "operationId": "create_custom_api_key_v0_custom_api_key_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the API key.",
                            "title": "Name"
                        },
                        "description": "Name of the API key.",
                        "example": "key1"
                    },
                    {
                        "name": "value",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Value of the API key.",
                            "title": "Value"
                        },
                        "description": "Value of the API key.",
                        "example": "value1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    },
                                    "title": "Response Create Custom Api Key V0 Custom Api Key Post"
                                },
                                "example": {
                                    "info": "API key created successfully!"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Custom API keys"
                ],
                "summary": "Get Custom Api Key",
                "description": "Returns the value of the key for the specified custom API key name.",
                "operationId": "get_custom_api_key_v0_custom_api_key_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the API key to get the value for.",
                            "title": "Name"
                        },
                        "description": "Name of the API key to get the value for.",
                        "example": "key1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomApiKeyModelResponse"
                                },
                                "example": {
                                    "name": "custom_api_key_name",
                                    "value": "custom_api_key_value"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Custom API key Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Custom API key not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Custom API keys"
                ],
                "summary": "Delete Custom Api Key",
                "description": "Deletes the custom API key from your account.",
                "operationId": "delete_custom_api_key_v0_custom_api_key_delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the custom API key to delete.",
                            "title": "Name"
                        },
                        "description": "Name of the custom API key to delete.",
                        "example": "key1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    },
                                    "title": "Response Delete Custom Api Key V0 Custom Api Key Delete"
                                },
                                "example": {
                                    "info": "API key deleted successfully!"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Custom API key Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Custom API key not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/custom_api_key/rename": {
            "post": {
                "tags": [
                    "Custom API keys"
                ],
                "summary": "Rename Custom Api Key",
                "description": "Renames the custom API key in your account.",
                "operationId": "rename_custom_api_key_v0_custom_api_key_rename_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the custom API key to be updated.",
                            "title": "Name"
                        },
                        "description": "Name of the custom API key to be updated.",
                        "example": "key1"
                    },
                    {
                        "name": "new_name",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "New name for the custom API key.",
                            "title": "New Name"
                        },
                        "description": "New name for the custom API key.",
                        "example": "key2"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    },
                                    "title": "Response Rename Custom Api Key V0 Custom Api Key Rename Post"
                                },
                                "example": {
                                    "info": "API key renamed successfully!"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Custom API key Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Custom API key not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/custom_api_key/list": {
            "get": {
                "tags": [
                    "Custom API keys"
                ],
                "summary": "List Custom Api Keys",
                "description": "Returns a list of the names for all custom API keys in your account.",
                "operationId": "list_custom_api_keys_v0_custom_api_key_list_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CustomApiKeyModelResponse"
                                    },
                                    "type": "array",
                                    "title": "Response List Custom Api Keys V0 Custom Api Key List Get"
                                },
                                "example": [
                                    {
                                        "name": "custom_key_1",
                                        "value": "****alue_1"
                                    },
                                    {
                                        "name": "custom_key_2",
                                        "value": "****alue_2"
                                    }
                                ]
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/custom_endpoint": {
            "post": {
                "tags": [
                    "Custom Endpoints"
                ],
                "summary": "Create Custom Endpoint",
                "description": "Creates a custom endpoint. This endpoint must either be a fine-tuned model from one\nof the supported providers (`/v0/providers`), in which case the \"provider\" argument\nmust be set accordingly. Otherwise, the endpoint must support the OpenAI\n`/chat/completions` format. To query your custom endpoint, replace your endpoint\nstring with `<endpoint_name>@custom` when querying any general custom endpoint. You\ncan show all *custom* endpoints by querying `/v0/endpoints` and passing `custom` as\nthe `provider` argument.",
                "operationId": "create_custom_endpoint_v0_custom_endpoint_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The endpoint name for your custom endpoint, in model@provider format. If it's a custom endpoint following the OpenAI format then the provider must be `@custom`, otherwise if it's a fine-tuned model from one of the existing providers it can be specified with a prepending `custom-`, i.e. `@custom-anthropic`.",
                            "title": "Name"
                        },
                        "description": "The endpoint name for your custom endpoint, in model@provider format. If it's a custom endpoint following the OpenAI format then the provider must be `@custom`, otherwise if it's a fine-tuned model from one of the existing providers it can be specified with a prepending `custom-`, i.e. `@custom-anthropic`.",
                        "example": "endpoint1"
                    },
                    {
                        "name": "url",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Base URL of the endpoint being called. Must support the OpenAI format.",
                            "title": "Url"
                        },
                        "description": "Base URL of the endpoint being called. Must support the OpenAI format.",
                        "example": "https://api.url1.com"
                    },
                    {
                        "name": "key_name",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the API key that will be passed as part of the query.",
                            "title": "Key Name"
                        },
                        "description": "Name of the API key that will be passed as part of the query.",
                        "example": "key1"
                    },
                    {
                        "name": "model_arg",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "The value passed to the model arugment of the *underlying* API which is being wrapped into Unify. For example, you might call your endpoint `llama-3-baseten@custom` to distinguish the custom endpoint within Unify, but under the hood need to pass `llama-3.2-90b-chat` to the Baseten endpoint.",
                            "title": "Model Arg"
                        },
                        "description": "The value passed to the model arugment of the *underlying* API which is being wrapped into Unify. For example, you might call your endpoint `llama-3-baseten@custom` to distinguish the custom endpoint within Unify, but under the hood need to pass `llama-3.2-90b-chat` to the Baseten endpoint.",
                        "example": "llama-3.1-8b-finetuned"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    },
                                    "title": "Response Create Custom Endpoint V0 Custom Endpoint Post"
                                },
                                "example": {
                                    "info": "Custom endpoint created successfully!"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Custom API Key Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Custom API Key not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Custom Endpoints"
                ],
                "summary": "Delete Custom Endpoint",
                "description": "Deletes a custom endpoint from your account.",
                "operationId": "delete_custom_endpoint_v0_custom_endpoint_delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the custom endpoint to delete.",
                            "title": "Name"
                        },
                        "description": "Name of the custom endpoint to delete.",
                        "example": "endpoint1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    },
                                    "title": "Response Delete Custom Endpoint V0 Custom Endpoint Delete"
                                },
                                "example": {
                                    "info": "Custom endpoint deleted successfully!"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Custom Endpoint Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Custom endpoint not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/custom_endpoint/rename": {
            "post": {
                "tags": [
                    "Custom Endpoints"
                ],
                "summary": "Rename Custom Endpoint",
                "description": "Renames a custom endpoint in your account.",
                "operationId": "rename_custom_endpoint_v0_custom_endpoint_rename_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the custom endpoint to be updated.",
                            "title": "Name"
                        },
                        "description": "Name of the custom endpoint to be updated.",
                        "example": "name1"
                    },
                    {
                        "name": "new_name",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "New name for the custom endpoint.",
                            "title": "New Name"
                        },
                        "description": "New name for the custom endpoint.",
                        "example": "name2"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    },
                                    "title": "Response Rename Custom Endpoint V0 Custom Endpoint Rename Post"
                                },
                                "example": {
                                    "info": "Custom endpoint renamed successfully!"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Custom endpoint Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Custom endpoint not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/custom_endpoint/list": {
            "get": {
                "tags": [
                    "Custom Endpoints"
                ],
                "summary": "List Custom Endpoints",
                "description": "Returns a list of the available custom endpoints.",
                "operationId": "list_custom_endpoints_v0_custom_endpoint_list_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CustomEndpointModelResponse"
                                    },
                                    "type": "array",
                                    "title": "Response List Custom Endpoints V0 Custom Endpoint List Get"
                                },
                                "example": [
                                    {
                                        "name": "endpoint_1",
                                        "model_arg": "llama_finetune",
                                        "url": "https://...",
                                        "key": "custom_key_1"
                                    },
                                    {
                                        "name": "endpoint_2",
                                        "model_arg": "mixtral_finetune",
                                        "url": "https://...",
                                        "key": "custom_key_2"
                                    }
                                ]
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/endpoint-details": {
            "get": {
                "tags": [
                    "Endpoint Metrics"
                ],
                "summary": "Get Endpoint Details",
                "description": "Extracts cost and context window data for the provided endpoint .\n\nThe `endpoint` is the endpoint name in the form <model>@<provider>.",
                "operationId": "get_endpoint_details_v0_endpoint_details_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "endpoint",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Name of the endpoint.",
                            "title": "Endpoint"
                        },
                        "description": "Name of the endpoint.",
                        "example": "claude-3.5-haiku@anthropic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "anyOf": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "type": "number"
                                            }
                                        ]
                                    },
                                    "title": "Response Get Endpoint Details V0 Endpoint Details Get"
                                },
                                "example": {
                                    "endpoint": "claude-3.5-haiku@anthropic",
                                    "context_window": 200000,
                                    "input_cost": 0.8,
                                    "output_cost": 4
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/assistant": {
            "post": {
                "tags": [
                    "Assistant Management"
                ],
                "summary": "Create a new assistant",
                "description": "Creates a new assistant for the authenticated user with the specified configuration. This action will deduct credits from the user account.",
                "operationId": "create_assistant_v0_assistant_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AssistantCreate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Assistant created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InfoResponse_AssistantRead_"
                                },
                                "example": {
                                    "info": {
                                        "agent_id": "123",
                                        "first_name": "Alice",
                                        "surname": "Smith",
                                        "age": 25,
                                        "weekly_limit": 40.0,
                                        "max_parallel": 3,
                                        "created_at": "2025-04-25T12:00:00Z",
                                        "updated_at": "2025-04-25T12:00:00Z",
                                        "phone": "+1-555-123-4567",
                                        "email": "alice.smith@example.com",
                                        "voice_id": "bf0a246a-8642-498a-9950-80c35e9276b5",
                                        "country": "US"
                                    }
                                }
                            }
                        }
                    },
                    "402": {
                        "description": "Insufficient credits",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Insufficient credits to create an assistant."
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "An assistant with the name 'Alice Smith' already exists for this user."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": [
                                        {
                                            "loc": [
                                                "body",
                                                "first_name"
                                            ],
                                            "msg": "field required",
                                            "type": "value_error.missing"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Assistant Management"
                ],
                "summary": "List all assistants",
                "description": "Returns a list of all assistants belonging to the authenticated user.",
                "operationId": "list_assistants_v0_assistant_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "phone",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Only return assistants whose phone number matches this E.164-style value (leading '+' is URL-encoded).",
                            "title": "Phone"
                        },
                        "description": "Only return assistants whose phone number matches this E.164-style value (leading '+' is URL-encoded)."
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Only return assistants whose email address matches this value.",
                            "title": "Email"
                        },
                        "description": "Only return assistants whose email address matches this value."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of assistants retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InfoResponse_List_AssistantRead__"
                                },
                                "example": {
                                    "info": [
                                        {
                                            "agent_id": "123",
                                            "first_name": "Alice",
                                            "surname": "Smith",
                                            "age": 25,
                                            "weekly_limit": 40.0,
                                            "max_parallel": 3,
                                            "phone": "+1-555-123-4567",
                                            "email": "alice.smith@example.com",
                                            "region": "North America",
                                            "profile_photo": "https://example.com/photos/alice.jpg",
                                            "profile_video": "https://example.com/videos/alice.mp4",
                                            "about": "Mathematician and writer known for work on Analytical Engine",
                                            "voice_id": "bf0a246a-8642-498a-9950-80c35e9276b5",
                                            "country": "US",
                                            "created_at": "2025-04-25T12:00:00Z",
                                            "updated_at": "2025-04-25T12:00:00Z"
                                        },
                                        {
                                            "agent_id": "456",
                                            "first_name": "Bob",
                                            "surname": "Jones",
                                            "age": 30,
                                            "weekly_limit": 35.5,
                                            "max_parallel": 2,
                                            "phone": "+1-555-987-6543",
                                            "email": "bob.jones@example.com",
                                            "region": "South America",
                                            "profile_photo": "https://example.com/photos/bob.jpg",
                                            "profile_video": "https://example.com/videos/bob.mp4",
                                            "about": "Machine learning expert with focus on computer vision",
                                            "voice_id": "bf0a246a-8642-498a-9950-80c35e9276b5",
                                            "country": "CA",
                                            "created_at": "2025-04-24T10:30:00Z",
                                            "updated_at": "2025-04-24T10:30:00Z"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/assistant/{assistant_id}": {
            "delete": {
                "tags": [
                    "Assistant Management"
                ],
                "summary": "Delete an assistant",
                "description": "Deletes a specific assistant by ID for the authenticated user.",
                "operationId": "delete_assistant_v0_assistant__assistant_id__delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "assistant_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "Assistant Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Assistant deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InfoResponse_str_"
                                },
                                "example": {
                                    "info": "Assistant deleted successfully"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Assistant Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Assistant not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/assistant/{assistant_id}/config": {
            "patch": {
                "tags": [
                    "Assistant Management"
                ],
                "summary": "Update assistant configuration",
                "description": "Updates the configuration parameters of an existing assistant. Profile photo cannot be updated via this endpoint.",
                "operationId": "update_assistant_config_v0_assistant__assistant_id__config_patch",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "assistant_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "Assistant Id"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AssistantUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Assistant configuration updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InfoResponse_AssistantRead_"
                                },
                                "example": {
                                    "info": {
                                        "agent_id": "123",
                                        "first_name": "Alice",
                                        "surname": "Smith",
                                        "age": 25,
                                        "weekly_limit": 45.0,
                                        "max_parallel": 4,
                                        "about": "Award-winning mathematician specializing in algorithm development",
                                        "phone": "+1-555-987-6543",
                                        "email": "alice.smith@example.com",
                                        "region": "North America",
                                        "profile_photo": "https://example.com/photos/alice.jpg",
                                        "profile_video": "https://example.com/videos/alice.mp4",
                                        "voice_id": "bf0a246a-8642-498a-9950-80c35e9276b5",
                                        "country": "US",
                                        "created_at": "2025-04-25T12:00:00Z",
                                        "updated_at": "2025-04-25T14:30:00Z"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Assistant Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Assistant not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": [
                                        {
                                            "loc": [
                                                "body",
                                                "email"
                                            ],
                                            "msg": "value is not a valid email address",
                                            "type": "value_error.email"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/assistant/{assistant_id}/recordings": {
            "get": {
                "tags": [
                    "Recordings"
                ],
                "summary": "List all recordings for an assistant",
                "description": "Returns a list of all call recordings for the specified assistant.",
                "operationId": "list_recordings_v0_assistant__assistant_id__recordings_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "assistant_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "Assistant Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of recordings retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InfoResponse_List_RecordingInfo__"
                                },
                                "example": {
                                    "info": [
                                        {
                                            "id": 123,
                                            "url": "https://storage.example.com/recordings/call_123.mp3",
                                            "created_at": "2025-05-08T14:30:00Z"
                                        },
                                        {
                                            "id": 124,
                                            "url": "https://storage.example.com/recordings/call_124.mp3",
                                            "created_at": "2025-05-09T10:15:00Z"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Assistant Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Assistant not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/assistant/{assistant_id}/recordings/{recording_id}": {
            "delete": {
                "summary": "Delete a recording",
                "description": "Deletes a specific call recording by ID for the specified assistant.",
                "operationId": "delete_recording_v0_assistant__assistant_id__recordings__recording_id__delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "assistant_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "Assistant Id"
                        }
                    },
                    {
                        "name": "recording_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "Recording Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Recording deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InfoResponse_str_"
                                },
                                "example": {
                                    "info": "Recording deleted successfully"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Recording Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Recording not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/assistant/voice": {
            "get": {
                "tags": [
                    "Voices"
                ],
                "summary": "List voices",
                "description": "Returns a list of all assistant voices created for the user.",
                "operationId": "list_voices_v0_assistant_voice_get",
                "responses": {
                    "200": {
                        "description": "List of voices retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InfoResponse_List_VoiceRead__"
                                },
                                "example": {
                                    "info": [
                                        {
                                            "voice_id": "bf0a246a-8642-498a-9950-80c35e9276b5",
                                            "name": "English Woman Calm 1",
                                            "description": "Calm and relaxting voice of an english-speaking woman",
                                            "gender": "female",
                                            "language": "en",
                                            "provider": "cartesia",
                                            "is_preset": true
                                        },
                                        {
                                            "voice_id": "c99d36f3-5ffd-4253-803a-535c1bc9c306",
                                            "name": "English Male Deep 1",
                                            "description": "A deep, smoooth British man's voice perfect for narration.",
                                            "gender": "male",
                                            "language": "en",
                                            "provider": "elevenlabs",
                                            "is_preset": false
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Voice Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Voice not found."
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Voices"
                ],
                "summary": "Register voice",
                "description": "Register a preset assistant voice.",
                "operationId": "register_voice_v0_assistant_voice_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VoiceCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InfoResponse_VoiceRead_"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Voice created successfully",
                        "content": {
                            "application/json": {
                                "example": {
                                    "info": {
                                        "voice_id": "bf0a246a-8642-498a-9950-80c35e9276b5",
                                        "name": "English Woman Calm 1",
                                        "description": "Calm and relaxting voice of an english-speaking woman",
                                        "gender": "female",
                                        "language": "en",
                                        "provider": "cartesia",
                                        "is_preset": true
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": [
                                        {
                                            "loc": [
                                                "body",
                                                "name"
                                            ],
                                            "msg": "field required",
                                            "type": "value_error.missing"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/assistant/voice/clone": {
            "post": {
                "tags": [
                    "Voices"
                ],
                "summary": "Clone voice",
                "description": "Create a new assistant voice by cloning a voice from an audio file.",
                "operationId": "clone_voice_v0_assistant_voice_clone_post",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_clone_voice_v0_assistant_voice_clone_post"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InfoResponse_VoiceRead_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/assistant/voice/{voice_id}": {
            "delete": {
                "tags": [
                    "Voices"
                ],
                "summary": "Delete voice",
                "description": "Deletes a specific assistant voice.",
                "operationId": "delete_voice_v0_assistant_voice__voice_id__delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "voice_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Voice Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Voice deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InfoResponse_str_"
                                },
                                "example": {
                                    "info": "Voice deleted successfully"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Voice not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Voice not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/assistant/voice/generate": {
            "post": {
                "tags": [
                    "Voices"
                ],
                "summary": "Generate speech from text",
                "description": "Generates audio from text using the specified provider and voice.",
                "operationId": "generate_speech_v0_assistant_voice_generate_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VoiceGenerateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Audio generated successfully. Content-Type will be audio/mpeg, audio/wav, etc.",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request (e.g., invalid provider, provider API error)",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Provider API error: ..."
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service unavailable (e.g. provider API down)",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "TTS provider unavailable."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/assistant/voice/design/preview": {
            "post": {
                "tags": [
                    "Voices",
                    "TTS Design"
                ],
                "summary": "Design Voice Previews",
                "description": "Generates voice design previews from a text description.",
                "operationId": "design_voice_generate_previews_endpoint_v0_assistant_voice_design_preview_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VoiceDesignGeneratePreviewsRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InfoResponse_VoiceDesignGeneratePreviewsAPIResponse_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/assistant/voice/design/create": {
            "post": {
                "tags": [
                    "Voices",
                    "TTS Design"
                ],
                "summary": "Create Voice from Design Preview",
                "description": "Creates a full voice from a generated preview voice id.",
                "operationId": "design_voice_create_from_preview_endpoint_v0_assistant_voice_design_create_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VoiceDesignCreateFromPreviewRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InfoResponse_VoiceRead_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/assistant/photo/upload": {
            "post": {
                "tags": [
                    "Media"
                ],
                "summary": "Upload photo",
                "description": "Uploads a profile photo for an assistant and return the storage URL.",
                "operationId": "upload_assistant_photo_v0_assistant_photo_upload_post",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_upload_assistant_photo_v0_assistant_photo_upload_post"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InfoResponse_AssistantPhotoUploadResponse_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/assistant/video/upload": {
            "post": {
                "tags": [
                    "Media"
                ],
                "summary": "Upload video",
                "description": "Uploads a profile video for an assistant and returns the storage URL.",
                "operationId": "upload_assistant_video_v0_assistant_video_upload_post",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_upload_assistant_video_v0_assistant_video_upload_post"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InfoResponse_AssistantVideoUploadResponse_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/assistant/photo/generate": {
            "post": {
                "tags": [
                    "Media"
                ],
                "summary": "Generate photo",
                "description": "Generates a new photo using a text prompt and returns the image URL. This action costs credits.",
                "operationId": "generate_assistant_photo_v0_assistant_photo_generate_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PhotoGenerateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InfoResponse_str_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/assistant/photo/edit": {
            "post": {
                "tags": [
                    "Media"
                ],
                "summary": "Edit photo",
                "description": "Edits a photo using a text prompt and an input image (URL or file), and returns the image URL. This action costs credits.",
                "operationId": "edit_assistant_photo_v0_assistant_photo_edit_post",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_edit_assistant_photo_v0_assistant_photo_edit_post"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InfoResponse_str_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/assistant/photo/animate": {
            "post": {
                "tags": [
                    "Media"
                ],
                "summary": "Animate photo",
                "description": "Starts a job to generate an animated video of the assistant using an input image and audio. This action costs credits.",
                "operationId": "animate_video_endpoint_v0_assistant_photo_animate_post",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_animate_video_endpoint_v0_assistant_photo_animate_post"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InfoResponse_ReplicatePredictionResponse_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/assistant/photo/animate/{prediction_id}": {
            "get": {
                "tags": [
                    "Media"
                ],
                "summary": "Get animation prediction status",
                "description": "Retrieves the status and result of a video animation job.",
                "operationId": "get_animation_prediction_v0_assistant_photo_animate__prediction_id__get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "prediction_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Prediction Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InfoResponse_ReplicatePredictionResponse_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/assistant/photo/animate/{prediction_id}/cancel": {
            "post": {
                "tags": [
                    "Media"
                ],
                "summary": "Cancel animation prediction",
                "description": "Cancels a running video animation job.",
                "operationId": "cancel_animation_prediction_v0_assistant_photo_animate__prediction_id__cancel_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "prediction_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Prediction Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InfoResponse_ReplicatePredictionResponse_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/project/{project_name}/contexts": {
            "post": {
                "tags": [
                    "Contexts"
                ],
                "summary": "Create Context",
                "description": "Creates one or more contexts within a project. Contexts can be used to organize logs\nand artifacts within a project.\n\nIf is_versioned=True, all logs in this context will be versioned and mutable.\nThe context version will increment automatically when logs are added, updated, or removed.\n\nThe context can be provided as:\n- A string (which will be used as the name with no description)\n- A ContextCreateRequest object with name and description fields\n- A list of strings for batch creation\n- A list of ContextCreateRequest objects for batch creation",
                "operationId": "create_context_v0_project__project_name__contexts_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "project_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the project to create context in.",
                            "title": "Project Name"
                        },
                        "description": "Name of the project to create context in.",
                        "example": "my_project"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "anyOf": [
                                    {
                                        "$ref": "#/components/schemas/ContextCreateRequest"
                                    },
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "anyOf": [
                                                {
                                                    "$ref": "#/components/schemas/ContextCreateRequest"
                                                },
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "object"
                                                }
                                            ]
                                        }
                                    }
                                ],
                                "title": "Request"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "examples": {
                                    "single": {
                                        "summary": "Single context creation",
                                        "value": {
                                            "info": "Context created successfully."
                                        }
                                    },
                                    "batch": {
                                        "summary": "Batch context creation",
                                        "value": {
                                            "info": "Created 3 context(s) successfully.",
                                            "created": [
                                                "experiment1",
                                                "experiment2",
                                                "experiment3"
                                            ]
                                        }
                                    },
                                    "batch_with_errors": {
                                        "summary": "Batch creation with some errors",
                                        "value": {
                                            "info": "Created 2 context(s) successfully.",
                                            "created": [
                                                "experiment1",
                                                "experiment3"
                                            ],
                                            "errors": [
                                                {
                                                    "index": 1,
                                                    "name": "experiment2",
                                                    "error": "A context with this name already exists in the project."
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "examples": {
                                    "already_exists": {
                                        "summary": "Context already exists",
                                        "value": {
                                            "detail": "A context with this name already exists in the project."
                                        }
                                    },
                                    "invalid_name": {
                                        "summary": "Invalid context name",
                                        "value": {
                                            "detail": "Invalid context name. Names can only contain alphanumeric characters, underscores, dashes, and forward slashes. Consecutive slashes are not allowed."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Contexts"
                ],
                "summary": "Get Contexts",
                "description": "Get a list of contexts within a project.\nReturns information about each context including its versioning status and current version.",
                "operationId": "get_contexts_v0_project__project_name__contexts_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "project_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the project to create context in.",
                            "title": "Project Name"
                        },
                        "description": "Name of the project to create context in.",
                        "example": "my_project"
                    },
                    {
                        "name": "prefix",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Optional prefix to filter contexts by name",
                            "title": "Prefix"
                        },
                        "description": "Optional prefix to filter contexts by name",
                        "example": "experiment1/"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Contexts retrieved.",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": [
                                    {
                                        "name": "context1",
                                        "description": "description1",
                                        "is_versioned": true,
                                        "allow_duplicates": true,
                                        "unique_keys": [
                                            "row_id"
                                        ],
                                        "auto_counting": {}
                                    },
                                    {
                                        "name": "context2",
                                        "description": "description2",
                                        "is_versioned": false,
                                        "allow_duplicates": true,
                                        "unique_keys": [
                                            "user_id",
                                            "session_id"
                                        ],
                                        "auto_counting": {
                                            "session_id": "user_id"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    "404": {
                        "description": "Project Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Projects"
                ],
                "summary": "Delete Project Contexts",
                "description": "Deletes all contexts and their associated logs from a project.\nThe project's interfaces remain untouched.",
                "operationId": "delete_project_contexts_v0_project__project_name__contexts_delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "project_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Project name, may contain slashes",
                            "title": "Project Name"
                        },
                        "description": "Project name, may contain slashes",
                        "example": "proj/a"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project contexts and logs deleted.",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Project contexts and logs deleted successfully!"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project <name> not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/project/{project_name}/contexts/{context_name}/commits": {
            "get": {
                "tags": [
                    "Contexts"
                ],
                "summary": "Get context commit history",
                "description": "Retrieves the commit history for a versioned context.",
                "operationId": "get_context_commits_v0_project__project_name__contexts__context_name__commits_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "project_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project Name"
                        }
                    },
                    {
                        "name": "context_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Context Name"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ContextCommitHistory"
                                    },
                                    "title": "Response Get Context Commits V0 Project  Project Name  Contexts  Context Name  Commits Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/project/{project_name}/contexts/{context_name}": {
            "get": {
                "tags": [
                    "Contexts"
                ],
                "summary": "Get Context",
                "description": "Get information about a specific context including its versioning status and current version.",
                "operationId": "get_context_v0_project__project_name__contexts__context_name__get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "project_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the project containing the context.",
                            "title": "Project Name"
                        },
                        "description": "Name of the project containing the context.",
                        "example": "my_project"
                    },
                    {
                        "name": "context_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the context to retrieve.",
                            "title": "Context Name"
                        },
                        "description": "Name of the context to retrieve.",
                        "example": "my_context"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Context retrieved.",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "name": "context1",
                                    "description": "description1",
                                    "is_versioned": true,
                                    "allow_duplicates": true,
                                    "unique_keys": [
                                        "row_id"
                                    ],
                                    "auto_counting": {}
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project or Context Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project or context not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Contexts"
                ],
                "summary": "Delete Context",
                "description": "Deletes a context from a project. This will not delete the logs or artifacts\nwithin the context, but will remove their association with this context.",
                "operationId": "delete_context_v0_project__project_name__contexts__context_name__delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "project_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the project to create context in.",
                            "title": "Project Name"
                        },
                        "description": "Name of the project to create context in.",
                        "example": "my_project"
                    },
                    {
                        "name": "context_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the context to delete.",
                            "title": "Context Name"
                        },
                        "description": "Name of the context to delete.",
                        "example": "my_context"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Context deleted successfully!"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden Operation",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Cannot delete built-in Tasks context."
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project or Context Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project or context not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/project/{project_name}/contexts/add_logs": {
            "post": {
                "tags": [
                    "Contexts"
                ],
                "summary": "Add Logs To Context",
                "description": "Adds existing logs to a context within a project. The logs must already exist\nin the project and can be specified by their IDs or by log_args criteria.\nThe same logs can be associated with multiple contexts.\n\nThe context_name can be provided as a string or as an object with a name field.\nIf the context doesn't exist, it will be created automatically.\n\nIf copy=True, new copies of the logs will be created and added to the context.\nIf copy=False (default), the existing logs will be associated with the context.",
                "operationId": "add_logs_to_context_v0_project__project_name__contexts_add_logs_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "project_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the project to create context in.",
                            "title": "Project Name"
                        },
                        "description": "Name of the project to create context in.",
                        "example": "my_project"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddLogsToContextRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Logs added to context successfully!"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project, Context or Logs Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project, context or specified logs not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/project/{project_name}/contexts/{context_name}/rename": {
            "patch": {
                "tags": [
                    "Contexts"
                ],
                "summary": "Rename Context",
                "description": "Rename an existing context within a project.",
                "operationId": "rename_context_v0_project__project_name__contexts__context_name__rename_patch",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "project_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project Name"
                        }
                    },
                    {
                        "name": "context_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Context Name"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RenameContextRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Context renamed successfully",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Context renamed successfully!"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Context with new name already exists",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "A context with this name already exists in the project."
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden Operation",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Cannot modify built-in Tasks context."
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project or Context Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project or context not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/project/{project_name}/contexts/{context_name}/commit": {
            "post": {
                "tags": [
                    "Contexts"
                ],
                "summary": "Commit a context version",
                "description": "Creates a new version snapshot for a specific context.",
                "operationId": "commit_context_version_v0_project__project_name__contexts__context_name__commit_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "project_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project Name"
                        }
                    },
                    {
                        "name": "context_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Context Name"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ContextCommit"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/project/{project_name}/contexts/{context_name}/rollback": {
            "post": {
                "tags": [
                    "Contexts"
                ],
                "summary": "Rollback a context to a version",
                "description": "Rolls back a context to a specific version by commit hash.",
                "operationId": "rollback_context_version_v0_project__project_name__contexts__context_name__rollback_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "project_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project Name"
                        }
                    },
                    {
                        "name": "context_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Context Name"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ContextRollback"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/project/{project_name}/commit": {
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "Commit Project",
                "description": "Creates a new version of a project.",
                "operationId": "commit_project_v0_project__project_name__commit_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "project_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Project name, may contain slashes",
                            "title": "Project Name"
                        },
                        "description": "Project name, may contain slashes",
                        "example": "proj/a"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectCommitRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Project committed successfully!",
                                    "commit_hash": "..."
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project <name> not found."
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project is not versioned."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/project/{project_name}/rollback": {
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "Rollback Project",
                "description": "Rolls back a project to a specific version.",
                "operationId": "rollback_project_v0_project__project_name__rollback_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "project_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Project name, may contain slashes",
                            "title": "Project Name"
                        },
                        "description": "Project name, may contain slashes",
                        "example": "proj/a"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectRollbackRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Project rolled back successfully!"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project or Commit Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project or commit not found."
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project is not versioned."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/project/{project_name}/commits": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Get project commit history",
                "description": "Retrieves the commit history for a versioned project.",
                "operationId": "get_project_commits_v0_project__project_name__commits_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "project_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Project name, may contain slashes",
                            "title": "Project Name"
                        },
                        "description": "Project name, may contain slashes",
                        "example": "proj/a"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ProjectCommitHistory"
                                    },
                                    "title": "Response Get Project Commits V0 Project  Project Name  Commits Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/project/favorites": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Get Favorites",
                "description": "Returns a list of the user's favorite projects, sorted by position.",
                "operationId": "get_favorites_v0_project_favorites_get",
                "responses": {
                    "200": {
                        "description": "List of favorite projects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/FavoriteProjectOut"
                                    },
                                    "type": "array",
                                    "title": "Response Get Favorites V0 Project Favorites Get"
                                },
                                "example": [
                                    {
                                        "id": 1,
                                        "project": "my-project",
                                        "icon": "star",
                                        "position": 0
                                    },
                                    {
                                        "id": 2,
                                        "project": "another-project",
                                        "icon": "folder",
                                        "position": 1
                                    }
                                ]
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "Create Favorite",
                "description": "Creates a new favorite project for the user.\n\nEach favorite must include a project name, icon, and position.",
                "operationId": "create_favorite_v0_project_favorites_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FavoriteProjectIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Favorite created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FavoriteProjectOut"
                                },
                                "example": {
                                    "id": 1,
                                    "project": "my-project",
                                    "icon": "star",
                                    "position": 0
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request or duplicate favorite",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project is already in favorites"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project 'unknown-project' not found"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/project/favorites/{id}": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Get Favorite",
                "description": "Returns details of a specific favorite project.",
                "operationId": "get_favorite_v0_project_favorites__id__get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "description": "The ID of the favorite to retrieve",
                            "title": "Id"
                        },
                        "description": "The ID of the favorite to retrieve"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Favorite project details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FavoriteProjectOut"
                                },
                                "example": {
                                    "id": 1,
                                    "project": "my-project",
                                    "icon": "star",
                                    "position": 0
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Favorite not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Favorite with ID 123 not found"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Projects"
                ],
                "summary": "Update Favorite",
                "description": "Updates a specific favorite project.\n\nOnly the provided fields will be updated.",
                "operationId": "update_favorite_v0_project_favorites__id__patch",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "description": "The ID of the favorite to update",
                            "title": "Id"
                        },
                        "description": "The ID of the favorite to update"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FavoriteProjectUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Favorite updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FavoriteProjectOut"
                                },
                                "example": {
                                    "id": 1,
                                    "project": "my-project",
                                    "icon": "updated-icon",
                                    "position": 2
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Favorite not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Favorite with ID 123 not found"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Projects"
                ],
                "summary": "Delete Favorite",
                "description": "Deletes a specific favorite project.",
                "operationId": "delete_favorite_v0_project_favorites__id__delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "description": "The ID of the favorite to delete",
                            "title": "Id"
                        },
                        "description": "The ID of the favorite to delete"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Favorite deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Favorite deleted successfully!"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Favorite not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Favorite with ID 123 not found"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/project": {
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "Create Project",
                "description": "Creates a logging project and adds this to your account. This project will\nhave a set of logs associated with it.",
                "operationId": "create_project_v0_project_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectConfig"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Project created successfully!"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Already Existing Project",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "A logging project with this name already exists."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Description must be 256 characters or less."
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/project/{project_name}/logs": {
            "delete": {
                "tags": [
                    "Projects"
                ],
                "summary": "Delete Project Logs",
                "description": "Deletes all logs in a project.",
                "operationId": "delete_project_logs_v0_project__project_name__logs_delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "project_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Project name, may contain slashes",
                            "title": "Project Name"
                        },
                        "description": "Project name, may contain slashes",
                        "example": "proj/a"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project logs deleted.",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "All logs in project deleted successfully"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project <name> not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/project/{project_name}": {
            "delete": {
                "tags": [
                    "Projects"
                ],
                "summary": "Delete Project",
                "description": "Deletes a project from your account.",
                "operationId": "delete_project_v0_project__project_name__delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "project_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Project name, may contain slashes",
                            "title": "Project Name"
                        },
                        "description": "Project name, may contain slashes",
                        "example": "proj/a"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Project deleted successfully!"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project <name> not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Projects"
                ],
                "summary": "Update Project",
                "description": "Updates a project's name and/or description in your account.",
                "operationId": "update_project_v0_project__project_name__patch",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "project_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Project name, may contain slashes",
                            "title": "Project Name"
                        },
                        "description": "Project name, may contain slashes",
                        "example": "proj/a"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Project updated successfully!"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project <name> not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Description must be 256 characters or less."
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Get Project",
                "description": "Returns detailed information about a specific project.",
                "operationId": "get_project_v0_project__project_name__get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "project_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Project name, may contain slashes",
                            "title": "Project Name"
                        },
                        "description": "Project name, may contain slashes",
                        "example": "proj/a"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectOut"
                                },
                                "example": {
                                    "name": "my-project",
                                    "description": "A sample project for evaluation",
                                    "is_versioned": true,
                                    "created_at": "2023-01-01T00:00:00Z",
                                    "updated_at": "2023-01-02T00:00:00Z"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project <name> not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/projects": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "List Projects",
                "description": "Returns the names of all projects stored in your account.",
                "operationId": "list_projects_v0_projects_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": [
                                    "project_a",
                                    "project_b",
                                    "project_c"
                                ]
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/projects/tree": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "List Projects Tree",
                "description": "Return all projects the user can access with their icons and interface names.",
                "operationId": "list_projects_tree_v0_projects_tree_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ProjectTreeItem"
                                    },
                                    "type": "array",
                                    "title": "Response List Projects Tree V0 Projects Tree Get"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/project/export_template": {
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "Export Project Template",
                "description": "Export project interfaces as a reusable template.",
                "operationId": "export_project_template_v0_project_export_template_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExportProjectTemplateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Project template exported successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateExportResponse"
                                },
                                "example": {
                                    "template": {
                                        "interfaces": [
                                            {
                                                "name": "Analytics Dashboard",
                                                "tabs": [
                                                    {
                                                        "name": "Overview",
                                                        "tiles": [
                                                            {
                                                                "name": "Data Table",
                                                                "type": "Table",
                                                                "position": {
                                                                    "x": 0,
                                                                    "y": 0,
                                                                    "width": 6,
                                                                    "height": 4
                                                                }
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "exported_at": "2024-01-01T12:00:00Z"
                                    },
                                    "export_stats": {
                                        "interfaces": 1,
                                        "tabs": 1,
                                        "tiles": 1
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/project/import_template": {
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "Import Project Template",
                "description": "Import a project template into a project.",
                "operationId": "import_project_template_v0_project_import_template_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ImportProjectTemplateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Project template imported successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateImportResponse"
                                },
                                "example": {
                                    "success": true,
                                    "import_stats": {
                                        "interfaces": 2,
                                        "tabs": 4,
                                        "tiles": 10
                                    },
                                    "created_ids": {
                                        "interface_ids": [
                                            "abc123",
                                            "def456"
                                        ]
                                    },
                                    "warnings": []
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/logs": {
            "post": {
                "tags": [
                    "Logs"
                ],
                "summary": "Create Logs",
                "description": "Creates one or more logs associated to a project. Logs are\nLLM-call-level data that might depend on other variables.\n\nIf a context is specified and it is versioned, all logs will be versioned\nand mutable. The context version will be incremented automatically when\nlogs are added, updated, or removed.\n\nThe context parameter can be:\n- A string: Uses the string as the context name with default values (description=None, is_versioned=False)\n- An object: Uses the object's name, description, and is_versioned properties\n\nAn \"explicit_types\" dictionary can be passed as part of the `entries`.\nIf present, any matching key inside this dictionary will override the\ninferred type of that particular entry. The explicit_types dictionary\ncan also specify if a field is mutable via a 'mutable' boolean flag\nand if a field is unique via a 'unique' boolean flag:\n\n```json\n{\n    \"field_name\": {\n        \"type\": \"str\",\n        \"mutable\": false,  # Makes the field immutable\n        \"unique\": true     # Makes the field unique\n    }\n}\n```\n\nBy default, all fields are immmutable unless specified otherwise.\nOnce a field is marked as mutable, only then can it be modified through\nthe update endpoint.\n\nThis method returns the ids of the new stored logs.",
                "operationId": "create_logs_v0_logs_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateLogConfig"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Logs created successfully!",
                                    "log_event_ids": [
                                        101,
                                        102,
                                        103
                                    ],
                                    "row_ids": {
                                        "name": "row_id",
                                        "ids": [
                                            0,
                                            1,
                                            2
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Logs"
                ],
                "summary": "Update Logs",
                "description": "Updates multiple logs with the provided entries. Each entry will be either added\nor overridden in the specified logs.\n\nThe `logs` parameter can be either:\n- A list of log IDs to update\n- A filter dictionary to select logs matching specific criteria (requires `project` or `context`)\n\nA dictionary of \"explicit_types\" can be passed as part of the `entries`.\nIf present, it will override the inferred type of any matching key in all logs.",
                "operationId": "update_logs_v0_logs_put",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateLogRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Logs updated successfully!"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Log Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "One or more logs with the specified IDs were not found."
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "When passing a filter dict in `logs`, you must supply `project` or `context`."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Logs"
                ],
                "summary": "Delete Logs",
                "description": "Deletes log entries based on specified criteria. Can delete both base logs and derived logs.\n\nIf a context is provided, logs will be removed from that context instead of being entirely\ndeleted, unless it is the last context associated with the log. This allows logs to be\nshared across multiple contexts and only removed from specific contexts when needed.\n\nArgs:\n    source_type: Controls which type of logs to delete:\n        - 'all': Delete both base and derived logs (default)\n        - 'base': Only delete base logs\n        - 'derived': Only delete derived logs",
                "operationId": "delete_logs_v0_logs_delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeleteLogEntryRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Log entries deleted successfully!"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Log Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "One or more logs were not found or you don't have permission to delete them."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Logs"
                ],
                "summary": "Get Logs",
                "description": "Returns a list of filtered log entries from a project with various expressiveness options:\n\n  1. **Monolithic mode** (when group_by is not provided):\n     - Returns a flat list of log entries (with fields clipped if value_limit is set).\n     - Optionally factors out repeated fields into a grouped_entries field if group_threshold is set.\n\n  2. **Grouped mode** (when group_by is provided):\n     - Supports multi-level grouping of logs. The order of fields in group_by dictates the nesting order.\n     - Supports pagination at the group level using group_limit and group_offset.\n     - Supports limiting the nesting depth with group_depth.\n     - When nested_groups is True, returns a nested structure under the \"logs\" key.\n     - When nested_groups is False, returns flat per-field mappings under the \"groups\" key.\n     - When groups_only is True, the detailed log objects are omitted and leaves are simplified\n       to either lists of log ids (if return_timestamps is False) or mappings of `{log id: timestamp}` (if True).\n\n  3. **Return IDs only mode**:\n     - If return_ids_only is True, returns only the log event ids.\n\n  4. **Dynamic expression sorting**:\n     - In addition to static field-based sorting, you can use dynamic expressions for sorting.\n     - The same grammar supported for `filter_expr` applies to sorting expressions.\n\nThe response always includes:\n  - `params`: The parameter versions used across the logs.\n  - `count`: The total number of logs matching the query.\n  - Additionally, it includes either `logs` (in monolithic or nested grouping mode) or `groups` (in flat grouping mode)\n    as specified by the arguments.",
                "operationId": "get_logs_v0_logs_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "project",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the project to get entries from.",
                            "title": "Project"
                        },
                        "description": "Name of the project to get entries from.",
                        "example": "eval-project"
                    },
                    {
                        "name": "column_context",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The context (prepending '/' seperated field names) from which to retrieve the logs.",
                            "title": "Column Context"
                        },
                        "description": "The context (prepending '/' seperated field names) from which to retrieve the logs.",
                        "example": "subjects/science/physics"
                    },
                    {
                        "name": "context",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Static context to filter logs by.",
                            "title": "Context"
                        },
                        "description": "Static context to filter logs by.",
                        "example": "training"
                    },
                    {
                        "name": "group_threshold",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "When set, entries that appear in at least this many logs will be grouped together.",
                            "title": "Group Threshold"
                        },
                        "description": "When set, entries that appear in at least this many logs will be grouped together."
                    },
                    {
                        "name": "value_limit",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Maximum number of characters to return for string values.",
                            "title": "Value Limit"
                        },
                        "description": "Maximum number of characters to return for string values."
                    },
                    {
                        "name": "filter_expr",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Boolean string to filter entries. TODO: Detailed page.",
                            "title": "Filter Expr"
                        },
                        "description": "Boolean string to filter entries. TODO: Detailed page.",
                        "example": "len(output) > 200 and temperature == 0.5"
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "JSON-encoded dict mapping either static column names (e.g. `timestamp`) or full Python2SQL expressions (e.g. `cosine(embed('search text'), embedding_vector)`) to sort directions (`\"ascending\"` or `\"descending\"`). The first key is the primary sort field; subsequent keys break ties.",
                            "title": "Sorting"
                        },
                        "description": "JSON-encoded dict mapping either static column names (e.g. `timestamp`) or full Python2SQL expressions (e.g. `cosine(embed('search text'), embedding_vector)`) to sort directions (`\"ascending\"` or `\"descending\"`). The first key is the primary sort field; subsequent keys break ties.",
                        "example": {
                            "timestamp": "descending",
                            "round(score, 2)": "ascending"
                        }
                    },
                    {
                        "name": "group_sorting",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Sorting configuration for groups when using group_by. Specifies how to sort groups relative to each other based on aggregated metrics.",
                            "title": "Group Sorting"
                        },
                        "description": "Sorting configuration for groups when using group_by. Specifies how to sort groups relative to each other based on aggregated metrics.",
                        "example": {
                            "entries/student": {
                                "field": "score",
                                "direction": "descending",
                                "metric": "mean"
                            }
                        }
                    },
                    {
                        "name": "from_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {},
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The log ids which are permitted to be included in the search. Each log id listed does not need to be returned, but no logs which are not included in this list can be returned. This argument *cannot* be set if `exclude_ids` is set.",
                            "title": "From Ids"
                        },
                        "description": "The log ids which are permitted to be included in the search. Each log id listed does not need to be returned, but no logs which are not included in this list can be returned. This argument *cannot* be set if `exclude_ids` is set.",
                        "example": "0&1&2"
                    },
                    {
                        "name": "exclude_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {},
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The log ids which cannot be returned from the search. None of the listed ids will be returned, even if the logs are valid as per the filtering expression etc. This argument *cannot* be set if `from_ids` is set.",
                            "title": "Exclude Ids"
                        },
                        "description": "The log ids which cannot be returned from the search. None of the listed ids will be returned, even if the logs are valid as per the filtering expression etc. This argument *cannot* be set if `from_ids` is set.",
                        "example": "0&1&2"
                    },
                    {
                        "name": "from_fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The fields which are permitted to be included in the search. Each field listed does not need to be returned, but no fields which are not included in this list can be returned. This argument *cannot* be set if `exclude_fields` is set.",
                            "title": "From Fields"
                        },
                        "description": "The fields which are permitted to be included in the search. Each field listed does not need to be returned, but no fields which are not included in this list can be returned. This argument *cannot* be set if `exclude_fields` is set.",
                        "example": "score&response"
                    },
                    {
                        "name": "exclude_fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The fields which cannot be returned from the search. None of the listed fields will be returned, even if the fields are valid as per the filtering expression etc. This argument *cannot* be set if `from_fields` is set.",
                            "title": "Exclude Fields"
                        },
                        "description": "The fields which cannot be returned from the search. None of the listed fields will be returned, even if the fields are valid as per the filtering expression etc. This argument *cannot* be set if `from_fields` is set.",
                        "example": "score&response"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "integer",
                                    "maximum": 1000,
                                    "minimum": 1
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Limit"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "default": 0,
                            "title": "Offset"
                        }
                    },
                    {
                        "name": "group_by",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "List of fields to group results by. Results will be nested based on these fields.",
                            "title": "Group By"
                        },
                        "description": "List of fields to group results by. Results will be nested based on these fields.",
                        "example": [
                            "model",
                            "temperature"
                        ]
                    },
                    {
                        "name": "group_limit",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "integer",
                                    "minimum": 1
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Maximum number of groups to return at each level",
                            "title": "Group Limit"
                        },
                        "description": "Maximum number of groups to return at each level"
                    },
                    {
                        "name": "group_offset",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "description": "Number of groups to skip at each level",
                            "default": 0,
                            "title": "Group Offset"
                        },
                        "description": "Number of groups to skip at each level"
                    },
                    {
                        "name": "group_depth",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Maximum depth of nested groups to return. If not specified, all levels are returned.",
                            "title": "Group Depth"
                        },
                        "description": "Maximum depth of nested groups to return. If not specified, all levels are returned."
                    },
                    {
                        "name": "nested_groups",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "If True, groups are returned as a nested structure; if False, groups are returned as flat per-field mappings.",
                            "default": true,
                            "title": "Nested Groups"
                        },
                        "description": "If True, groups are returned as a nested structure; if False, groups are returned as flat per-field mappings."
                    },
                    {
                        "name": "groups_only",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "If True, do not include a full logs list; only return groups (with leaf values being either log ids or timestamps).",
                            "default": false,
                            "title": "Groups Only"
                        },
                        "description": "If True, do not include a full logs list; only return groups (with leaf values being either log ids or timestamps)."
                    },
                    {
                        "name": "return_timestamps",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "When groups_only is True, return each leaf as a mapping from log id to timestamp instead of just a list of log ids.",
                            "default": false,
                            "title": "Return Timestamps"
                        },
                        "description": "When groups_only is True, return each leaf as a mapping from log id to timestamp instead of just a list of log ids."
                    },
                    {
                        "name": "return_ids_only",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "If True, return only log IDs instead of full entries.",
                            "default": false,
                            "title": "Return Ids Only"
                        },
                        "description": "If True, return only log IDs instead of full entries."
                    },
                    {
                        "name": "randomize",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "If true, return logs in a deterministic random order (fixed seed) instead of newest-first.",
                            "default": false,
                            "title": "Randomize"
                        },
                        "description": "If true, return logs in a deterministic random order (fixed seed) instead of newest-first."
                    },
                    {
                        "name": "seed",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "If provided, use this seed for deterministic random ordering instead of the default.",
                            "default": "42",
                            "title": "Seed"
                        },
                        "description": "If provided, use this seed for deterministic random ordering instead of the default."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "params": {},
                                    "logs": [
                                        {
                                            "id": "0",
                                            "ts": "2024-10-30 12:20:03",
                                            "entries": {
                                                "key1": "a",
                                                "key2": 1.0
                                            },
                                            "derived_entries": {},
                                            "params": {}
                                        },
                                        {
                                            "id": "1",
                                            "ts": "2024-10-30 12:22:14",
                                            "entries": {
                                                "key1": "b",
                                                "key2": 2.0
                                            },
                                            "derived_entries": {},
                                            "params": {}
                                        }
                                    ],
                                    "count": 2
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project <project> not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/logs/derived": {
            "put": {
                "tags": [
                    "Logs"
                ],
                "summary": "Update Derived Log",
                "description": "Updates multiple derived logs, identified either by a direct list of derived IDs or by\nget_logs\u2013style filters. If 'referenced_logs' is provided, we delete all existing\nderived logs for each (log_event_id, key) group and re-insert new ones referencing\nthe new base logs. Finally, we recompute them.\n\nThe context parameter can be:\n- A string: Uses the string as the context name with default values (description=None, is_versioned=False)\n- An object: Uses the object's name, description, and is_versioned properties",
                "operationId": "update_derived_log_v0_logs_derived_put",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateDerivedEntriesConfig"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Derived log updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Derived logs updated successfully!"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Log Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "One or more logs with the specified IDs were not found."
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Invalid request format or data."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Logs"
                ],
                "summary": "Create From Logs",
                "description": "Creates one or more entries based on `body.equation` and `body.referenced_logs`.\n\nWhen body.derived=True (default):\n  Eagerly computes each derived value and stores it in DerivedLog.value.\n\nWhen body.derived=False:\n  Computes values and stores them directly in the base logs as regular entries.\n\nThe context parameter can be:\n- A string: Uses the string as the context name with default values (description=None, is_versioned=False)\n- An object: Uses the object's name, description, and is_versioned properties",
                "operationId": "create_from_logs_v0_logs_derived_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateDerivedEntriesConfig"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Derived log entries created successfully.",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Created 3 derived logs with key='example_key'.",
                                    "derived_log_ids": [
                                        101,
                                        102,
                                        103
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project 'example_project' not found."
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "All referenced log lists must have the same length. Found lengths: [2, 3]."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/logs/latest_timestamp": {
            "get": {
                "tags": [
                    "Logs"
                ],
                "summary": "Get Logs Latest Timestamp",
                "description": "Returns the update timestamp of the most recently updated log within the specified\npage and filter bounds.",
                "operationId": "get_logs_latest_timestamp_v0_logs_latest_timestamp_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "project",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the project to get entries from.",
                            "title": "Project"
                        },
                        "description": "Name of the project to get entries from.",
                        "example": "eval-project"
                    },
                    {
                        "name": "column_context",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The context (prepending '/' seperated field names) from which to retrieve the logs.",
                            "title": "Column Context"
                        },
                        "description": "The context (prepending '/' seperated field names) from which to retrieve the logs.",
                        "example": "subjects/science/physics"
                    },
                    {
                        "name": "context",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Static context to filter logs by.",
                            "title": "Context"
                        },
                        "description": "Static context to filter logs by.",
                        "example": "training"
                    },
                    {
                        "name": "filter_expr",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Boolean string to filter entries. TODO: Detailed page.",
                            "title": "Filter Expr"
                        },
                        "description": "Boolean string to filter entries. TODO: Detailed page.",
                        "example": "len(output) > 200 and temperature == 0.5"
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Dict with fields as keys and either 'ascending' or 'descending' as values. The first entry in the dict is the last field to be sorted by, which takes ultimate precedent, with other keys only remaining in order when the first key values are equal.",
                            "title": "Sorting"
                        },
                        "description": "Dict with fields as keys and either 'ascending' or 'descending' as values. The first entry in the dict is the last field to be sorted by, which takes ultimate precedent, with other keys only remaining in order when the first key values are equal.",
                        "example": {
                            "score": "ascending",
                            "timestamp": "descending"
                        }
                    },
                    {
                        "name": "from_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The log ids which are permitted to be included in the search. Each log id listed does not need to be returned, but no logs which are not included in this list can be returned. This argument *cannot* be set if `exclude_ids` is set.",
                            "title": "From Ids"
                        },
                        "description": "The log ids which are permitted to be included in the search. Each log id listed does not need to be returned, but no logs which are not included in this list can be returned. This argument *cannot* be set if `exclude_ids` is set.",
                        "example": "0&1&2"
                    },
                    {
                        "name": "exclude_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The log ids which cannot be returned from the search. None of the listed ids will be returned, even if the logs are valid as per the filtering expression etc. This argument *cannot* be set if `from_ids` is set.",
                            "title": "Exclude Ids"
                        },
                        "description": "The log ids which cannot be returned from the search. None of the listed ids will be returned, even if the logs are valid as per the filtering expression etc. This argument *cannot* be set if `from_ids` is set.",
                        "example": "0&1&2"
                    },
                    {
                        "name": "from_fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The fields which are permitted to be included in the search. Each field listed does not need to be returned, but no fields which are not included in this list can be returned. This argument *cannot* be set if `exclude_fields` is set.",
                            "title": "From Fields"
                        },
                        "description": "The fields which are permitted to be included in the search. Each field listed does not need to be returned, but no fields which are not included in this list can be returned. This argument *cannot* be set if `exclude_fields` is set.",
                        "example": "score&response"
                    },
                    {
                        "name": "exclude_fields",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The fields which cannot be returned from the search. None of the listed fields will be returned, even if the fields are valid as per the filtering expression etc. This argument *cannot* be set if `from_fields` is set.",
                            "title": "Exclude Fields"
                        },
                        "description": "The fields which cannot be returned from the search. None of the listed fields will be returned, even if the fields are valid as per the filtering expression etc. This argument *cannot* be set if `from_fields` is set.",
                        "example": "score&response"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "integer",
                                    "maximum": 1000,
                                    "minimum": 1
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Limit"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "default": 0,
                            "title": "Offset"
                        }
                    },
                    {
                        "name": "randomize",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "If true, return logs in a deterministic random order (fixed seed) instead of newest-first.",
                            "default": false,
                            "title": "Randomize"
                        },
                        "description": "If true, return logs in a deterministic random order (fixed seed) instead of newest-first."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "params": {},
                                    "logs": [
                                        {
                                            "id": "0",
                                            "ts": "2024-10-30 12:20:03",
                                            "entries": {
                                                "key1": "a",
                                                "key2": 1.0
                                            },
                                            "params": {}
                                        },
                                        {
                                            "id": "1",
                                            "ts": "2024-10-30 12:22:14",
                                            "entries": {
                                                "key1": "b",
                                                "key2": 2.0
                                            },
                                            "params": {}
                                        }
                                    ],
                                    "count": 2
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project <project> not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/logs/metric/{default_metric}": {
            "get": {
                "tags": [
                    "Logs"
                ],
                "summary": "Get Logs Metric",
                "description": "Returns the reduction metric for filtered values (base + derived) for one or more keys from a project.\n\nThis endpoint supports three modes of operation:\n\n1. Single key, no grouping: Returns a single metric value\n   Example:\n   ```bash\n   GET /logs/metric/mean?key=score\n   ```\n   Response:\n   ```json\n   4.56\n   ```\n\n2. Multiple keys, no grouping: Returns a dict mapping keys to metric values\n   Example:\n   ```bash\n   GET /logs/metric/mean?key=[\"score\",\"length\"]\n   ```\n   Response:\n   ```json\n   {\"score\": 4.56, \"length\": 120}\n   ```\n\n3. With grouping: Returns metrics grouped by one or more fields\n   Example:\n   ```bash\n   GET /logs/metric/mean with body {\"key\": \"score\", \"group_by\": \"model\"}\n   ```\n   Response:\n   ```json\n   {\"gpt-4\": 4.56, \"gpt-3.5\": 3.78}\n   ```\n\n   For nested grouping, provide a list of fields:\n   Example:\n   ```bash\n   GET /logs/metric/mean with body {\"key\": \"score\", \"group_by\": [\"model\", \"temperature\"]}\n   ```\n   Response:\n   ```json\n   {\"gpt-4\": {\"0.7\": 4.56, \"0.9\": 4.23}, \"gpt-3.5\": {\"0.7\": 3.78, \"0.9\": 3.45}}\n   ```\n\nThe group_by parameter can be a string for single-level grouping or a list of strings for\nnested grouping. Each group_by field can be prefixed with \"params/\" to indicate it's a parameter.",
                "operationId": "get_logs_metric_v0_logs_metric__default_metric__get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "default_metric",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Default Metric"
                        }
                    },
                    {
                        "name": "project",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "anyOf": [
                                    {
                                        "$ref": "#/components/schemas/GetLogsMetricRequest"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "title": "Request"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "type": "object"
                                        },
                                        {
                                            "type": "number"
                                        },
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "title": "Response Get Logs Metric V0 Logs Metric  Default Metric  Get"
                                },
                                "example": 4.56
                            }
                        }
                    },
                    "404": {
                        "description": "Project Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project <project> not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/logs/groups": {
            "get": {
                "tags": [
                    "Logs"
                ],
                "summary": "Get Log Groups",
                "description": "Returns a dict with the different versions as keys and the values of the remaining\nitems within a given project based on its key.\nThe logs can be filtered using filter_expr, from_ids, and exclude_ids parameters\nbefore grouping.",
                "operationId": "get_log_groups_v0_logs_groups_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "project",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the project to get entries from.",
                            "title": "Project"
                        },
                        "description": "Name of the project to get entries from.",
                        "example": "eval-project"
                    },
                    {
                        "name": "key",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the log entry to get distinct values from.",
                            "title": "Key"
                        },
                        "description": "Name of the log entry to get distinct values from.",
                        "example": "system_prompt"
                    },
                    {
                        "name": "filter_expr",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Boolean string to filter entries before grouping.",
                            "title": "Filter Expr"
                        },
                        "description": "Boolean string to filter entries before grouping.",
                        "example": "len(output) > 200 and temperature == 0.5"
                    },
                    {
                        "name": "from_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The log ids which are permitted to be included in the search. Each log id listed does not need to be returned, but no logs which are not included in this list can be returned. This argument *cannot* be set if `exclude_ids` is set.",
                            "title": "From Ids"
                        },
                        "description": "The log ids which are permitted to be included in the search. Each log id listed does not need to be returned, but no logs which are not included in this list can be returned. This argument *cannot* be set if `exclude_ids` is set.",
                        "example": "0&1&2"
                    },
                    {
                        "name": "exclude_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The log ids which cannot be returned from the search. None of the listed ids will be returned, even if the logs are valid as per the filtering expression etc. This argument *cannot* be set if `from_ids` is set.",
                            "title": "Exclude Ids"
                        },
                        "description": "The log ids which cannot be returned from the search. None of the listed ids will be returned, even if the logs are valid as per the filtering expression etc. This argument *cannot* be set if `from_ids` is set.",
                        "example": "0&1&2"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Get Log Groups V0 Logs Groups Get"
                                },
                                "example": [
                                    {
                                        "version": "v0",
                                        "value": "First version of the system prompt"
                                    },
                                    {
                                        "version": "v1",
                                        "value": "Second version of the system prompt"
                                    }
                                ]
                            }
                        }
                    },
                    "404": {
                        "description": "Project Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project <project> not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/logs/rename_field": {
            "patch": {
                "tags": [
                    "Logs"
                ],
                "summary": "Rename Field",
                "description": "Renames a field across all logs in a project. This includes:\n- Updating the field type record\n- Renaming the field in all logs (regular and history)\n\nThe operation is atomic - either all renames succeed or none do.",
                "operationId": "rename_field_v0_logs_rename_field_patch",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RenameFieldRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Field renamed successfully",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Field renamed successfully from 'old_name' to 'new_name'"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Invalid field name or field already exists"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project or field not found"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/logs/join": {
            "post": {
                "tags": [
                    "Logs"
                ],
                "summary": "Join Logs",
                "description": "Joins two sets of logs based on specified criteria and creates new logs with the joined data.\n\nThe join operation is similar to SQL joins, allowing inner, left, right, and outer joins\nbetween two sets of logs filtered by the criteria in pair_of_args.\n\nArgs:\n    pair_of_args: List of two dictionaries containing filtering criteria for logs to join.\n                 Each dictionary can include context, filter_expr, from_ids, etc.\n    join_expr: SQL expression for the join condition using aliases A and B\n              (e.g., 'A.user_id = B.user_id')\n    mode: Type of join to perform ('inner', 'left', 'right', or 'outer')\n    new_context: Name for the new context where joined logs will be stored\n    columns: Optional list of column names to include in the joined result\n    project: Name of the project containing the logs\n\nReturns:\n    JSON response with info about the join operation",
                "operationId": "join_logs_v0_logs_join_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/JoinLogsRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Logs joined successfully",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Joined logs created successfully!"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Invalid join parameters. Check your request and try again."
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/logs/fields": {
            "get": {
                "tags": [
                    "Logs"
                ],
                "summary": "Get Fields",
                "description": "Returns a dictionary of fields names and their types for the specified project.\nIf a context is provided, returns only fields associated with that context.\n\nEach field entry contains:\n- data_type: The data type of the field (int, str, etc)\n- field_type: Whether it's an entry, param, or derived_entry\n- mutable: Whether the field can be modified\n- unique: Whether the field enforces uniqueness\n- created_at: When the field was first created\n- artifacts: For derived entries, contains the equation\n- description: The description of the field",
                "operationId": "get_fields_v0_logs_fields_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "project",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Name of the project to get fields and their types for.",
                            "title": "Project"
                        },
                        "description": "Name of the project to get fields and their types for.",
                        "example": "eval-project"
                    },
                    {
                        "name": "context",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Optional context name to filter fields types",
                            "default": "",
                            "title": "Context"
                        },
                        "description": "Optional context name to filter fields types",
                        "example": "training"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "field1": {
                                        "data_type": "string",
                                        "field_type": "entry",
                                        "mutable": "true",
                                        "unique": "false",
                                        "created_at": "2025-02-14T10:00:00Z",
                                        "artifacts": "",
                                        "description": "this field is a dummy field"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project <project> not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Logs"
                ],
                "summary": "Create Fields",
                "description": "Creates one or more fields in a project. Fields are field definitions that can be used\nin logs. This endpoint allows pre-defining fields before adding any log data.\n\nEach field can have an optional description. If a field already exists, its description\nwill be updated.",
                "operationId": "create_fields_v0_logs_fields_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateFieldsRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Fields created successfully",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Fields created successfully."
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project or context not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project 'example_project' not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Logs"
                ],
                "summary": "Delete Fields",
                "description": "Deletes one or more fields from a project. This will:\n1. Delete all Log and DerivedLog entries with the specified field names (not the entire LogEvent)\n2. Delete the field type records for those fields\n\nThis operation cannot be undone, so use with caution.",
                "operationId": "delete_fields_v0_logs_fields_delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeleteFieldsRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Fields deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Fields deleted successfully.",
                                    "deleted_fields": [
                                        "score",
                                        "response"
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project or context not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project 'example_project' not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/interface": {
            "post": {
                "tags": [
                    "Configs",
                    "interface",
                    "interface"
                ],
                "summary": "Create Interface",
                "description": "Create a new interface in a project.",
                "operationId": "create_interface_v0_interface_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "checkpoint",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to create a checkpoint interface (manual save)",
                            "default": false,
                            "title": "Checkpoint"
                        },
                        "description": "Whether to create a checkpoint interface (manual save)"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateInterfaceRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Configs",
                    "interface",
                    "interface"
                ],
                "summary": "Update Interface",
                "description": "Update an interface by ID or by project ID and name.",
                "operationId": "update_interface_v0_interface_put",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "interface_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The ID of the interface to update",
                            "title": "Interface Id"
                        },
                        "description": "The ID of the interface to update"
                    },
                    {
                        "name": "project",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The project ID the interface belongs to",
                            "title": "Project"
                        },
                        "description": "The project ID the interface belongs to"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The name of the interface to update",
                            "title": "Name"
                        },
                        "description": "The name of the interface to update"
                    },
                    {
                        "name": "checkpoint",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "Whether this is a checkpoint update (manual save)",
                            "default": false,
                            "title": "Checkpoint"
                        },
                        "description": "Whether this is a checkpoint update (manual save)"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateInterfaceRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Configs",
                    "interface"
                ],
                "summary": "Get Interfaces",
                "operationId": "get_interfaces_v0_interface_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Name"
                        }
                    },
                    {
                        "name": "project",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project"
                        }
                    },
                    {
                        "name": "temporary",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "title": "Temporary"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Interface retrieved.",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": [
                                    {
                                        "name": "tab1",
                                        "project": "my_project",
                                        "items": [
                                            {
                                                "i": "n0",
                                                "x": 0,
                                                "y": 0,
                                                "w": 3,
                                                "h": 3
                                            },
                                            {
                                                "i": "n1",
                                                "x": 0,
                                                "y": 3,
                                                "w": 2,
                                                "h": 3,
                                                "tab": "Plot_1"
                                            }
                                        ],
                                        "new_counter": 2
                                    }
                                ]
                            }
                        }
                    },
                    "4041": {
                        "description": "Project Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project <project> not found."
                                }
                            }
                        }
                    },
                    "4042": {
                        "description": "Interface Not Found",
                        "content": {
                            "application/json": {
                                "example": "Interface not added yet. Create it first."
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Configs",
                    "interface"
                ],
                "summary": "Delete Interface",
                "operationId": "delete_interface_v0_interface_delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Name"
                        }
                    },
                    {
                        "name": "project",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project"
                        }
                    },
                    {
                        "name": "temporary",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "title": "Temporary"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Interface deleted.",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Interface deleted successfully!"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Interface Not Found",
                        "content": {
                            "application/json": {
                                "example": "Interface not added yet. Create it first."
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/interfaces/": {
            "post": {
                "tags": [
                    "Configs",
                    "interface",
                    "interfaces"
                ],
                "summary": "Create Interface",
                "description": "Create a new interface in a project.",
                "operationId": "create_interface_v0_interfaces__post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "checkpoint",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to create a checkpoint interface (manual save)",
                            "default": false,
                            "title": "Checkpoint"
                        },
                        "description": "Whether to create a checkpoint interface (manual save)"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateInterfaceRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Interface created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InterfaceSchema"
                                },
                                "example": {
                                    "id": "123",
                                    "name": "my_interface",
                                    "project_id": "proj_abc",
                                    "tabs": [],
                                    "color": "blue",
                                    "is_checkpoint": false,
                                    "created_at": "2024-01-01T12:00:00Z",
                                    "updated_at": "2024-01-01T12:00:00Z"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project my_project not found or you don't have access."
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Interface with this name already exists",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Interface with name my_interface already exists in this project."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Configs",
                    "interface",
                    "interfaces"
                ],
                "summary": "Get Interface",
                "description": "Get a specific interface by ID or by project ID and name.",
                "operationId": "get_interface_v0_interfaces__get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "interface_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The ID of the interface to retrieve",
                            "title": "Interface Id"
                        },
                        "description": "The ID of the interface to retrieve"
                    },
                    {
                        "name": "project",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The project ID the interface belongs to",
                            "title": "Project"
                        },
                        "description": "The project ID the interface belongs to"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The name of the interface to retrieve",
                            "title": "Name"
                        },
                        "description": "The name of the interface to retrieve"
                    },
                    {
                        "name": "checkpoint",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to get a checkpoint version (manually saved)",
                            "default": false,
                            "title": "Checkpoint"
                        },
                        "description": "Whether to get a checkpoint version (manually saved)"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Interface details retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InterfaceSchema"
                                },
                                "example": {
                                    "id": "123",
                                    "name": "my_interface",
                                    "project_id": "proj_abc",
                                    "tabs": [],
                                    "color": "blue",
                                    "is_checkpoint": false,
                                    "created_at": "2024-01-01T12:00:00Z",
                                    "updated_at": "2024-01-01T12:00:00Z"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Interface not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Interface with ID 123 not found."
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing required parameters",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Either interface_id or both project and name must be provided."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Configs",
                    "interface",
                    "interfaces"
                ],
                "summary": "Update Interface",
                "description": "Update an interface by ID or by project ID and name.",
                "operationId": "update_interface_v0_interfaces__put",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "interface_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The ID of the interface to update",
                            "title": "Interface Id"
                        },
                        "description": "The ID of the interface to update"
                    },
                    {
                        "name": "project",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The project ID the interface belongs to",
                            "title": "Project"
                        },
                        "description": "The project ID the interface belongs to"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The name of the interface to update",
                            "title": "Name"
                        },
                        "description": "The name of the interface to update"
                    },
                    {
                        "name": "checkpoint",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "Whether this is a checkpoint update (manual save)",
                            "default": false,
                            "title": "Checkpoint"
                        },
                        "description": "Whether this is a checkpoint update (manual save)"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateInterfaceRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Interface updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InterfaceSchema"
                                },
                                "example": {
                                    "id": "123",
                                    "name": "my_interface",
                                    "project_id": "proj_abc",
                                    "tabs": [],
                                    "color": "blue",
                                    "is_checkpoint": false,
                                    "created_at": "2024-01-01T12:00:00Z",
                                    "updated_at": "2024-01-01T12:00:00Z"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Interface not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Interface with ID 123 not found."
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing required parameters",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Either interface_id or both project and name must be provided."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Configs",
                    "interface",
                    "interfaces"
                ],
                "summary": "Delete Interface",
                "description": "Delete an interface by ID or by project ID and name.",
                "operationId": "delete_interface_v0_interfaces__delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "interface_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The ID of the interface to delete",
                            "title": "Interface Id"
                        },
                        "description": "The ID of the interface to delete"
                    },
                    {
                        "name": "project",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The project ID the interface belongs to",
                            "title": "Project"
                        },
                        "description": "The project ID the interface belongs to"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The name of the interface to delete",
                            "title": "Name"
                        },
                        "description": "The name of the interface to delete"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Interface deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Interface deleted successfully"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Interface not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Interface with ID 123 not found."
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing required parameters",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Either interface_id or both project and name must be provided."
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to delete interface",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Failed to delete interface."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/interfaces/list": {
            "get": {
                "tags": [
                    "Configs",
                    "interface",
                    "interfaces"
                ],
                "summary": "List Interfaces",
                "description": "List all interfaces for a project.",
                "operationId": "list_interfaces_v0_interfaces_list_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "project",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The project ID to list interfaces for",
                            "title": "Project"
                        },
                        "description": "The project ID to list interfaces for"
                    },
                    {
                        "name": "checkpoint",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to list checkpoint versions (manually saved)",
                            "default": false,
                            "title": "Checkpoint"
                        },
                        "description": "Whether to list checkpoint versions (manually saved)"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Interfaces list retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/InterfaceSchema"
                                    },
                                    "title": "Response List Interfaces V0 Interfaces List Get"
                                },
                                "example": [
                                    {
                                        "id": "123",
                                        "name": "my_interface",
                                        "project_id": "proj_abc",
                                        "tabs": [],
                                        "color": "blue",
                                        "is_checkpoint": false,
                                        "created_at": "2024-01-01T12:00:00Z",
                                        "updated_at": "2024-01-01T12:00:00Z"
                                    }
                                ]
                            }
                        }
                    },
                    "404": {
                        "description": "Project not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project my_project not found or you don't have access."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/interfaces/checkpoint": {
            "post": {
                "tags": [
                    "Configs",
                    "interface",
                    "interfaces"
                ],
                "summary": "Create Interface Checkpoint",
                "description": "Create a manual checkpoint (save) of an interface by ID or by project ID and name.",
                "operationId": "create_interface_checkpoint_v0_interfaces_checkpoint_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "interface_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The ID of the interface to checkpoint",
                            "title": "Interface Id"
                        },
                        "description": "The ID of the interface to checkpoint"
                    },
                    {
                        "name": "project",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The project ID the interface belongs to",
                            "title": "Project"
                        },
                        "description": "The project ID the interface belongs to"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The name of the interface to checkpoint",
                            "title": "Name"
                        },
                        "description": "The name of the interface to checkpoint"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Interface checkpoint created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InterfaceSchema"
                                },
                                "example": {
                                    "id": "123",
                                    "name": "my_interface",
                                    "project_id": "proj_abc",
                                    "tabs": [],
                                    "color": "blue",
                                    "is_checkpoint": true,
                                    "created_at": "2024-01-01T12:00:00Z",
                                    "updated_at": "2024-01-01T12:00:00Z"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Interface not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Interface with ID 123 not found."
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing required parameters",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Either interface_id or both project and name must be provided."
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to create checkpoint",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Failed to create or update checkpoint interface."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Configs",
                    "interface",
                    "interfaces"
                ],
                "summary": "Get Interface Checkpoint",
                "description": "Get the latest checkpoint (manual save) for an interface by ID or by project ID and name.",
                "operationId": "get_interface_checkpoint_v0_interfaces_checkpoint_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "interface_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The ID of the interface to get checkpoint for",
                            "title": "Interface Id"
                        },
                        "description": "The ID of the interface to get checkpoint for"
                    },
                    {
                        "name": "project",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The project ID the interface belongs to",
                            "title": "Project"
                        },
                        "description": "The project ID the interface belongs to"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The name of the interface to get checkpoint for",
                            "title": "Name"
                        },
                        "description": "The name of the interface to get checkpoint for"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Interface checkpoint retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InterfaceSchema"
                                },
                                "example": {
                                    "id": "123",
                                    "name": "my_interface",
                                    "project_id": "proj_abc",
                                    "tabs": [],
                                    "color": "blue",
                                    "is_checkpoint": true,
                                    "created_at": "2024-01-01T12:00:00Z",
                                    "updated_at": "2024-01-01T12:00:00Z"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Interface or checkpoint not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "No checkpoint found for the specified interface."
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing required parameters",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Either interface_id or both project and name must be provided."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/interfaces/export_template": {
            "post": {
                "tags": [
                    "Configs",
                    "interface",
                    "interfaces"
                ],
                "summary": "Export Interface Template",
                "description": "Export an interface as a reusable template.",
                "operationId": "export_interface_template_v0_interfaces_export_template_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExportInterfaceTemplateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Interface template exported successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateExportResponse"
                                },
                                "example": {
                                    "template": {
                                        "name": "Analytics Dashboard",
                                        "tabs": [
                                            {
                                                "name": "Overview",
                                                "tiles": [
                                                    {
                                                        "name": "Data Table",
                                                        "type": "Table",
                                                        "position": {
                                                            "x": 0,
                                                            "y": 0,
                                                            "width": 6,
                                                            "height": 4
                                                        }
                                                    }
                                                ]
                                            }
                                        ],
                                        "template_version": "1.0"
                                    },
                                    "metadata": {
                                        "exported_at": "2024-01-01T12:00:00Z"
                                    },
                                    "export_stats": {
                                        "tabs": 1,
                                        "tiles": 1
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/interfaces/import_template": {
            "post": {
                "tags": [
                    "Configs",
                    "interface",
                    "interfaces"
                ],
                "summary": "Import Interface Template",
                "description": "Import an interface template into a project.",
                "operationId": "import_interface_template_v0_interfaces_import_template_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ImportInterfaceTemplateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Interface template imported successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateImportResponse"
                                },
                                "example": {
                                    "success": true,
                                    "import_stats": {
                                        "interfaces": 1,
                                        "tabs": 2,
                                        "tiles": 5
                                    },
                                    "created_ids": {
                                        "interface_id": "abc123"
                                    },
                                    "warnings": []
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/tab/": {
            "post": {
                "tags": [
                    "Configs",
                    "interface",
                    "tab"
                ],
                "summary": "Create Tab",
                "description": "Create a new tab.",
                "operationId": "create_tab_v0_tab__post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "checkpoint",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to create a checkpoint tab (manual save)",
                            "default": false,
                            "title": "Checkpoint"
                        },
                        "description": "Whether to create a checkpoint tab (manual save)"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTabRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Tab created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TabSchema"
                                },
                                "example": {
                                    "id": "123",
                                    "interface_id": "456",
                                    "name": "my_tab",
                                    "visible": true,
                                    "active": true,
                                    "order": 1,
                                    "global_context": {},
                                    "color": "blue",
                                    "is_checkpoint": false,
                                    "tiles": [],
                                    "created_at": "2024-01-01T12:00:00Z",
                                    "updated_at": "2024-01-01T12:00:00Z"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Interface not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Interface not found. Please provide valid interface_id or project_id+interface_name."
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Tab with this name already exists for this interface",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Tab with name my_tab already exists for this interface."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Configs",
                    "interface",
                    "tab"
                ],
                "summary": "Get Tab",
                "description": "Get a specific tab by ID or by interface_id and name.",
                "operationId": "get_tab_v0_tab__get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "tab_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The ID of the tab to retrieve",
                            "title": "Tab Id"
                        },
                        "description": "The ID of the tab to retrieve"
                    },
                    {
                        "name": "interface_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The interface ID the tab belongs to",
                            "title": "Interface Id"
                        },
                        "description": "The interface ID the tab belongs to"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The name of the tab to retrieve",
                            "title": "Name"
                        },
                        "description": "The name of the tab to retrieve"
                    },
                    {
                        "name": "checkpoint",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to get a checkpoint tab (manual save)",
                            "default": false,
                            "title": "Checkpoint"
                        },
                        "description": "Whether to get a checkpoint tab (manual save)"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tab details retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TabSchema"
                                },
                                "example": {
                                    "id": "123",
                                    "interface_id": "456",
                                    "name": "my_tab",
                                    "visible": true,
                                    "active": true,
                                    "order": 1,
                                    "global_context": {},
                                    "color": "blue",
                                    "is_checkpoint": false,
                                    "tiles": [
                                        {
                                            "id": "789",
                                            "tab_id": "123",
                                            "name": "my_tile",
                                            "type": "chart",
                                            "config": {},
                                            "is_checkpoint": false,
                                            "created_at": "2024-01-01T12:00:00Z",
                                            "updated_at": "2024-01-01T12:00:00Z"
                                        }
                                    ],
                                    "created_at": "2024-01-01T12:00:00Z",
                                    "updated_at": "2024-01-01T12:00:00Z"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tab not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Tab with ID 123 not found."
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing required parameters",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Either tab_id or both interface_id and name must be provided."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Configs",
                    "interface",
                    "tab"
                ],
                "summary": "Update Tab",
                "description": "Update a tab by ID or by interface_id and name.",
                "operationId": "update_tab_v0_tab__put",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "tab_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The ID of the tab to update",
                            "title": "Tab Id"
                        },
                        "description": "The ID of the tab to update"
                    },
                    {
                        "name": "interface_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The interface ID the tab belongs to",
                            "title": "Interface Id"
                        },
                        "description": "The interface ID the tab belongs to"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The name of the tab to update",
                            "title": "Name"
                        },
                        "description": "The name of the tab to update"
                    },
                    {
                        "name": "checkpoint",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "Whether this is a checkpoint update (manual save)",
                            "default": false,
                            "title": "Checkpoint"
                        },
                        "description": "Whether this is a checkpoint update (manual save)"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateTabRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Tab updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TabSchema"
                                },
                                "example": {
                                    "id": "123",
                                    "interface_id": "456",
                                    "name": "updated_tab_name",
                                    "visible": true,
                                    "active": true,
                                    "order": 1,
                                    "global_context": {},
                                    "color": "red",
                                    "is_checkpoint": false,
                                    "tiles": [],
                                    "created_at": "2024-01-01T12:00:00Z",
                                    "updated_at": "2024-01-01T12:30:00Z"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tab not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Tab with ID 123 not found."
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing required parameters",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Either tab_id or both interface_id and name must be provided."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Configs",
                    "interface",
                    "tab"
                ],
                "summary": "Delete Tab",
                "description": "Delete a tab by ID or by interface_id and name.",
                "operationId": "delete_tab_v0_tab__delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "tab_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The ID of the tab to delete",
                            "title": "Tab Id"
                        },
                        "description": "The ID of the tab to delete"
                    },
                    {
                        "name": "interface_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The interface ID the tab belongs to",
                            "title": "Interface Id"
                        },
                        "description": "The interface ID the tab belongs to"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The name of the tab to delete",
                            "title": "Name"
                        },
                        "description": "The name of the tab to delete"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tab deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Tab deleted successfully"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tab not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Tab with ID 123 not found."
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing required parameters",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Either tab_id or both interface_id and name must be provided."
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to delete tab",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Failed to delete tab."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/tab/list": {
            "get": {
                "tags": [
                    "Configs",
                    "interface",
                    "tab"
                ],
                "summary": "List Tabs",
                "description": "List all tabs for an interface.",
                "operationId": "list_tabs_v0_tab_list_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "interface_id",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The interface ID to list tabs for",
                            "title": "Interface Id"
                        },
                        "description": "The interface ID to list tabs for"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Filter tabs by name",
                            "title": "Name"
                        },
                        "description": "Filter tabs by name"
                    },
                    {
                        "name": "checkpoint",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to list checkpoint tabs (manual save)",
                            "default": false,
                            "title": "Checkpoint"
                        },
                        "description": "Whether to list checkpoint tabs (manual save)"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tabs list retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TabSchema"
                                    },
                                    "title": "Response List Tabs V0 Tab List Get"
                                },
                                "example": [
                                    {
                                        "id": "123",
                                        "interface_id": "456",
                                        "name": "my_tab_1",
                                        "visible": true,
                                        "active": true,
                                        "order": 1,
                                        "global_context": {},
                                        "color": "blue",
                                        "is_checkpoint": false,
                                        "tiles": [],
                                        "created_at": "2024-01-01T12:00:00Z",
                                        "updated_at": "2024-01-01T12:00:00Z"
                                    },
                                    {
                                        "id": "124",
                                        "interface_id": "456",
                                        "name": "my_tab_2",
                                        "visible": true,
                                        "active": false,
                                        "order": 2,
                                        "global_context": {},
                                        "color": "green",
                                        "is_checkpoint": false,
                                        "tiles": [],
                                        "created_at": "2024-01-01T12:00:00Z",
                                        "updated_at": "2024-01-01T12:00:00Z"
                                    }
                                ]
                            }
                        }
                    },
                    "404": {
                        "description": "Interface not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Interface with ID 456 not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/tab/checkpoint": {
            "post": {
                "tags": [
                    "Configs",
                    "interface",
                    "tab"
                ],
                "summary": "Create Tab Checkpoint",
                "description": "Create a manual checkpoint (save) of a tab and all its tiles.",
                "operationId": "create_tab_checkpoint_v0_tab_checkpoint_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "tab_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The ID of the tab to checkpoint",
                            "title": "Tab Id"
                        },
                        "description": "The ID of the tab to checkpoint"
                    },
                    {
                        "name": "interface_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The interface ID the tab belongs to",
                            "title": "Interface Id"
                        },
                        "description": "The interface ID the tab belongs to"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The name of the tab to checkpoint",
                            "title": "Name"
                        },
                        "description": "The name of the tab to checkpoint"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tab checkpoint created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TabSchema"
                                },
                                "example": {
                                    "id": "789",
                                    "interface_id": "456",
                                    "name": "my_tab",
                                    "visible": true,
                                    "active": true,
                                    "order": 1,
                                    "global_context": {},
                                    "color": "blue",
                                    "is_checkpoint": true,
                                    "tiles": [],
                                    "created_at": "2024-01-01T12:00:00Z",
                                    "updated_at": "2024-01-01T12:30:00Z"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tab not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Tab with ID 123 not found."
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing required parameters",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Either tab_id or both interface_id and name must be provided."
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to create checkpoint",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Failed to create tab checkpoint."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Configs",
                    "interface",
                    "tab"
                ],
                "summary": "Get Tab Checkpoint",
                "description": "Get the checkpoint (manual save) for a tab by ID or by interface_id and name.",
                "operationId": "get_tab_checkpoint_v0_tab_checkpoint_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "tab_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The ID of the tab to get checkpoint for",
                            "title": "Tab Id"
                        },
                        "description": "The ID of the tab to get checkpoint for"
                    },
                    {
                        "name": "interface_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The interface ID the tab belongs to",
                            "title": "Interface Id"
                        },
                        "description": "The interface ID the tab belongs to"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The name of the tab to get checkpoint for",
                            "title": "Name"
                        },
                        "description": "The name of the tab to get checkpoint for"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tab checkpoint retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TabSchema"
                                },
                                "example": {
                                    "id": "789",
                                    "interface_id": "456",
                                    "name": "my_tab",
                                    "visible": true,
                                    "active": true,
                                    "order": 1,
                                    "global_context": {},
                                    "color": "blue",
                                    "is_checkpoint": true,
                                    "tiles": [],
                                    "created_at": "2024-01-01T12:00:00Z",
                                    "updated_at": "2024-01-01T12:30:00Z"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tab or checkpoint not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "No checkpoint found for the specified tab."
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing required parameters",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Either tab_id or both interface_id and name must be provided."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/tab/export_template": {
            "post": {
                "tags": [
                    "Configs",
                    "interface",
                    "tab"
                ],
                "summary": "Export Tab Template",
                "description": "Export a tab as a reusable template.",
                "operationId": "export_tab_template_v0_tab_export_template_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExportTabTemplateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Tab template exported successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateExportResponse"
                                },
                                "example": {
                                    "template": {
                                        "name": "Overview Tab",
                                        "tiles": [
                                            {
                                                "name": "Data Table",
                                                "type": "Table",
                                                "position": {
                                                    "x": 0,
                                                    "y": 0,
                                                    "width": 6,
                                                    "height": 4
                                                }
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "exported_at": "2024-01-01T12:00:00Z"
                                    },
                                    "export_stats": {
                                        "tabs": 1,
                                        "tiles": 1
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/tab/import_template": {
            "post": {
                "tags": [
                    "Configs",
                    "interface",
                    "tab"
                ],
                "summary": "Import Tab Template",
                "description": "Import a tab template into an interface.",
                "operationId": "import_tab_template_v0_tab_import_template_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ImportTabTemplateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Tab template imported successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateImportResponse"
                                },
                                "example": {
                                    "success": true,
                                    "import_stats": {
                                        "tabs": 1,
                                        "tiles": 3
                                    },
                                    "created_ids": {
                                        "tab_id": "def456"
                                    },
                                    "warnings": []
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/tile/": {
            "post": {
                "tags": [
                    "Configs",
                    "interface",
                    "tile"
                ],
                "summary": "Create Tile",
                "description": "Create a new tile in a tab.",
                "operationId": "create_tile_v0_tile__post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "checkpoint",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to create a checkpoint tile (manual save)",
                            "default": false,
                            "title": "Checkpoint"
                        },
                        "description": "Whether to create a checkpoint tile (manual save)"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTileRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Tile created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TileSchema"
                                },
                                "example": {
                                    "id": "123",
                                    "tab_id": "tab_456",
                                    "name": "Data Table",
                                    "type": "Table",
                                    "position": {
                                        "x": 0,
                                        "y": 0,
                                        "width": 6,
                                        "height": 4
                                    },
                                    "minW": 2,
                                    "minH": 2,
                                    "visible": true,
                                    "locked": false,
                                    "moved": false,
                                    "static": false,
                                    "table": "main_data",
                                    "auto_update": true,
                                    "freeze": false,
                                    "is_checkpoint": false,
                                    "table_tile": {
                                        "id": "table_123",
                                        "tile_id": "123",
                                        "table_type": "Data Table",
                                        "page_number": 1,
                                        "column_order": [
                                            "id",
                                            "name",
                                            "value"
                                        ],
                                        "hidden_columns": [],
                                        "default_hidden_columns": true,
                                        "columns_pin_left": [],
                                        "columns_pin_right": []
                                    },
                                    "created_at": "2024-01-01T12:00:00Z",
                                    "updated_at": "2024-01-01T12:00:00Z"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tab not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Tab not found. Please provide valid tab_id or project_id+interface_name+tab_name."
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Tile with this name already exists for this tab",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Tile with name Data Table already exists in this tab."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Configs",
                    "interface",
                    "tile"
                ],
                "summary": "Get Tile",
                "operationId": "get_tile_v0_tile__get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "tile_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The ID of the tile to retrieve",
                            "title": "Tile Id"
                        },
                        "description": "The ID of the tile to retrieve"
                    },
                    {
                        "name": "tab_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The tab ID the tile belongs to",
                            "title": "Tab Id"
                        },
                        "description": "The tab ID the tile belongs to"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The name of the tile to retrieve",
                            "title": "Name"
                        },
                        "description": "The name of the tile to retrieve"
                    },
                    {
                        "name": "checkpoint",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to get a checkpoint tile (manual save)",
                            "default": false,
                            "title": "Checkpoint"
                        },
                        "description": "Whether to get a checkpoint tile (manual save)"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tile details retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TileSchema"
                                },
                                "example": {
                                    "id": "123",
                                    "tab_id": "tab_456",
                                    "name": "Data Table",
                                    "type": "Table",
                                    "position": {
                                        "x": 0,
                                        "y": 0,
                                        "width": 6,
                                        "height": 4
                                    },
                                    "minW": 2,
                                    "minH": 2,
                                    "visible": true,
                                    "locked": false,
                                    "moved": false,
                                    "static": false,
                                    "table": "main_data",
                                    "auto_update": true,
                                    "freeze": false,
                                    "is_checkpoint": false,
                                    "table_tile": {
                                        "id": "table_123",
                                        "tile_id": "123",
                                        "table_type": "Data Table",
                                        "page_number": 1,
                                        "column_order": [
                                            "id",
                                            "name",
                                            "value"
                                        ],
                                        "hidden_columns": [],
                                        "default_hidden_columns": true,
                                        "columns_pin_left": [],
                                        "columns_pin_right": []
                                    },
                                    "created_at": "2024-01-01T12:00:00Z",
                                    "updated_at": "2024-01-01T12:00:00Z"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tile not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Tile with ID 123 not found."
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing required parameters",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Either tile_id or both tab_id and name must be provided."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Configs",
                    "interface",
                    "tile"
                ],
                "summary": "Update Tile",
                "operationId": "update_tile_v0_tile__put",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "tile_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The ID of the tile to update",
                            "title": "Tile Id"
                        },
                        "description": "The ID of the tile to update"
                    },
                    {
                        "name": "tab_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The tab ID the tile belongs to",
                            "title": "Tab Id"
                        },
                        "description": "The tab ID the tile belongs to"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The name of the tile to update",
                            "title": "Name"
                        },
                        "description": "The name of the tile to update"
                    },
                    {
                        "name": "checkpoint",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "Whether this is a checkpoint update (manual save)",
                            "default": false,
                            "title": "Checkpoint"
                        },
                        "description": "Whether this is a checkpoint update (manual save)"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateTileRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Tile updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TileSchema"
                                },
                                "example": {
                                    "id": "123",
                                    "tab_id": "tab_456",
                                    "name": "Updated Data Table",
                                    "type": "Table",
                                    "position": {
                                        "x": 1,
                                        "y": 1,
                                        "width": 8,
                                        "height": 5
                                    },
                                    "minW": 2,
                                    "minH": 2,
                                    "visible": true,
                                    "locked": false,
                                    "moved": true,
                                    "static": false,
                                    "table": "main_data",
                                    "auto_update": true,
                                    "freeze": false,
                                    "is_checkpoint": false,
                                    "table_tile": {
                                        "id": "table_123",
                                        "tile_id": "123",
                                        "table_type": "Data Table",
                                        "page_number": 1,
                                        "column_order": [
                                            "id",
                                            "name",
                                            "value"
                                        ],
                                        "hidden_columns": [],
                                        "default_hidden_columns": true,
                                        "columns_pin_left": [],
                                        "columns_pin_right": []
                                    },
                                    "created_at": "2024-01-01T12:00:00Z",
                                    "updated_at": "2024-01-01T12:30:00Z"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tile not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Tile with ID 123 not found."
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing required parameters",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Either tile_id or both tab_id and name must be provided."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Configs",
                    "interface",
                    "tile"
                ],
                "summary": "Delete Tile",
                "operationId": "delete_tile_v0_tile__delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "tile_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The ID of the tile to delete",
                            "title": "Tile Id"
                        },
                        "description": "The ID of the tile to delete"
                    },
                    {
                        "name": "tab_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The tab ID the tile belongs to",
                            "title": "Tab Id"
                        },
                        "description": "The tab ID the tile belongs to"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The name of the tile to delete",
                            "title": "Name"
                        },
                        "description": "The name of the tile to delete"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tile deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Tile deleted successfully"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tile not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Tile with ID 123 not found."
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing required parameters",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Either tile_id or both tab_id and name must be provided."
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to delete tile",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Failed to delete tile."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Configs",
                    "interface",
                    "tile"
                ],
                "summary": "Patch Tile",
                "operationId": "patch_tile_v0_tile__patch",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "tile_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The ID of the tile to patch",
                            "title": "Tile Id"
                        },
                        "description": "The ID of the tile to patch"
                    },
                    {
                        "name": "tab_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The tab ID the tile belongs to",
                            "title": "Tab Id"
                        },
                        "description": "The tab ID the tile belongs to"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The name of the tile to patch",
                            "title": "Name"
                        },
                        "description": "The name of the tile to patch"
                    },
                    {
                        "name": "checkpoint",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "Whether this is a checkpoint update (manual save)",
                            "default": false,
                            "title": "Checkpoint"
                        },
                        "description": "Whether this is a checkpoint update (manual save)"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Update Data"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Tile patched successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TileSchema"
                                },
                                "example": {
                                    "id": "123",
                                    "tab_id": "tab_456",
                                    "name": "Data Table",
                                    "type": "Table",
                                    "position": {
                                        "x": 2,
                                        "y": 2,
                                        "width": 6,
                                        "height": 4
                                    },
                                    "minW": 2,
                                    "minH": 2,
                                    "visible": true,
                                    "locked": false,
                                    "moved": true,
                                    "static": false,
                                    "table": "main_data",
                                    "auto_update": true,
                                    "freeze": false,
                                    "is_checkpoint": false,
                                    "table_tile": {
                                        "id": "table_123",
                                        "tile_id": "123",
                                        "table_type": "Data Table",
                                        "page_number": 1,
                                        "column_order": [
                                            "id",
                                            "name",
                                            "value"
                                        ],
                                        "hidden_columns": [],
                                        "default_hidden_columns": true,
                                        "columns_pin_left": [],
                                        "columns_pin_right": []
                                    },
                                    "created_at": "2024-01-01T12:00:00Z",
                                    "updated_at": "2024-01-01T12:45:00Z"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tile not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Tile with ID 123 not found."
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing required parameters",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Either tile_id or both tab_id and name must be provided."
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to patch tile",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Failed to patch tile."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/tile/list": {
            "get": {
                "tags": [
                    "Configs",
                    "interface",
                    "tile"
                ],
                "summary": "List Tiles",
                "operationId": "list_tiles_v0_tile_list_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "tab_id",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The tab ID to list tiles for",
                            "title": "Tab Id"
                        },
                        "description": "The tab ID to list tiles for"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Filter tiles by name",
                            "title": "Name"
                        },
                        "description": "Filter tiles by name"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Filter tiles by type",
                            "title": "Type"
                        },
                        "description": "Filter tiles by type"
                    },
                    {
                        "name": "checkpoint",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to list checkpoint tiles (manual save)",
                            "default": false,
                            "title": "Checkpoint"
                        },
                        "description": "Whether to list checkpoint tiles (manual save)"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tiles list retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TileSchema"
                                    },
                                    "title": "Response List Tiles V0 Tile List Get"
                                },
                                "example": [
                                    {
                                        "id": "123",
                                        "tab_id": "tab_456",
                                        "name": "Data Table",
                                        "type": "Table",
                                        "position": {
                                            "x": 0,
                                            "y": 0,
                                            "width": 6,
                                            "height": 4
                                        },
                                        "minW": 2,
                                        "minH": 2,
                                        "visible": true,
                                        "locked": false,
                                        "moved": false,
                                        "static": false,
                                        "table": "main_data",
                                        "auto_update": true,
                                        "freeze": false,
                                        "is_checkpoint": false,
                                        "table_tile": {
                                            "id": "table_123",
                                            "tile_id": "123",
                                            "table_type": "Data Table",
                                            "page_number": 1,
                                            "column_order": [
                                                "id",
                                                "name",
                                                "value"
                                            ],
                                            "hidden_columns": [],
                                            "default_hidden_columns": true,
                                            "columns_pin_left": [],
                                            "columns_pin_right": []
                                        },
                                        "created_at": "2024-01-01T12:00:00Z",
                                        "updated_at": "2024-01-01T12:00:00Z"
                                    },
                                    {
                                        "id": "124",
                                        "tab_id": "tab_456",
                                        "name": "Chart",
                                        "type": "Plot",
                                        "position": {
                                            "x": 6,
                                            "y": 0,
                                            "width": 6,
                                            "height": 4
                                        },
                                        "minW": 2,
                                        "minH": 2,
                                        "visible": true,
                                        "locked": false,
                                        "moved": false,
                                        "static": false,
                                        "table": "main_data",
                                        "auto_update": true,
                                        "freeze": false,
                                        "is_checkpoint": false,
                                        "plot_tile": {
                                            "id": "plot_124",
                                            "tile_id": "124",
                                            "plot_type": "scatter",
                                            "plot_scale_x": "linear",
                                            "plot_scale_y": "linear",
                                            "x_axis": "x",
                                            "y_axis": "y",
                                            "bin_count": 10,
                                            "regression_line": false
                                        },
                                        "created_at": "2024-01-01T12:00:00Z",
                                        "updated_at": "2024-01-01T12:00:00Z"
                                    }
                                ]
                            }
                        }
                    },
                    "404": {
                        "description": "Tab not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Tab with ID tab_456 not found."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/tile/checkpoint": {
            "post": {
                "tags": [
                    "Configs",
                    "interface",
                    "tile"
                ],
                "summary": "Create Tile Checkpoint",
                "operationId": "create_tile_checkpoint_v0_tile_checkpoint_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "tile_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The ID of the tile to checkpoint",
                            "title": "Tile Id"
                        },
                        "description": "The ID of the tile to checkpoint"
                    },
                    {
                        "name": "tab_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The tab ID the tile belongs to",
                            "title": "Tab Id"
                        },
                        "description": "The tab ID the tile belongs to"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The name of the tile to checkpoint",
                            "title": "Name"
                        },
                        "description": "The name of the tile to checkpoint"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tile checkpoint created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TileSchema"
                                },
                                "example": {
                                    "id": "checkpoint_123",
                                    "tab_id": "checkpoint_tab_456",
                                    "name": "Data Table",
                                    "type": "Table",
                                    "position": {
                                        "x": 0,
                                        "y": 0,
                                        "width": 6,
                                        "height": 4
                                    },
                                    "minW": 2,
                                    "minH": 2,
                                    "visible": true,
                                    "locked": false,
                                    "moved": false,
                                    "static": false,
                                    "table": "main_data",
                                    "auto_update": true,
                                    "freeze": false,
                                    "is_checkpoint": true,
                                    "table_tile": {
                                        "id": "checkpoint_table_123",
                                        "tile_id": "checkpoint_123",
                                        "table_type": "Data Table",
                                        "page_number": 1,
                                        "column_order": [
                                            "id",
                                            "name",
                                            "value"
                                        ],
                                        "hidden_columns": [],
                                        "default_hidden_columns": true,
                                        "columns_pin_left": [],
                                        "columns_pin_right": []
                                    },
                                    "created_at": "2024-01-01T12:00:00Z",
                                    "updated_at": "2024-01-01T12:30:00Z"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tile not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Tile with ID 123 not found."
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing required parameters",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Either tile_id or both tab_id and name must be provided."
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to create checkpoint",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Failed to create tile checkpoint."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Configs",
                    "interface",
                    "tile"
                ],
                "summary": "Get Tile Checkpoint",
                "operationId": "get_tile_checkpoint_v0_tile_checkpoint_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "tile_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The ID of the tile to get checkpoint for",
                            "title": "Tile Id"
                        },
                        "description": "The ID of the tile to get checkpoint for"
                    },
                    {
                        "name": "tab_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The tab ID the tile belongs to",
                            "title": "Tab Id"
                        },
                        "description": "The tab ID the tile belongs to"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The name of the tile to get checkpoint for",
                            "title": "Name"
                        },
                        "description": "The name of the tile to get checkpoint for"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tile checkpoint retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TileSchema"
                                },
                                "example": {
                                    "id": "checkpoint_123",
                                    "tab_id": "checkpoint_tab_456",
                                    "name": "Data Table",
                                    "type": "Table",
                                    "position": {
                                        "x": 0,
                                        "y": 0,
                                        "width": 6,
                                        "height": 4
                                    },
                                    "minW": 2,
                                    "minH": 2,
                                    "visible": true,
                                    "locked": false,
                                    "moved": false,
                                    "static": false,
                                    "table": "main_data",
                                    "auto_update": true,
                                    "freeze": false,
                                    "is_checkpoint": true,
                                    "table_tile": {
                                        "id": "checkpoint_table_123",
                                        "tile_id": "checkpoint_123",
                                        "table_type": "Data Table",
                                        "page_number": 1,
                                        "column_order": [
                                            "id",
                                            "name",
                                            "value"
                                        ],
                                        "hidden_columns": [],
                                        "default_hidden_columns": true,
                                        "columns_pin_left": [],
                                        "columns_pin_right": []
                                    },
                                    "created_at": "2024-01-01T12:00:00Z",
                                    "updated_at": "2024-01-01T12:30:00Z"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tile or checkpoint not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "No checkpoint found for the specified tile."
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing required parameters",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Either tile_id or both tab_id and name must be provided."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/tile/specialized": {
            "patch": {
                "tags": [
                    "Configs",
                    "interface",
                    "tile"
                ],
                "summary": "Patch Specialized Tile",
                "description": "Update the specialized data for a specific tile type.",
                "operationId": "patch_specialized_tile_v0_tile_specialized_patch",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "tile_type",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Type of tile to patch (Table, Plot, View, Editor, Terminal)",
                            "title": "Tile Type"
                        },
                        "description": "Type of tile to patch (Table, Plot, View, Editor, Terminal)"
                    },
                    {
                        "name": "tile_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Tile Id"
                        }
                    },
                    {
                        "name": "tab_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Tab Id"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Name"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Update Data"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Specialized tile patched successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TileSchema"
                                },
                                "example": {
                                    "id": "123",
                                    "tab_id": "tab_456",
                                    "name": "Data Table",
                                    "type": "Table",
                                    "position": {
                                        "x": 0,
                                        "y": 0,
                                        "width": 6,
                                        "height": 4
                                    },
                                    "minW": 2,
                                    "minH": 2,
                                    "visible": true,
                                    "locked": false,
                                    "moved": false,
                                    "static": false,
                                    "table": "main_data",
                                    "auto_update": true,
                                    "freeze": false,
                                    "is_checkpoint": false,
                                    "table_tile": {
                                        "id": "table_123",
                                        "tile_id": "123",
                                        "table_type": "Data Table",
                                        "page_number": 2,
                                        "column_order": [
                                            "id",
                                            "name",
                                            "value",
                                            "new_column"
                                        ],
                                        "hidden_columns": [
                                            "id"
                                        ],
                                        "default_hidden_columns": true,
                                        "sorting": {
                                            "column": "name",
                                            "direction": "asc"
                                        },
                                        "columns_pin_left": [
                                            "name"
                                        ],
                                        "columns_pin_right": []
                                    },
                                    "created_at": "2024-01-01T12:00:00Z",
                                    "updated_at": "2024-01-01T13:00:00Z"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tile not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Table tile not found"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid tile type or missing parameters",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Invalid tile_type. Must be one of Table, Plot, View, Editor, Terminal"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/tile/export_template": {
            "post": {
                "tags": [
                    "Configs",
                    "interface",
                    "tile"
                ],
                "summary": "Export Tile Template",
                "description": "Export a tile as a reusable template.",
                "operationId": "export_tile_template_v0_tile_export_template_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExportTileTemplateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Tile template exported successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateExportResponse"
                                },
                                "example": {
                                    "template": {
                                        "name": "Data Table",
                                        "type": "Table",
                                        "position": {
                                            "x": 0,
                                            "y": 0,
                                            "width": 6,
                                            "height": 4
                                        },
                                        "table_tile": {
                                            "table_type": "Data Table",
                                            "column_order": [
                                                "id",
                                                "name",
                                                "value"
                                            ]
                                        }
                                    },
                                    "metadata": {
                                        "exported_at": "2024-01-01T12:00:00Z"
                                    },
                                    "export_stats": {
                                        "tiles": 1
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/tile/import_template": {
            "post": {
                "tags": [
                    "Configs",
                    "interface",
                    "tile"
                ],
                "summary": "Import Tile Template",
                "description": "Import a tile template into a tab.",
                "operationId": "import_tile_template_v0_tile_import_template_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ImportTileTemplateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Tile template imported successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateImportResponse"
                                },
                                "example": {
                                    "success": true,
                                    "import_stats": {
                                        "tiles": 1
                                    },
                                    "created_ids": {
                                        "tile_id": "ghi789"
                                    },
                                    "warnings": []
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/interface/interfaces/": {
            "post": {
                "tags": [
                    "Configs",
                    "interface",
                    "interfaces"
                ],
                "summary": "Create Interface",
                "description": "Create a new interface in a project.",
                "operationId": "create_interface_v0_interface_interfaces__post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "checkpoint",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to create a checkpoint interface (manual save)",
                            "default": false,
                            "title": "Checkpoint"
                        },
                        "description": "Whether to create a checkpoint interface (manual save)"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateInterfaceRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Interface created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InterfaceSchema"
                                },
                                "example": {
                                    "id": "123",
                                    "name": "my_interface",
                                    "project_id": "proj_abc",
                                    "tabs": [],
                                    "color": "blue",
                                    "is_checkpoint": false,
                                    "created_at": "2024-01-01T12:00:00Z",
                                    "updated_at": "2024-01-01T12:00:00Z"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Project not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project my_project not found or you don't have access."
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Interface with this name already exists",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Interface with name my_interface already exists in this project."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Configs",
                    "interface",
                    "interfaces"
                ],
                "summary": "Get Interface",
                "description": "Get a specific interface by ID or by project ID and name.",
                "operationId": "get_interface_v0_interface_interfaces__get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "interface_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The ID of the interface to retrieve",
                            "title": "Interface Id"
                        },
                        "description": "The ID of the interface to retrieve"
                    },
                    {
                        "name": "project",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The project ID the interface belongs to",
                            "title": "Project"
                        },
                        "description": "The project ID the interface belongs to"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The name of the interface to retrieve",
                            "title": "Name"
                        },
                        "description": "The name of the interface to retrieve"
                    },
                    {
                        "name": "checkpoint",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to get a checkpoint version (manually saved)",
                            "default": false,
                            "title": "Checkpoint"
                        },
                        "description": "Whether to get a checkpoint version (manually saved)"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Interface details retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InterfaceSchema"
                                },
                                "example": {
                                    "id": "123",
                                    "name": "my_interface",
                                    "project_id": "proj_abc",
                                    "tabs": [],
                                    "color": "blue",
                                    "is_checkpoint": false,
                                    "created_at": "2024-01-01T12:00:00Z",
                                    "updated_at": "2024-01-01T12:00:00Z"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Interface not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Interface with ID 123 not found."
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing required parameters",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Either interface_id or both project and name must be provided."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Configs",
                    "interface",
                    "interfaces"
                ],
                "summary": "Update Interface",
                "description": "Update an interface by ID or by project ID and name.",
                "operationId": "update_interface_v0_interface_interfaces__put",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "interface_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The ID of the interface to update",
                            "title": "Interface Id"
                        },
                        "description": "The ID of the interface to update"
                    },
                    {
                        "name": "project",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The project ID the interface belongs to",
                            "title": "Project"
                        },
                        "description": "The project ID the interface belongs to"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The name of the interface to update",
                            "title": "Name"
                        },
                        "description": "The name of the interface to update"
                    },
                    {
                        "name": "checkpoint",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "Whether this is a checkpoint update (manual save)",
                            "default": false,
                            "title": "Checkpoint"
                        },
                        "description": "Whether this is a checkpoint update (manual save)"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateInterfaceRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Interface updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InterfaceSchema"
                                },
                                "example": {
                                    "id": "123",
                                    "name": "my_interface",
                                    "project_id": "proj_abc",
                                    "tabs": [],
                                    "color": "blue",
                                    "is_checkpoint": false,
                                    "created_at": "2024-01-01T12:00:00Z",
                                    "updated_at": "2024-01-01T12:00:00Z"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Interface not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Interface with ID 123 not found."
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing required parameters",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Either interface_id or both project and name must be provided."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Configs",
                    "interface",
                    "interfaces"
                ],
                "summary": "Delete Interface",
                "description": "Delete an interface by ID or by project ID and name.",
                "operationId": "delete_interface_v0_interface_interfaces__delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "interface_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The ID of the interface to delete",
                            "title": "Interface Id"
                        },
                        "description": "The ID of the interface to delete"
                    },
                    {
                        "name": "project",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The project ID the interface belongs to",
                            "title": "Project"
                        },
                        "description": "The project ID the interface belongs to"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The name of the interface to delete",
                            "title": "Name"
                        },
                        "description": "The name of the interface to delete"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Interface deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "info": "Interface deleted successfully"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Interface not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Interface with ID 123 not found."
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing required parameters",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Either interface_id or both project and name must be provided."
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to delete interface",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Failed to delete interface."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/interface/interfaces/list": {
            "get": {
                "tags": [
                    "Configs",
                    "interface",
                    "interfaces"
                ],
                "summary": "List Interfaces",
                "description": "List all interfaces for a project.",
                "operationId": "list_interfaces_v0_interface_interfaces_list_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "project",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The project ID to list interfaces for",
                            "title": "Project"
                        },
                        "description": "The project ID to list interfaces for"
                    },
                    {
                        "name": "checkpoint",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to list checkpoint versions (manually saved)",
                            "default": false,
                            "title": "Checkpoint"
                        },
                        "description": "Whether to list checkpoint versions (manually saved)"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Interfaces list retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/InterfaceSchema"
                                    },
                                    "title": "Response List Interfaces V0 Interface Interfaces List Get"
                                },
                                "example": [
                                    {
                                        "id": "123",
                                        "name": "my_interface",
                                        "project_id": "proj_abc",
                                        "tabs": [],
                                        "color": "blue",
                                        "is_checkpoint": false,
                                        "created_at": "2024-01-01T12:00:00Z",
                                        "updated_at": "2024-01-01T12:00:00Z"
                                    }
                                ]
                            }
                        }
                    },
                    "404": {
                        "description": "Project not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Project my_project not found or you don't have access."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/interface/interfaces/checkpoint": {
            "post": {
                "tags": [
                    "Configs",
                    "interface",
                    "interfaces"
                ],
                "summary": "Create Interface Checkpoint",
                "description": "Create a manual checkpoint (save) of an interface by ID or by project ID and name.",
                "operationId": "create_interface_checkpoint_v0_interface_interfaces_checkpoint_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "interface_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The ID of the interface to checkpoint",
                            "title": "Interface Id"
                        },
                        "description": "The ID of the interface to checkpoint"
                    },
                    {
                        "name": "project",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The project ID the interface belongs to",
                            "title": "Project"
                        },
                        "description": "The project ID the interface belongs to"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The name of the interface to checkpoint",
                            "title": "Name"
                        },
                        "description": "The name of the interface to checkpoint"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Interface checkpoint created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InterfaceSchema"
                                },
                                "example": {
                                    "id": "123",
                                    "name": "my_interface",
                                    "project_id": "proj_abc",
                                    "tabs": [],
                                    "color": "blue",
                                    "is_checkpoint": true,
                                    "created_at": "2024-01-01T12:00:00Z",
                                    "updated_at": "2024-01-01T12:00:00Z"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Interface not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Interface with ID 123 not found."
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing required parameters",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Either interface_id or both project and name must be provided."
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to create checkpoint",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Failed to create or update checkpoint interface."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Configs",
                    "interface",
                    "interfaces"
                ],
                "summary": "Get Interface Checkpoint",
                "description": "Get the latest checkpoint (manual save) for an interface by ID or by project ID and name.",
                "operationId": "get_interface_checkpoint_v0_interface_interfaces_checkpoint_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "interface_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The ID of the interface to get checkpoint for",
                            "title": "Interface Id"
                        },
                        "description": "The ID of the interface to get checkpoint for"
                    },
                    {
                        "name": "project",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The project ID the interface belongs to",
                            "title": "Project"
                        },
                        "description": "The project ID the interface belongs to"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The name of the interface to get checkpoint for",
                            "title": "Name"
                        },
                        "description": "The name of the interface to get checkpoint for"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Interface checkpoint retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InterfaceSchema"
                                },
                                "example": {
                                    "id": "123",
                                    "name": "my_interface",
                                    "project_id": "proj_abc",
                                    "tabs": [],
                                    "color": "blue",
                                    "is_checkpoint": true,
                                    "created_at": "2024-01-01T12:00:00Z",
                                    "updated_at": "2024-01-01T12:00:00Z"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Interface or checkpoint not found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "No checkpoint found for the specified interface."
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing required parameters",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Either interface_id or both project and name must be provided."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/interface/interfaces/export_template": {
            "post": {
                "tags": [
                    "Configs",
                    "interface",
                    "interfaces"
                ],
                "summary": "Export Interface Template",
                "description": "Export an interface as a reusable template.",
                "operationId": "export_interface_template_v0_interface_interfaces_export_template_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExportInterfaceTemplateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Interface template exported successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateExportResponse"
                                },
                                "example": {
                                    "template": {
                                        "name": "Analytics Dashboard",
                                        "tabs": [
                                            {
                                                "name": "Overview",
                                                "tiles": [
                                                    {
                                                        "name": "Data Table",
                                                        "type": "Table",
                                                        "position": {
                                                            "x": 0,
                                                            "y": 0,
                                                            "width": 6,
                                                            "height": 4
                                                        }
                                                    }
                                                ]
                                            }
                                        ],
                                        "template_version": "1.0"
                                    },
                                    "metadata": {
                                        "exported_at": "2024-01-01T12:00:00Z"
                                    },
                                    "export_stats": {
                                        "tabs": 1,
                                        "tiles": 1
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/interface/interfaces/import_template": {
            "post": {
                "tags": [
                    "Configs",
                    "interface",
                    "interfaces"
                ],
                "summary": "Import Interface Template",
                "description": "Import an interface template into a project.",
                "operationId": "import_interface_template_v0_interface_interfaces_import_template_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ImportInterfaceTemplateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Interface template imported successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateImportResponse"
                                },
                                "example": {
                                    "success": true,
                                    "import_stats": {
                                        "interfaces": 1,
                                        "tabs": 2,
                                        "tiles": 5
                                    },
                                    "created_ids": {
                                        "interface_id": "abc123"
                                    },
                                    "warnings": []
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/tab": {
            "post": {
                "tags": [
                    "Configs",
                    "interface",
                    "tab"
                ],
                "summary": "Create Tab",
                "description": "Create a new tab.",
                "operationId": "create_tab_v0_tab_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "checkpoint",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to create a checkpoint tab (manual save)",
                            "default": false,
                            "title": "Checkpoint"
                        },
                        "description": "Whether to create a checkpoint tab (manual save)"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTabRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Configs",
                    "interface",
                    "tab"
                ],
                "summary": "Update Tab",
                "description": "Update a tab by ID or by interface_id and name.",
                "operationId": "update_tab_v0_tab_put",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "tab_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The ID of the tab to update",
                            "title": "Tab Id"
                        },
                        "description": "The ID of the tab to update"
                    },
                    {
                        "name": "interface_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The interface ID the tab belongs to",
                            "title": "Interface Id"
                        },
                        "description": "The interface ID the tab belongs to"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The name of the tab to update",
                            "title": "Name"
                        },
                        "description": "The name of the tab to update"
                    },
                    {
                        "name": "checkpoint",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "Whether this is a checkpoint update (manual save)",
                            "default": false,
                            "title": "Checkpoint"
                        },
                        "description": "Whether this is a checkpoint update (manual save)"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateTabRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/credits": {
            "get": {
                "tags": [
                    "Credits"
                ],
                "summary": "Get Credits",
                "description": "Returns the number of available credits.",
                "operationId": "get_credits_v0_credits_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreditsResponse"
                                },
                                "example": {
                                    "id": "<USER_ID>",
                                    "credits": 10
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/v0/promo": {
            "post": {
                "tags": [
                    "Credits"
                ],
                "summary": "Promo Code",
                "description": "Activates a promotional code.",
                "operationId": "promo_code_v0_promo_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "code",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Promo code to be activated.",
                            "title": "Code"
                        },
                        "description": "Promo code to be activated.",
                        "example": "sample_code"
                    },
                    {
                        "name": "user",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "ID of the user that receives the credits,defaults to the user making the request.",
                            "title": "User"
                        },
                        "description": "ID of the user that receives the credits,defaults to the user making the request.",
                        "example": "sample_user_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    },
                                    "title": "Response Promo Code V0 Promo Post"
                                },
                                "example": {
                                    "info": "Code {code} activated successfully!"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Already activated code",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "This code has already been activated."
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Code Not Found",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Invalid code."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/metrics": {
            "get": {
                "summary": "Metrics",
                "description": "Endpoint that returns the aggregated Prometheus metrics.\nIncludes simple Bearer-token authentication to secure the endpoint.",
                "operationId": "metrics_metrics_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "AddLogsToContextRequest": {
                "properties": {
                    "context_name": {
                        "type": "string",
                        "title": "Context Name",
                        "description": "Name of the context to add logs to.",
                        "example": "experiment1/trial1"
                    },
                    "log_ids": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "integer"
                                },
                                "type": "array",
                                "minItems": 1
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Log Ids",
                        "description": "List of log IDs to add to the context. At least one log ID must be provided.",
                        "example": [
                            123,
                            456,
                            789
                        ]
                    },
                    "log_args": {
                        "anyOf": [
                            {
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Log Args",
                        "description": "Dictionary of arguments (e.g. filter_expr) to select logs by criteria.",
                        "example": {
                            "filter_expr": "metric > 0.9"
                        }
                    },
                    "copy": {
                        "type": "boolean",
                        "title": "Copy",
                        "description": "If True, a copy of each log is created and then added to the context. If False, the existing log associations are simply used.",
                        "default": false
                    }
                },
                "type": "object",
                "required": [
                    "context_name"
                ],
                "title": "AddLogsToContextRequest",
                "description": "Request model for adding existing logs to a context."
            },
            "AssistantCreate": {
                "properties": {
                    "first_name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "First Name",
                        "description": "First name of the assistant",
                        "example": "Ada"
                    },
                    "surname": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Surname",
                        "description": "Surname of the assistant",
                        "example": "Lovelace"
                    },
                    "age": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Age",
                        "description": "Age of the assistant",
                        "example": 28
                    },
                    "weekly_limit": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Weekly Limit",
                        "description": "Weekly time limit for the assistant in hours",
                        "example": 15.75
                    },
                    "max_parallel": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Max Parallel",
                        "description": "Maximum number of parallel tasks the assistant can handle",
                        "example": 2
                    },
                    "region": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Region",
                        "description": "Geographic region of the assistant",
                        "example": "North America"
                    },
                    "profile_photo": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Profile Photo",
                        "description": "URL to the assistant's profile photo",
                        "example": "https://example.com/photos/ada.jpg"
                    },
                    "profile_video": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Profile Video",
                        "description": "URL to the assistant's profile video",
                        "example": "https://example.com/videos/ada.mp4"
                    },
                    "about": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "About",
                        "description": "Brief description about the assistant",
                        "example": "Mathematician and writer known for work on Analytical Engine"
                    },
                    "country": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Country",
                        "description": "Country code for phone number provisioning (e.g., US, GB)",
                        "default": "US",
                        "example": "US"
                    },
                    "email": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Email",
                        "description": "Email of the assistant",
                        "example": "ada.lovelace@unify.ai"
                    },
                    "voice_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Voice Id",
                        "description": "Id of the voice (Cartesia ID) to use for the assistant",
                        "example": "bf0a246a-8642-498a-9950-80c35e9276b5"
                    },
                    "user_phone": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "User Phone",
                        "description": "Contact phone number of the user",
                        "example": "+15551234567"
                    },
                    "user_whatsapp_number": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "User Whatsapp Number",
                        "description": "WhatsApp number of the user",
                        "example": "+15551234567"
                    },
                    "create_infra": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Create Infra",
                        "description": "Whether to create the infrastructure for the assistant",
                        "default": true
                    },
                    "phone": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Phone",
                        "description": "Phone number of the assistant (just for testing purposes)"
                    },
                    "pre_hire_chat": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/ChatMessage"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Pre Hire Chat",
                        "description": "A list of chat messages from the pre-hire conversation to be logged."
                    }
                },
                "type": "object",
                "title": "AssistantCreate",
                "description": "Schema for creating a new assistant."
            },
            "AssistantHiringApprovalResponse": {
                "properties": {
                    "message": {
                        "type": "string",
                        "title": "Message"
                    },
                    "assistant_hiring_approval": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Assistant Hiring Approval"
                    }
                },
                "type": "object",
                "required": [
                    "message",
                    "assistant_hiring_approval"
                ],
                "title": "AssistantHiringApprovalResponse"
            },
            "AssistantHiringOneTimeLinkClaimTokenRequest": {
                "properties": {
                    "token": {
                        "type": "string",
                        "title": "Token"
                    }
                },
                "type": "object",
                "required": [
                    "token"
                ],
                "title": "AssistantHiringOneTimeLinkClaimTokenRequest"
            },
            "AssistantPhotoUploadResponse": {
                "properties": {
                    "gcs_url": {
                        "type": "string",
                        "title": "Gcs Url",
                        "description": "GCS URL of the uploaded photo",
                        "example": "gs://your-bucket-name/user_id/image_uuid.jpg"
                    }
                },
                "type": "object",
                "required": [
                    "gcs_url"
                ],
                "title": "AssistantPhotoUploadResponse"
            },
            "AssistantRead": {
                "properties": {
                    "first_name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "First Name",
                        "description": "First name of the assistant",
                        "example": "Ada"
                    },
                    "surname": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Surname",
                        "description": "Surname of the assistant",
                        "example": "Lovelace"
                    },
                    "age": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Age",
                        "description": "Age of the assistant",
                        "example": 28
                    },
                    "weekly_limit": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Weekly Limit",
                        "description": "Weekly time limit for the assistant in hours",
                        "example": 15.75
                    },
                    "max_parallel": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Max Parallel",
                        "description": "Maximum number of parallel tasks the assistant can handle",
                        "example": 2
                    },
                    "region": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Region",
                        "description": "Geographic region of the assistant",
                        "example": "North America"
                    },
                    "profile_photo": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Profile Photo",
                        "description": "URL to the assistant's profile photo",
                        "example": "https://example.com/photos/ada.jpg"
                    },
                    "profile_video": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Profile Video",
                        "description": "URL to the assistant's profile video",
                        "example": "https://example.com/videos/ada.mp4"
                    },
                    "about": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "About",
                        "description": "Brief description about the assistant",
                        "example": "Mathematician and writer known for work on Analytical Engine"
                    },
                    "country": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Country",
                        "description": "Country code for phone number provisioning (e.g., US, GB)",
                        "default": "US",
                        "example": "US"
                    },
                    "email": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Email",
                        "description": "Email of the assistant",
                        "example": "ada.lovelace@unify.ai"
                    },
                    "voice_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Voice Id",
                        "description": "Id of the voice (Cartesia ID) to use for the assistant",
                        "example": "bf0a246a-8642-498a-9950-80c35e9276b5"
                    },
                    "user_phone": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "User Phone",
                        "description": "Contact phone number of the user",
                        "example": "+15551234567"
                    },
                    "user_whatsapp_number": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "User Whatsapp Number",
                        "description": "WhatsApp number of the user",
                        "example": "+15551234567"
                    },
                    "create_infra": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Create Infra",
                        "description": "Whether to create the infrastructure for the assistant",
                        "default": true
                    },
                    "phone": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Phone",
                        "description": "Phone number of the assistant",
                        "example": "+15551234567"
                    },
                    "pre_hire_chat": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/ChatMessage"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Pre Hire Chat",
                        "description": "A list of chat messages from the pre-hire conversation to be logged."
                    },
                    "agent_id": {
                        "type": "string",
                        "title": "Agent Id",
                        "description": "Unique identifier for the assistant",
                        "example": "12345"
                    },
                    "user_id": {
                        "type": "string",
                        "title": "User Id",
                        "description": "ID of the user to associate the assistant with",
                        "example": "123"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At",
                        "description": "Timestamp when the assistant was created",
                        "example": "2025-04-25T10:30:00Z"
                    },
                    "updated_at": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Updated At",
                        "description": "Timestamp when the assistant was last updated",
                        "example": "2025-04-26T14:15:00Z"
                    },
                    "assistant_whatsapp_number": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Assistant Whatsapp Number",
                        "description": "WhatsApp number of the assistant",
                        "example": "+15551234567"
                    },
                    "tts_provider": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tts Provider",
                        "description": "TTS provider of the assistant",
                        "default": "cartesia",
                        "example": "cartesia"
                    },
                    "api_key": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Api Key",
                        "description": "API key of the assistant",
                        "example": "1234567890"
                    },
                    "user_first_name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "User First Name",
                        "description": "First name of the user",
                        "example": "Ada"
                    },
                    "user_last_name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "User Last Name",
                        "description": "Last name of the user",
                        "example": "Lovelace"
                    },
                    "user_email": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "User Email",
                        "description": "Email of the user",
                        "example": "ada.lovelace@unify.ai"
                    }
                },
                "type": "object",
                "required": [
                    "agent_id",
                    "user_id",
                    "created_at"
                ],
                "title": "AssistantRead",
                "description": "Schema for reading assistant data, extends AssistantCreate with additional fields."
            },
            "AssistantUpdate": {
                "properties": {
                    "weekly_limit": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Weekly Limit",
                        "description": "Weekly time limit for the assistant in hours",
                        "example": 20.5
                    },
                    "max_parallel": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Max Parallel",
                        "description": "Maximum number of parallel tasks the assistant can handle",
                        "example": 3
                    },
                    "profile_photo": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Profile Photo",
                        "description": "URL to the assistant's profile photo",
                        "example": "https://example.com/photos/ada.jpg"
                    },
                    "profile_video": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Profile Video",
                        "description": "URL to the assistant's profile video",
                        "example": "https://example.com/videos/ada_new.mp4"
                    },
                    "about": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "About",
                        "description": "Brief description about the assistant",
                        "example": "Award-winning mathematician specializing in algorithm development"
                    },
                    "user_phone": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "User Phone",
                        "description": "Contact phone number of the user",
                        "example": "+15551234567"
                    },
                    "phone": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Phone",
                        "description": "Contact phone number for the assistant",
                        "example": "+15559876543"
                    },
                    "email": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Email",
                        "description": "Email address for the assistant",
                        "example": "ada.lovelace@newdomain.com"
                    },
                    "user_whatsapp_number": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "User Whatsapp Number",
                        "description": "WhatsApp number of the user",
                        "example": "+15559876543"
                    },
                    "voice_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Voice Id",
                        "description": "Id of the voice (Cartesia ID) to use for the assistant",
                        "example": "bf0a246a-8642-498a-9950-80c35e9276b5"
                    },
                    "country": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Country",
                        "description": "Country code for phone number provisioning (e.g., US, GB)",
                        "example": "GB"
                    }
                },
                "type": "object",
                "title": "AssistantUpdate",
                "description": "Schema for updating an existing assistant.\nOnly includes fields that can be updated."
            },
            "AssistantVideoUploadResponse": {
                "properties": {
                    "gcs_url": {
                        "type": "string",
                        "title": "Gcs Url",
                        "description": "GCS URL of the uploaded video",
                        "example": "gs://your-bucket-name/user_id/video_uuid.mp4"
                    }
                },
                "type": "object",
                "required": [
                    "gcs_url"
                ],
                "title": "AssistantVideoUploadResponse"
            },
            "Body_animate_video_endpoint_v0_assistant_photo_animate_post": {
                "properties": {
                    "image_url": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Image Url"
                    },
                    "image_file": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "binary"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Image File"
                    },
                    "audio_url": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Audio Url"
                    },
                    "audio_file": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "binary"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Audio File"
                    },
                    "seed": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Seed"
                    },
                    "dynamic_scale": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Dynamic Scale",
                        "default": 1.0
                    },
                    "min_resolution": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Min Resolution",
                        "default": 512
                    },
                    "inference_steps": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Inference Steps",
                        "default": 25
                    },
                    "keep_resolution": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Keep Resolution",
                        "default": true
                    }
                },
                "type": "object",
                "title": "Body_animate_video_endpoint_v0_assistant_photo_animate_post"
            },
            "Body_clone_voice_v0_assistant_voice_clone_post": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "language": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Language"
                    },
                    "description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "gender": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Gender"
                    },
                    "provider": {
                        "type": "string",
                        "title": "Provider",
                        "default": "cartesia"
                    },
                    "file": {
                        "type": "string",
                        "format": "binary",
                        "title": "File"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "file"
                ],
                "title": "Body_clone_voice_v0_assistant_voice_clone_post"
            },
            "Body_edit_assistant_photo_v0_assistant_photo_edit_post": {
                "properties": {
                    "prompt": {
                        "type": "string",
                        "title": "Prompt"
                    },
                    "input_image_url": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Input Image Url"
                    },
                    "input_image_file": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "binary"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Input Image File"
                    },
                    "aspect_ratio": {
                        "type": "string",
                        "title": "Aspect Ratio",
                        "default": "match_input_image"
                    },
                    "output_format": {
                        "type": "string",
                        "title": "Output Format",
                        "default": "jpg"
                    },
                    "safety_tolerance": {
                        "type": "number",
                        "title": "Safety Tolerance",
                        "default": 2.0
                    }
                },
                "type": "object",
                "required": [
                    "prompt"
                ],
                "title": "Body_edit_assistant_photo_v0_assistant_photo_edit_post"
            },
            "Body_log_query_v0_queries_post": {
                "properties": {
                    "endpoint": {
                        "type": "string",
                        "title": "Endpoint",
                        "description": "Endpoint to log query for.",
                        "example": "llama-3.1-8b-chat_ollama@external"
                    },
                    "query_body": {
                        "type": "object",
                        "title": "Query Body",
                        "description": "A JSON object containing the body of the request",
                        "example": {
                            "max_tokens": 100,
                            "messages": [
                                {
                                    "content": "You are an useful assistant",
                                    "role": "system"
                                },
                                {
                                    "content": "Explain who Newton was.",
                                    "role": "user"
                                }
                            ],
                            "model": "llama-3.1-8b-chat_ollama@external",
                            "temperature": 0.5
                        }
                    },
                    "response_body": {
                        "anyOf": [
                            {
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Response Body",
                        "description": "An optional JSON object containing the response to the request",
                        "example": {
                            "choices": [
                                {
                                    "finish_reason": "stop",
                                    "index": 0,
                                    "message": {
                                        "content": "Sir Isaac Newton was an English mathematician, physicist, and astronomer who lived from 1643 to 1727.\\n\\nHe is widely recognized as one of the most influential scientists in history, and his work laid the foundation for the Scientific Revolution of the 17th century.\\n\\nNewton's most famous achievement is his theory of universal gravitation, which he presented in his groundbreaking book \"Philosophi\\u00e6 Naturalis Principia Mathematica\" in 1687.\\n\\nAccording to Newton's theory, every",
                                        "role": "assistant"
                                    }
                                }
                            ],
                            "created": 1725396241,
                            "id": "chatcmpl-92d3b36e-7b64-4ae8-8102-9b7e3f5dd30f",
                            "model": "meta.llama3-8b-instruct-v1:0",
                            "object": "chat.completion",
                            "usage": {
                                "completion_tokens": 100,
                                "prompt_tokens": 44,
                                "total_tokens": 144
                            }
                        }
                    },
                    "tags": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tags",
                        "description": "Tags for later filtering."
                    },
                    "timestamp": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Timestamp",
                        "description": "A timestamp (if not set, will be the time of sending)",
                        "example": "2024-07-12T04:20:32.808410"
                    },
                    "consume_credits": {
                        "type": "boolean",
                        "title": "Consume Credits",
                        "description": "Whether to consume user credits for this query. Default is False for local model logging.",
                        "default": false
                    }
                },
                "type": "object",
                "required": [
                    "endpoint",
                    "query_body"
                ],
                "title": "Body_log_query_v0_queries_post"
            },
            "Body_upload_assistant_photo_v0_assistant_photo_upload_post": {
                "properties": {
                    "file": {
                        "type": "string",
                        "format": "binary",
                        "title": "File"
                    }
                },
                "type": "object",
                "required": [
                    "file"
                ],
                "title": "Body_upload_assistant_photo_v0_assistant_photo_upload_post"
            },
            "Body_upload_assistant_video_v0_assistant_video_upload_post": {
                "properties": {
                    "file": {
                        "type": "string",
                        "format": "binary",
                        "title": "File"
                    }
                },
                "type": "object",
                "required": [
                    "file"
                ],
                "title": "Body_upload_assistant_video_v0_assistant_video_upload_post"
            },
            "BusinessAddress": {
                "properties": {
                    "address_line1": {
                        "type": "string",
                        "title": "Address Line1"
                    },
                    "address_line2": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Address Line2"
                    },
                    "city": {
                        "type": "string",
                        "title": "City"
                    },
                    "state": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "State"
                    },
                    "country": {
                        "type": "string",
                        "title": "Country"
                    },
                    "postal_code": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Postal Code"
                    }
                },
                "type": "object",
                "required": [
                    "address_line1",
                    "city",
                    "country"
                ],
                "title": "BusinessAddress",
                "description": "Business address information for tax purposes."
            },
            "BusinessInfo": {
                "properties": {
                    "business_name": {
                        "type": "string",
                        "title": "Business Name"
                    },
                    "tax_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tax Id"
                    },
                    "business_type": {
                        "type": "string",
                        "title": "Business Type"
                    },
                    "business_address": {
                        "$ref": "#/components/schemas/BusinessAddress"
                    },
                    "tax_exempt": {
                        "type": "boolean",
                        "title": "Tax Exempt",
                        "default": false
                    }
                },
                "type": "object",
                "required": [
                    "business_name",
                    "business_type",
                    "business_address"
                ],
                "title": "BusinessInfo",
                "description": "Business information for B2B accounts."
            },
            "ChatCompletionRequest": {
                "properties": {
                    "messages": {
                        "items": {
                            "type": "object"
                        },
                        "type": "array",
                        "title": "Messages",
                        "description": "A list of messages comprising the conversation so far.",
                        "example": [
                            {
                                "content": "Tell me a joke",
                                "role": "user"
                            }
                        ]
                    },
                    "model": {
                        "type": "string",
                        "title": "Model",
                        "description": "The endpoint to use, in the format `{model}@{provider}`, based on any of the supported endpoints as per the list returned by `/v0/endpoints`",
                        "example": "gpt-4o-mini@openai"
                    },
                    "max_tokens": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Max Tokens",
                        "description": "The maximum number of tokens that can be generated in the chat completion.\n\nThe total length of input tokens and generated tokens is limited by the model's context length.",
                        "example": 1024
                    },
                    "stop": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Stop",
                        "description": "Up to 4 sequences where the API will stop generating further tokens.",
                        "example": [
                            "The End.",
                            " is the answer."
                        ]
                    },
                    "stream": {
                        "type": "boolean",
                        "title": "Stream",
                        "description": "If set, partial message deltas will be sent. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a `data: [DONE]` message.",
                        "default": false,
                        "example": false
                    },
                    "temperature": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Temperature",
                        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n\nGenerally recommended to alter this or `top_p`, but not both.",
                        "default": 1.0,
                        "example": 0.9
                    },
                    "frequency_penalty": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Frequency Penalty",
                        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
                        "example": 1.5
                    },
                    "logit_bias": {
                        "anyOf": [
                            {
                                "additionalProperties": {
                                    "type": "number"
                                },
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Logit Bias",
                        "description": "Modify the likelihood of specified tokens appearing in the completion.\n\nAccepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.",
                        "example": {
                            "0": 10,
                            "1": -75,
                            "2": 90
                        }
                    },
                    "logprobs": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Logprobs",
                        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`.",
                        "example": false
                    },
                    "top_logprobs": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Top Logprobs",
                        "description": "An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.",
                        "example": 15
                    },
                    "n": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "N",
                        "description": "How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.",
                        "example": 15
                    },
                    "presence_penalty": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Presence Penalty",
                        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
                        "example": -1.1
                    },
                    "response_format": {
                        "anyOf": [
                            {
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Response Format",
                        "description": "An object specifying the format that the model must output.\n\nSetting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema.\n\nSetting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.",
                        "example": "{ \"type\": \"json_mode\"}"
                    },
                    "seed": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Seed",
                        "description": "If specified, the system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result. Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.",
                        "example": 11
                    },
                    "stream_options": {
                        "anyOf": [
                            {
                                "additionalProperties": {
                                    "type": "boolean"
                                },
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Stream Options",
                        "description": "Options for streaming response. Only set this when you set `stream: true`.",
                        "example": [
                            "include_usage",
                            true
                        ]
                    },
                    "top_p": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Top P",
                        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nGenerally recommended to alter this or `temperature` but not both.",
                        "example": 0.5
                    },
                    "tools": {
                        "anyOf": [
                            {
                                "items": {},
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tools",
                        "description": "A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported."
                    },
                    "tool_choice": {
                        "anyOf": [
                            {},
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tool Choice",
                        "description": "Controls which (if any) tool is called by the model. `none` means the model will not call any tool and instead generates a message.`auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools. Specifying a particular tool via `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool.\n\n`none` is the default when no tools are present. `auto` is the default if tools are present.",
                        "example": "{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}"
                    },
                    "parallel_tool_calls": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Parallel Tool Calls",
                        "description": "Whether to enable parallel function calling during tool use.",
                        "default": true,
                        "example": true
                    },
                    "user": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "User",
                        "description": "A unique identifier representing your end-user.",
                        "example": "some_user"
                    },
                    "signature": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Signature",
                        "description": "A string used to represent where the request came from, for examples, did it come via the Python package, the NodeJS package, the chat interface etc. This should *not* be set by the user.",
                        "example": "python"
                    },
                    "use_custom_keys": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Use Custom Keys",
                        "description": "Whether or not to use custom API keys with the specified provider, meaning that you will be using your own account with that provider in the backend.",
                        "example": true
                    },
                    "tags": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tags",
                        "description": "Comma-separated list of tags to associate with the corresponding prompt.",
                        "example": [
                            "user123",
                            "CompanyABC"
                        ]
                    },
                    "drop_params": {
                        "type": "boolean",
                        "title": "Drop Params",
                        "description": "Whether or not to drop unsupported OpenAI params by the provider you're using",
                        "default": true,
                        "example": true
                    },
                    "region": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Region",
                        "description": "A string used to represent the region where the endpoint is accessed. This is only relevant for certain providers like `vertex-ai` and `aws-bedrock`, where the endpoint is being accessed through a specified region."
                    },
                    "log_query_body": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Log Query Body",
                        "description": "Whether to log the contents of the query json body.",
                        "default": true
                    },
                    "log_response_body": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Log Response Body",
                        "description": "Whether to log the contents of the response json body.",
                        "default": true
                    }
                },
                "additionalProperties": true,
                "type": "object",
                "required": [
                    "messages",
                    "model"
                ],
                "title": "ChatCompletionRequest",
                "description": "Request model for chat completion based language model.\n\nAttributes:\n    model (str): The model identifier.\n    messages (List[Dict[str]]): List of messages for completion.\n    temperature (float): The temperature parameter for generating completions.\n    stream (bool): Whether to stream the response."
            },
            "ChatCompletionResponse": {
                "properties": {
                    "model": {
                        "type": "string",
                        "title": "Model"
                    },
                    "created": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Created"
                    },
                    "id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Id"
                    },
                    "object": {
                        "type": "string",
                        "title": "Object",
                        "default": "chat.completion"
                    },
                    "usage": {
                        "type": "object",
                        "title": "Usage"
                    },
                    "choices": {
                        "items": {
                            "type": "object"
                        },
                        "type": "array",
                        "title": "Choices"
                    }
                },
                "type": "object",
                "required": [
                    "model",
                    "usage",
                    "choices"
                ],
                "title": "ChatCompletionResponse",
                "description": "Response model for chat completion based language model.\n\nAttributes:\n    model (str): The model identifier.\n    created (int): Timestamp indicating when the response was created.\n    id (str): Identifier for the completion response.\n    object (str): The type of object, defaults to \"chat.completion\".\n    usage (dict): Usage statistics or additional information.\n    choices (List[Dict]): List of completion choices."
            },
            "ChatMessage": {
                "properties": {
                    "message_id": {
                        "type": "integer",
                        "title": "Message Id",
                        "description": "Unique identifier for the message in the exchange"
                    },
                    "medium": {
                        "type": "string",
                        "title": "Medium",
                        "description": "Communication medium",
                        "default": "unify_chat"
                    },
                    "sender_id": {
                        "type": "integer",
                        "title": "Sender Id",
                        "description": "ID of the sender"
                    },
                    "receiver_ids": {
                        "items": {
                            "type": "integer"
                        },
                        "type": "array",
                        "title": "Receiver Ids",
                        "description": "List of receiver IDs"
                    },
                    "timestamp": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Timestamp",
                        "description": "Timestamp of the message"
                    },
                    "content": {
                        "type": "string",
                        "title": "Content",
                        "description": "Content of the message"
                    },
                    "exchange_id": {
                        "type": "integer",
                        "title": "Exchange Id",
                        "description": "ID of the exchange"
                    }
                },
                "type": "object",
                "required": [
                    "message_id",
                    "sender_id",
                    "receiver_ids",
                    "timestamp",
                    "content",
                    "exchange_id"
                ],
                "title": "ChatMessage"
            },
            "ContextCommit": {
                "properties": {
                    "commit_message": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Commit Message"
                    }
                },
                "type": "object",
                "title": "ContextCommit"
            },
            "ContextCommitHistory": {
                "properties": {
                    "commit_hash": {
                        "type": "string",
                        "title": "Commit Hash"
                    },
                    "commit_message": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Commit Message"
                    },
                    "created_at": {
                        "type": "string",
                        "title": "Created At"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "project",
                            "context"
                        ],
                        "title": "Type"
                    },
                    "prev_commit_hash": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Prev Commit Hash"
                    },
                    "next_commit_hash": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Next Commit Hash",
                        "default": []
                    }
                },
                "type": "object",
                "required": [
                    "commit_hash",
                    "created_at",
                    "type"
                ],
                "title": "ContextCommitHistory"
            },
            "ContextCreateRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "Context name, can be nested using '/' (e.g., 'parent/child'). Must contain only alphanumeric characters, underscores, and hyphens.",
                        "example": "experiment1/trial1"
                    },
                    "description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description",
                        "description": "Optional description of the context",
                        "example": "Context for experiment 1 trial 1"
                    },
                    "is_versioned": {
                        "type": "boolean",
                        "title": "Is Versioned",
                        "description": "Whether the context should be versioned. If True, the context will be versioned and mutable. ",
                        "default": false,
                        "example": true
                    },
                    "allow_duplicates": {
                        "type": "boolean",
                        "title": "Allow Duplicates",
                        "description": "Whether duplicate log entries are allowed in this context. If False, attempts to add duplicate logs will be ignored.",
                        "default": true,
                        "example": true
                    },
                    "unique_keys": {
                        "anyOf": [
                            {
                                "additionalProperties": {
                                    "type": "string"
                                },
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Unique Keys",
                        "description": "Unique key definition. Keys are column names, values are types ('str', 'int', 'float', 'bool', 'datetime', 'time', 'date', 'timedelta', 'dict', 'list').",
                        "example": {
                            "company_id": "int",
                            "department_id": "int",
                            "first_name": "str",
                            "last_name": "str"
                        }
                    },
                    "auto_counting": {
                        "anyOf": [
                            {
                                "additionalProperties": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ]
                                },
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Auto Counting",
                        "description": "Auto-counting configuration. Keys are column names to auto-increment, values are parent counter names (None for independent counters).",
                        "example": {
                            "company_id": "department_id"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ],
                "title": "ContextCreateRequest",
                "description": "Request model for creating a new context within a project."
            },
            "ContextRollback": {
                "properties": {
                    "commit_hash": {
                        "type": "string",
                        "title": "Commit Hash"
                    }
                },
                "type": "object",
                "required": [
                    "commit_hash"
                ],
                "title": "ContextRollback"
            },
            "CreateDerivedEntriesConfig": {
                "properties": {
                    "project": {
                        "type": "string",
                        "title": "Project",
                        "description": "Name of the project the stored entries will be associated to.",
                        "example": "eval-project"
                    },
                    "context": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ContextCreateRequest"
                            },
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Context",
                        "description": "Optional context path to update for the logs. Can use '/' for nested contexts (e.g. 'training/batch1'). Can be a string (which will be interpreted with description=None and is_versioned=False) or a ContextCreateRequest object.",
                        "example": "experiment1/trial1"
                    },
                    "key": {
                        "type": "string",
                        "title": "Key",
                        "description": "The name of the entry.",
                        "example": "score_diff"
                    },
                    "equation": {
                        "type": "string",
                        "title": "Equation",
                        "description": "The equation for computing the value of each derived entry.",
                        "example": "{log0:score} - {log1:score}"
                    },
                    "referenced_logs": {
                        "additionalProperties": {
                            "anyOf": [
                                {
                                    "items": {
                                        "type": "integer"
                                    },
                                    "type": "array"
                                },
                                {
                                    "type": "object"
                                }
                            ]
                        },
                        "type": "object",
                        "title": "Referenced Logs",
                        "description": "The logs to use for each newly created derived entry, either as a list of log ids or as a set of arguments for the get_logs endpoint.",
                        "example": {
                            "log0": [
                                0,
                                1,
                                2
                            ],
                            "log1": {
                                "filter_expr": "score > 0.5"
                            }
                        }
                    },
                    "derived": {
                        "type": "boolean",
                        "title": "Derived",
                        "description": "Whether to create derived logs (True) or static entries in base logs (False).",
                        "default": true,
                        "example": false
                    }
                },
                "type": "object",
                "required": [
                    "project",
                    "key",
                    "equation",
                    "referenced_logs"
                ],
                "title": "CreateDerivedEntriesConfig"
            },
            "CreateFieldsRequest": {
                "properties": {
                    "project": {
                        "type": "string",
                        "title": "Project",
                        "description": "Name of the project the fields belong to.",
                        "example": "eval-project"
                    },
                    "context": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Context",
                        "description": "Optional context path for the fields.",
                        "example": "experiment1/trial1"
                    },
                    "fields": {
                        "additionalProperties": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/StandardFieldDefinition"
                                },
                                {
                                    "$ref": "#/components/schemas/EnumType"
                                },
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "type": "object",
                        "title": "Fields",
                        "description": "Dictionary mapping field names to their type definitions.",
                        "example": {
                            "comment": {
                                "description": "User comment",
                                "mutable": true,
                                "type": "str"
                            },
                            "email": {
                                "description": "User email address",
                                "type": "str",
                                "unique": true
                            },
                            "score": "int"
                        }
                    },
                    "backfill_logs": {
                        "type": "boolean",
                        "title": "Backfill Logs",
                        "description": "Whether to backfill existing logs in the context with None values for the new fields. When True, all existing logs will get the new fields with None values, ensuring all rows can participate in derived equations without errors.",
                        "default": true,
                        "example": true
                    }
                },
                "type": "object",
                "required": [
                    "project",
                    "fields"
                ],
                "title": "CreateFieldsRequest",
                "description": "Request model for creating fields in a project context.\n\nFields can be defined with various properties including mutability. The `mutable` flag\ndetermines whether field values can be updated after creation via update endpoints.\nImmutable fields (mutable=False) provide data integrity guarantees once set."
            },
            "CreateInterfaceRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "icon": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Icon"
                    },
                    "color": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Color"
                    },
                    "order": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Order"
                    },
                    "interface_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Interface Id"
                    },
                    "project": {
                        "type": "string",
                        "title": "Project"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "name",
                    "project"
                ],
                "title": "CreateInterfaceRequest",
                "description": "Request to create an interface - inherits common fields from base template schema"
            },
            "CreateLogConfig": {
                "properties": {
                    "project": {
                        "type": "string",
                        "title": "Project",
                        "description": "Name of the project the stored entries will be associated to.",
                        "example": "eval-project"
                    },
                    "context": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ContextCreateRequest"
                            },
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Context",
                        "description": "Optional context path to update for the logs. Can use '/' for nested contexts (e.g. 'training/batch1'). Can be a string (which will be interpreted with description=None and is_versioned=False) or a ContextCreateRequest object.",
                        "example": "experiment1/trial1"
                    },
                    "params": {
                        "anyOf": [
                            {
                                "type": "object"
                            },
                            {
                                "items": {
                                    "type": "object"
                                },
                                "type": "array"
                            }
                        ],
                        "title": "Params",
                        "description": "Dictionary containing one or more key:value pairs that will be logged into the platform. Can be either a single dictionary or a list of dictionaries for batch processing. When using lists for both params and entries, their lengths must match. Values must be JSON serializable. If a `explicit_types` dictionary is present, its values will override the inferred types of the entries. The explicit_types dictionary can also specify if a field is mutable via a 'mutable' boolean flag, or unique via a 'unique' boolean flag. For enum types, use the EnumType model with 'values' list and optional 'restrict' flag. Omit 'values' to create an open enum (auto-seeding). For contexts with nested unique IDs, parent ID values for the leftmost N-1 unique columns can be supplied as normal param keys. The rightmost column is always auto-incremented. For example, if unique columns are ['user', 'session', 'step'], you can provide 'user' and 'session' values in params, and 'step' will be auto-generated.",
                        "default": {},
                        "examples": [
                            {
                                "explicit_types": {
                                    "category": {
                                        "description": "Classification category",
                                        "restrict": true,
                                        "type": "enum",
                                        "values": [
                                            "A",
                                            "B",
                                            "C"
                                        ]
                                    },
                                    "status": {
                                        "restrict": false,
                                        "type": "enum"
                                    },
                                    "system-prompt": {
                                        "description": "The system prompt used for generation",
                                        "mutable": true,
                                        "type": "str",
                                        "unique": false
                                    }
                                },
                                "function_definition": "...",
                                "system-prompt": "..."
                            },
                            [
                                {
                                    "system-prompt": "prompt1"
                                },
                                {
                                    "system-prompt": "prompt2"
                                }
                            ],
                            [
                                {
                                    "session": 4,
                                    "system-prompt": "prompt1",
                                    "user": 100
                                },
                                {
                                    "session": 4,
                                    "system-prompt": "prompt2",
                                    "user": 100
                                }
                            ]
                        ]
                    },
                    "entries": {
                        "anyOf": [
                            {
                                "type": "object"
                            },
                            {
                                "items": {
                                    "type": "object"
                                },
                                "type": "array"
                            }
                        ],
                        "title": "Entries",
                        "description": "Dictionary containing one or more key:value pairs that will be logged into the platform. Can be either a single dictionary or a list of dictionaries for batch processing. When using lists for both params and entries, their lengths must match. Values must be JSON serializable. If a `explicit_types` dictionary is present, its values will override the inferred types of the entries. The explicit_types dictionary can also specify if a field is mutable via a 'mutable' boolean flag, or unique via a 'unique' boolean flag. For enum types, use the EnumType model with 'values' list and optional 'restrict' flag. Omit 'values' to create an open enum (auto-seeding). For contexts with nested unique IDs, parent ID values for the leftmost N-1 unique columns can be supplied as normal entry keys. The rightmost column is always auto-incremented. For example, if unique columns are ['user', 'session', 'step'], you can provide 'user' and 'session' values in entries, and 'step' will be auto-generated.",
                        "default": {},
                        "examples": [
                            {
                                "explicit_types": {
                                    "input": {
                                        "description": "Input image for processing",
                                        "mutable": true,
                                        "type": "Image",
                                        "unique": true
                                    },
                                    "status": {
                                        "description": "Processing status",
                                        "restrict": true,
                                        "type": "enum",
                                        "values": [
                                            "pending",
                                            "completed",
                                            "failed"
                                        ]
                                    },
                                    "tag": {
                                        "type": "enum"
                                    }
                                },
                                "input": "...",
                                "score-test-1": "..."
                            },
                            [
                                {
                                    "input": "test1",
                                    "score": 0.8
                                },
                                {
                                    "input": "test2",
                                    "score": 0.9
                                }
                            ],
                            [
                                {
                                    "data": "step1",
                                    "session": 4,
                                    "user": 100
                                },
                                {
                                    "data": "step2",
                                    "session": 4,
                                    "user": 100
                                }
                            ]
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "project"
                ],
                "title": "CreateLogConfig"
            },
            "CreateTabRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "visible": {
                        "type": "boolean",
                        "title": "Visible",
                        "default": true
                    },
                    "active": {
                        "type": "boolean",
                        "title": "Active",
                        "default": false
                    },
                    "order": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Order"
                    },
                    "global_context": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Global Context"
                    },
                    "color": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Color"
                    },
                    "icon": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Icon"
                    },
                    "tab_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tab Id"
                    },
                    "interface_id": {
                        "type": "string",
                        "title": "Interface Id"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "name",
                    "interface_id"
                ],
                "title": "CreateTabRequest",
                "description": "Request to create a tab - inherits common fields from base template schema"
            },
            "CreateTileRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "position": {
                        "$ref": "#/components/schemas/TilePosition"
                    },
                    "type": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Type"
                    },
                    "minW": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minw"
                    },
                    "minH": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minh"
                    },
                    "visible": {
                        "type": "boolean",
                        "title": "Visible",
                        "default": true
                    },
                    "locked": {
                        "type": "boolean",
                        "title": "Locked",
                        "default": false
                    },
                    "moved": {
                        "type": "boolean",
                        "title": "Moved",
                        "default": false
                    },
                    "static": {
                        "type": "boolean",
                        "title": "Static",
                        "default": false
                    },
                    "color": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Color"
                    },
                    "context": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Context"
                    },
                    "table": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Table"
                    },
                    "auto_update": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Auto Update"
                    },
                    "freeze": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Freeze"
                    },
                    "filters": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Filters"
                    },
                    "common_filter": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Common Filter"
                    },
                    "metric": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Metric"
                    },
                    "column_context": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Column Context"
                    },
                    "grouping": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Grouping"
                    },
                    "table_tile": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/TableTileSchema"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "plot_tile": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/PlotTileSchema"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "view_tile": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ViewTileSchema"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "editor_tile": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/EditorTileSchema"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "terminal_tile": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/TerminalTileSchema"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "tile_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tile Id"
                    },
                    "tab_id": {
                        "type": "string",
                        "title": "Tab Id"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "name",
                    "position",
                    "tab_id"
                ],
                "title": "CreateTileRequest",
                "description": "Request to create a tile - inherits common fields from base template schema"
            },
            "CreditsResponse": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "credits": {
                        "type": "number",
                        "title": "Credits"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "credits"
                ],
                "title": "CreditsResponse",
                "description": "Response model for credits models.\n\nAttributes:\n    id (str): The id of the users.\n    credits (float): The credits of the users."
            },
            "CustomApiKeyModelResponse": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "value": {
                        "type": "string",
                        "title": "Value"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "value"
                ],
                "title": "CustomApiKeyModelResponse"
            },
            "CustomEndpointModelResponse": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "model_arg": {
                        "type": "string",
                        "title": "Model Arg"
                    },
                    "url": {
                        "type": "string",
                        "title": "Url"
                    },
                    "key": {
                        "type": "string",
                        "title": "Key"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "model_arg",
                    "url",
                    "key"
                ],
                "title": "CustomEndpointModelResponse"
            },
            "DeleteFieldsRequest": {
                "properties": {
                    "project": {
                        "type": "string",
                        "title": "Project",
                        "description": "Name of the project the fields belong to.",
                        "example": "eval-project"
                    },
                    "context": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Context",
                        "description": "Optional context path for the fields.",
                        "example": "experiment1/trial1"
                    },
                    "fields": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Fields",
                        "description": "List of field names to delete.",
                        "example": [
                            "score",
                            "response"
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "project",
                    "fields"
                ],
                "title": "DeleteFieldsRequest"
            },
            "DeleteLogEntryRequest": {
                "properties": {
                    "project": {
                        "type": "string",
                        "title": "Project",
                        "description": "Name of the project the logs belong to.",
                        "example": "eval-project"
                    },
                    "context": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Context",
                        "description": "Optional context path to update for the logs. Can use '/' for nested contexts (e.g. 'training/batch1').",
                        "example": "experiment1/trial1"
                    },
                    "ids_and_fields": {
                        "items": {
                            "prefixItems": [
                                {
                                    "anyOf": [
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "items": {
                                                "type": "integer"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "object"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ]
                                },
                                {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ]
                                }
                            ],
                            "type": "array",
                            "maxItems": 2,
                            "minItems": 2
                        },
                        "type": "array",
                        "minItems": 1,
                        "title": "Ids And Fields",
                        "description": "List of tuples of log ID(s) and field(s) to delete, either as an individual item or a list of items. A log ID of None indicates that the field should be deleted from all logs. Can also use a dict of filter arguments to select logs. The filter dict should be a key:value pair where the key is the field to filter on and the value is the value to filter on.",
                        "example": [
                            [
                                123,
                                "score"
                            ],
                            [
                                [
                                    456,
                                    457
                                ],
                                [
                                    "score",
                                    "response"
                                ]
                            ],
                            [
                                [
                                    458,
                                    459,
                                    460
                                ],
                                "response"
                            ],
                            [
                                {
                                    "score": "100"
                                },
                                null
                            ],
                            [
                                null,
                                "score"
                            ]
                        ]
                    },
                    "source_type": {
                        "type": "string",
                        "enum": [
                            "base",
                            "derived",
                            "all"
                        ],
                        "title": "Source Type",
                        "description": "Specifies which type of logs to delete. Can be 'base' for base logs only, 'derived' for derived logs only, or 'all' to delete from both types.",
                        "default": "all",
                        "example": "all"
                    },
                    "delete_empty_logs": {
                        "type": "boolean",
                        "title": "Delete Empty Logs",
                        "description": "Whether to delete logs which end up being empty as a result of the field deletion.",
                        "default": false,
                        "example": true
                    },
                    "delete_empty_fields": {
                        "type": "boolean",
                        "title": "Delete Empty Fields",
                        "description": "Whether to delete fields that have no data after log deletion.",
                        "default": true,
                        "example": true
                    }
                },
                "type": "object",
                "required": [
                    "project",
                    "ids_and_fields"
                ],
                "title": "DeleteLogEntryRequest"
            },
            "EditorTileSchema": {
                "properties": {
                    "id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Id"
                    },
                    "tile_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tile Id"
                    },
                    "file_name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "File Name"
                    },
                    "file_type": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "File Type"
                    },
                    "content": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Content"
                    }
                },
                "type": "object",
                "title": "EditorTileSchema"
            },
            "EnumType": {
                "properties": {
                    "type": {
                        "type": "string",
                        "const": "enum",
                        "title": "Type"
                    },
                    "values": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Values"
                    },
                    "restrict": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Restrict",
                        "default": false
                    },
                    "description": {
                        "anyOf": [
                            {
                                "type": "string",
                                "maxLength": 256
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description",
                        "description": "Optional description for the enum field type"
                    }
                },
                "type": "object",
                "required": [
                    "type"
                ],
                "title": "EnumType"
            },
            "ExportInterfaceTemplateRequest": {
                "properties": {
                    "include_metadata": {
                        "type": "boolean",
                        "title": "Include Metadata",
                        "default": true
                    },
                    "description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Tags",
                        "default": []
                    },
                    "template_name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Template Name"
                    },
                    "interface_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Interface Id"
                    },
                    "project": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Project"
                    },
                    "interface_name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Interface Name"
                    },
                    "checkpoint": {
                        "type": "boolean",
                        "title": "Checkpoint",
                        "default": false
                    }
                },
                "type": "object",
                "title": "ExportInterfaceTemplateRequest",
                "description": "Request to export an interface template"
            },
            "ExportProjectTemplateRequest": {
                "properties": {
                    "project": {
                        "type": "string",
                        "title": "Project"
                    },
                    "interface_names": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Interface Names"
                    },
                    "checkpoint": {
                        "type": "boolean",
                        "title": "Checkpoint",
                        "default": false
                    },
                    "include_metadata": {
                        "type": "boolean",
                        "title": "Include Metadata",
                        "default": true
                    },
                    "description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Tags",
                        "default": []
                    },
                    "template_name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Template Name"
                    }
                },
                "type": "object",
                "required": [
                    "project"
                ],
                "title": "ExportProjectTemplateRequest",
                "description": "Request to export a project template."
            },
            "ExportTabTemplateRequest": {
                "properties": {
                    "include_metadata": {
                        "type": "boolean",
                        "title": "Include Metadata",
                        "default": true
                    },
                    "description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Tags",
                        "default": []
                    },
                    "template_name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Template Name"
                    },
                    "tab_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tab Id"
                    },
                    "interface_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Interface Id"
                    },
                    "tab_name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tab Name"
                    },
                    "checkpoint": {
                        "type": "boolean",
                        "title": "Checkpoint",
                        "default": false
                    }
                },
                "type": "object",
                "title": "ExportTabTemplateRequest",
                "description": "Request to export a tab template"
            },
            "ExportTileTemplateRequest": {
                "properties": {
                    "include_metadata": {
                        "type": "boolean",
                        "title": "Include Metadata",
                        "default": true
                    },
                    "description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Tags",
                        "default": []
                    },
                    "template_name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Template Name"
                    },
                    "tile_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tile Id"
                    },
                    "tab_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tab Id"
                    },
                    "tile_name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tile Name"
                    },
                    "checkpoint": {
                        "type": "boolean",
                        "title": "Checkpoint",
                        "default": false
                    }
                },
                "type": "object",
                "title": "ExportTileTemplateRequest",
                "description": "Request to export a tile template"
            },
            "FavoriteProjectIn": {
                "properties": {
                    "project": {
                        "type": "string",
                        "title": "Project",
                        "description": "The name of the project to favorite"
                    },
                    "position": {
                        "type": "integer",
                        "title": "Position",
                        "description": "Position of the project in the favorites list"
                    }
                },
                "type": "object",
                "required": [
                    "project",
                    "position"
                ],
                "title": "FavoriteProjectIn",
                "description": "Request model for creating a favorite project."
            },
            "FavoriteProjectOut": {
                "properties": {
                    "project": {
                        "type": "string",
                        "title": "Project",
                        "description": "The name of the project to favorite"
                    },
                    "position": {
                        "type": "integer",
                        "title": "Position",
                        "description": "Position of the project in the favorites list"
                    },
                    "id": {
                        "type": "integer",
                        "title": "Id",
                        "description": "Unique identifier for the favorite project"
                    }
                },
                "type": "object",
                "required": [
                    "project",
                    "position",
                    "id"
                ],
                "title": "FavoriteProjectOut",
                "description": "Response model for favorite project data."
            },
            "FavoriteProjectUpdate": {
                "properties": {
                    "position": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Position",
                        "description": "Position of the project in the favorites list"
                    }
                },
                "type": "object",
                "title": "FavoriteProjectUpdate",
                "description": "Request model for updating a favorite project."
            },
            "GetLogsMetricRequest": {
                "properties": {
                    "key": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Key",
                        "description": "Single key string or a list of keys."
                    },
                    "metrics": {
                        "anyOf": [
                            {
                                "additionalProperties": {
                                    "type": "string"
                                },
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Metrics",
                        "description": "Optional per-key metrics mapping. If provided, overrides the path metric for those keys."
                    },
                    "filter_expr": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "additionalProperties": {
                                    "type": "string"
                                },
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Filter Expr",
                        "description": "Expression to filter logs (string or key->expr dict)."
                    },
                    "from_ids": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "additionalProperties": {
                                    "type": "string"
                                },
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "From Ids",
                        "description": "Log IDs to include (string or key->IDs dict)."
                    },
                    "exclude_ids": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "additionalProperties": {
                                    "type": "string"
                                },
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Exclude Ids",
                        "description": "Log IDs to exclude (string or key->IDs dict)."
                    },
                    "context": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Context",
                        "description": "Context name (string)."
                    },
                    "group_by": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Group By",
                        "description": "Field(s) to group by when computing metrics. Can be a single field name or a list of field names for nested grouping."
                    }
                },
                "type": "object",
                "title": "GetLogsMetricRequest"
            },
            "HTTPValidationError": {
                "properties": {
                    "detail": {
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        },
                        "type": "array",
                        "title": "Detail"
                    }
                },
                "type": "object",
                "title": "HTTPValidationError"
            },
            "ImportInterfaceTemplateRequest": {
                "properties": {
                    "project": {
                        "type": "string",
                        "title": "Project"
                    },
                    "validate_first": {
                        "type": "boolean",
                        "title": "Validate First",
                        "default": true
                    },
                    "auto_sanitize": {
                        "type": "boolean",
                        "title": "Auto Sanitize",
                        "default": true
                    },
                    "overwrite_existing": {
                        "type": "boolean",
                        "title": "Overwrite Existing",
                        "default": false
                    },
                    "template": {
                        "$ref": "#/components/schemas/InterfaceTemplateSchema"
                    },
                    "new_interface_name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "New Interface Name"
                    }
                },
                "type": "object",
                "required": [
                    "project",
                    "template"
                ],
                "title": "ImportInterfaceTemplateRequest",
                "description": "Request to import an interface template"
            },
            "ImportProjectTemplateRequest": {
                "properties": {
                    "project": {
                        "type": "string",
                        "title": "Project"
                    },
                    "template": {
                        "$ref": "#/components/schemas/ProjectTemplateSchema"
                    },
                    "validate_first": {
                        "type": "boolean",
                        "title": "Validate First",
                        "default": true
                    },
                    "auto_sanitize": {
                        "type": "boolean",
                        "title": "Auto Sanitize",
                        "default": true
                    },
                    "overwrite_existing": {
                        "type": "boolean",
                        "title": "Overwrite Existing",
                        "default": false
                    },
                    "interface_name_prefix": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Interface Name Prefix"
                    }
                },
                "type": "object",
                "required": [
                    "project",
                    "template"
                ],
                "title": "ImportProjectTemplateRequest",
                "description": "Request to import a project template."
            },
            "ImportTabTemplateRequest": {
                "properties": {
                    "project": {
                        "type": "string",
                        "title": "Project"
                    },
                    "validate_first": {
                        "type": "boolean",
                        "title": "Validate First",
                        "default": true
                    },
                    "auto_sanitize": {
                        "type": "boolean",
                        "title": "Auto Sanitize",
                        "default": true
                    },
                    "overwrite_existing": {
                        "type": "boolean",
                        "title": "Overwrite Existing",
                        "default": false
                    },
                    "template": {
                        "$ref": "#/components/schemas/TabTemplateSchema"
                    },
                    "interface_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Interface Id"
                    },
                    "interface_name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Interface Name"
                    },
                    "new_tab_name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "New Tab Name"
                    }
                },
                "type": "object",
                "required": [
                    "project",
                    "template"
                ],
                "title": "ImportTabTemplateRequest",
                "description": "Request to import a tab template"
            },
            "ImportTileTemplateRequest": {
                "properties": {
                    "project": {
                        "type": "string",
                        "title": "Project"
                    },
                    "validate_first": {
                        "type": "boolean",
                        "title": "Validate First",
                        "default": true
                    },
                    "auto_sanitize": {
                        "type": "boolean",
                        "title": "Auto Sanitize",
                        "default": true
                    },
                    "overwrite_existing": {
                        "type": "boolean",
                        "title": "Overwrite Existing",
                        "default": false
                    },
                    "template": {
                        "$ref": "#/components/schemas/TileTemplateSchema"
                    },
                    "tab_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tab Id"
                    },
                    "interface_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Interface Id"
                    },
                    "tab_name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tab Name"
                    },
                    "new_tile_name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "New Tile Name"
                    }
                },
                "type": "object",
                "required": [
                    "project",
                    "template"
                ],
                "title": "ImportTileTemplateRequest",
                "description": "Request to import a tile template"
            },
            "InfoResponse_AssistantPhotoUploadResponse_": {
                "properties": {
                    "info": {
                        "$ref": "#/components/schemas/AssistantPhotoUploadResponse"
                    }
                },
                "type": "object",
                "required": [
                    "info"
                ],
                "title": "InfoResponse[AssistantPhotoUploadResponse]"
            },
            "InfoResponse_AssistantRead_": {
                "properties": {
                    "info": {
                        "$ref": "#/components/schemas/AssistantRead"
                    }
                },
                "type": "object",
                "required": [
                    "info"
                ],
                "title": "InfoResponse[AssistantRead]"
            },
            "InfoResponse_AssistantVideoUploadResponse_": {
                "properties": {
                    "info": {
                        "$ref": "#/components/schemas/AssistantVideoUploadResponse"
                    }
                },
                "type": "object",
                "required": [
                    "info"
                ],
                "title": "InfoResponse[AssistantVideoUploadResponse]"
            },
            "InfoResponse_List_AssistantRead__": {
                "properties": {
                    "info": {
                        "items": {
                            "$ref": "#/components/schemas/AssistantRead"
                        },
                        "type": "array",
                        "title": "Info"
                    }
                },
                "type": "object",
                "required": [
                    "info"
                ],
                "title": "InfoResponse[List[AssistantRead]]"
            },
            "InfoResponse_List_RecordingInfo__": {
                "properties": {
                    "info": {
                        "items": {
                            "$ref": "#/components/schemas/RecordingInfo"
                        },
                        "type": "array",
                        "title": "Info"
                    }
                },
                "type": "object",
                "required": [
                    "info"
                ],
                "title": "InfoResponse[List[RecordingInfo]]"
            },
            "InfoResponse_List_VoiceRead__": {
                "properties": {
                    "info": {
                        "items": {
                            "$ref": "#/components/schemas/VoiceRead"
                        },
                        "type": "array",
                        "title": "Info"
                    }
                },
                "type": "object",
                "required": [
                    "info"
                ],
                "title": "InfoResponse[List[VoiceRead]]"
            },
            "InfoResponse_ReplicatePredictionResponse_": {
                "properties": {
                    "info": {
                        "$ref": "#/components/schemas/ReplicatePredictionResponse"
                    }
                },
                "type": "object",
                "required": [
                    "info"
                ],
                "title": "InfoResponse[ReplicatePredictionResponse]"
            },
            "InfoResponse_VoiceDesignGeneratePreviewsAPIResponse_": {
                "properties": {
                    "info": {
                        "$ref": "#/components/schemas/VoiceDesignGeneratePreviewsAPIResponse"
                    }
                },
                "type": "object",
                "required": [
                    "info"
                ],
                "title": "InfoResponse[VoiceDesignGeneratePreviewsAPIResponse]"
            },
            "InfoResponse_VoiceRead_": {
                "properties": {
                    "info": {
                        "$ref": "#/components/schemas/VoiceRead"
                    }
                },
                "type": "object",
                "required": [
                    "info"
                ],
                "title": "InfoResponse[VoiceRead]"
            },
            "InfoResponse_str_": {
                "properties": {
                    "info": {
                        "type": "string",
                        "title": "Info"
                    }
                },
                "type": "object",
                "required": [
                    "info"
                ],
                "title": "InfoResponse[str]"
            },
            "InterfaceInfo": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "icon": {
                        "type": "string",
                        "title": "Icon"
                    },
                    "order": {
                        "type": "integer",
                        "title": "Order"
                    },
                    "tabs": {
                        "items": {
                            "$ref": "#/components/schemas/TabInfo"
                        },
                        "type": "array",
                        "title": "Tabs"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "icon",
                    "order",
                    "tabs"
                ],
                "title": "InterfaceInfo"
            },
            "InterfaceSchema": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "icon": {
                        "type": "string",
                        "title": "Icon"
                    },
                    "color": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Color"
                    },
                    "order": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Order"
                    },
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "project_id": {
                        "type": "integer",
                        "title": "Project Id"
                    },
                    "created_at": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Created At"
                    },
                    "updated_at": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Updated At"
                    },
                    "is_checkpoint": {
                        "type": "boolean",
                        "title": "Is Checkpoint",
                        "default": false
                    },
                    "tabs": {
                        "items": {
                            "$ref": "#/components/schemas/TabSchema"
                        },
                        "type": "array",
                        "title": "Tabs",
                        "default": []
                    },
                    "active_tab_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Active Tab Id"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "icon",
                    "id",
                    "project_id"
                ],
                "title": "InterfaceSchema",
                "description": "Complete Interface schema - now inherits from base"
            },
            "InterfaceTemplateSchema": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "icon": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Icon"
                    },
                    "color": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Color"
                    },
                    "order": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Order"
                    },
                    "tabs": {
                        "items": {
                            "$ref": "#/components/schemas/TabTemplateSchema"
                        },
                        "type": "array",
                        "title": "Tabs",
                        "default": []
                    },
                    "active_tab_name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Active Tab Name"
                    },
                    "template_version": {
                        "type": "string",
                        "title": "Template Version",
                        "default": "1.0"
                    },
                    "description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "created_by": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Created By"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Tags",
                        "default": []
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ],
                "title": "InterfaceTemplateSchema",
                "description": "Template schema for a detached interface"
            },
            "Item": {
                "properties": {
                    "i": {
                        "type": "string",
                        "title": "I"
                    },
                    "x": {
                        "type": "number",
                        "title": "X"
                    },
                    "y": {
                        "type": "number",
                        "title": "Y"
                    },
                    "w": {
                        "type": "number",
                        "title": "W"
                    },
                    "h": {
                        "type": "number",
                        "title": "H"
                    },
                    "minW": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minw"
                    },
                    "minH": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minh"
                    },
                    "moved": {
                        "type": "boolean",
                        "title": "Moved",
                        "default": false
                    },
                    "static": {
                        "type": "boolean",
                        "title": "Static",
                        "default": false
                    },
                    "visible": {
                        "type": "boolean",
                        "title": "Visible",
                        "default": true
                    },
                    "color": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Color"
                    },
                    "tab": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tab"
                    },
                    "table": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Table"
                    },
                    "table_type": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Table Type"
                    },
                    "auto_update": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Auto Update"
                    },
                    "freeze": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Freeze"
                    },
                    "context": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Context"
                    },
                    "column_context": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Column Context"
                    },
                    "prev_context": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Prev Context"
                    },
                    "filters": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Filters"
                    },
                    "common_filter": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Common Filter"
                    },
                    "page_number": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Page Number"
                    },
                    "metric": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Metric"
                    },
                    "column_order": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Column Order"
                    },
                    "hidden_columns": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Hidden Columns"
                    },
                    "default_hidden_columns": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Default Hidden Columns"
                    },
                    "sorting": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Sorting"
                    },
                    "grouping": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Grouping"
                    },
                    "group_sorting": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Group Sorting"
                    },
                    "columns_pin_left": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Columns Pin Left"
                    },
                    "columns_pin_right": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Columns Pin Right"
                    },
                    "selected": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Selected"
                    },
                    "base_index": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Base Index"
                    },
                    "plot_type": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Plot Type"
                    },
                    "plot_scale_x": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Plot Scale X"
                    },
                    "plot_scale_y": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Plot Scale Y"
                    },
                    "plot_aggregate": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Plot Aggregate"
                    },
                    "x_axis": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "X Axis"
                    },
                    "y_axis": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Y Axis"
                    },
                    "plot_group_by": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Plot Group By"
                    },
                    "plot_group_by_colors": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Plot Group By Colors"
                    },
                    "bin_count": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Bin Count"
                    },
                    "regression_line": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Regression Line"
                    },
                    "file_name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "File Name"
                    },
                    "file_type": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "File Type"
                    },
                    "content": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Content"
                    }
                },
                "type": "object",
                "required": [
                    "i",
                    "x",
                    "y",
                    "w",
                    "h"
                ],
                "title": "Item",
                "description": "Legacy Item schema for backward compatibility"
            },
            "JoinLogsRequest": {
                "properties": {
                    "pair_of_args": {
                        "items": {
                            "type": "object"
                        },
                        "type": "array",
                        "title": "Pair Of Args",
                        "description": "Two sets of filtering criteria for logs to join",
                        "example": [
                            {
                                "context": "context_a",
                                "filter_expr": "user_id == 1"
                            },
                            {
                                "context": "context_b",
                                "filter_expr": "user_id == 2"
                            }
                        ]
                    },
                    "join_expr": {
                        "type": "string",
                        "title": "Join Expr",
                        "description": "SQL expression for join condition using aliases A and B",
                        "example": "A.user_id == B.user_id"
                    },
                    "mode": {
                        "type": "string",
                        "title": "Mode",
                        "description": "Join type: 'inner', 'left', 'right', or 'outer'",
                        "example": "inner"
                    },
                    "new_context": {
                        "type": "string",
                        "title": "New Context",
                        "description": "Name for the new context where joined logs will be stored",
                        "example": "Derived/A_B"
                    },
                    "columns": {
                        "anyOf": [
                            {
                                "additionalProperties": {
                                    "type": "string"
                                },
                                "type": "object"
                            },
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Columns",
                        "description": "Optional column specification for the joined result. Can be either:\n1. A dictionary mapping source columns to aliases (only supported when copy=True):    {'A.user_id': 'user_identifier', 'B.score': 'user_score'}\n2. A list of source columns to include (required format when copy=False):    ['A.user_id', 'A.score', 'B.category']\nNote: When copy=False (pass-by-reference), aliases are not supported and the original column names will be preserved. Use the list format in this case.\nIf omitted, all columns will be selected and prefixed with 'A_' or 'B_'.",
                        "example": {
                            "A.user_id": "user_identifier",
                            "B.score": "user_score"
                        }
                    },
                    "project": {
                        "type": "string",
                        "title": "Project",
                        "description": "Name of the project"
                    },
                    "copy": {
                        "type": "boolean",
                        "title": "Copy",
                        "description": "If True, a copy of each log is created and then added to the context. If False, the existing log associations are simply used. If omitted, defaults to True.",
                        "default": true
                    }
                },
                "type": "object",
                "required": [
                    "pair_of_args",
                    "join_expr",
                    "mode",
                    "new_context",
                    "project"
                ],
                "title": "JoinLogsRequest"
            },
            "LegacyInterfaceConfig": {
                "properties": {
                    "name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Name"
                    },
                    "project": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Project"
                    },
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/Item"
                        },
                        "type": "array",
                        "title": "Items",
                        "default": []
                    },
                    "new_counter": {
                        "type": "integer",
                        "title": "New Counter",
                        "default": 0
                    },
                    "temporary": {
                        "type": "boolean",
                        "title": "Temporary",
                        "default": false
                    },
                    "new_name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "New Name"
                    },
                    "context": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Context"
                    },
                    "color": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Color"
                    },
                    "icon": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Icon"
                    },
                    "order": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Order"
                    }
                },
                "type": "object",
                "title": "LegacyInterfaceConfig",
                "description": "Legacy Interface configuration schema for backward compatibility"
            },
            "OnboardingStatusResponse": {
                "properties": {
                    "onboarded": {
                        "type": "boolean",
                        "title": "Onboarded"
                    }
                },
                "type": "object",
                "required": [
                    "onboarded"
                ],
                "title": "OnboardingStatusResponse",
                "description": "Response containing user's onboarding status."
            },
            "PhotoGenerateRequest": {
                "properties": {
                    "prompt": {
                        "type": "string",
                        "title": "Prompt",
                        "description": "Text prompt for image generation."
                    },
                    "aspect_ratio": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Aspect Ratio",
                        "description": "Aspect ratio of the generated image.",
                        "default": "1:1"
                    },
                    "output_format": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Output Format",
                        "description": "Format of the output image.",
                        "default": "webp"
                    },
                    "output_quality": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Output Quality",
                        "description": "Quality of the output image (1-100).",
                        "default": 80
                    },
                    "safety_tolerance": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Safety Tolerance",
                        "description": "Safety tolerance for generation.",
                        "default": 2.0
                    },
                    "prompt_upsampling": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Prompt Upsampling",
                        "description": "Whether to use prompt upsampling.",
                        "default": true
                    }
                },
                "type": "object",
                "required": [
                    "prompt"
                ],
                "title": "PhotoGenerateRequest"
            },
            "PlotTileSchema": {
                "properties": {
                    "id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Id"
                    },
                    "tile_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tile Id"
                    },
                    "plot_type": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Plot Type"
                    },
                    "plot_scale_x": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Plot Scale X"
                    },
                    "plot_scale_y": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Plot Scale Y"
                    },
                    "plot_aggregate": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Plot Aggregate"
                    },
                    "x_axis": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "X Axis"
                    },
                    "y_axis": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Y Axis"
                    },
                    "plot_group_by": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Plot Group By"
                    },
                    "plot_group_by_colors": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Plot Group By Colors"
                    },
                    "bin_count": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Bin Count"
                    },
                    "regression_line": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Regression Line"
                    }
                },
                "type": "object",
                "title": "PlotTileSchema"
            },
            "ProjectCommitHistory": {
                "properties": {
                    "commit_hash": {
                        "type": "string",
                        "title": "Commit Hash"
                    },
                    "commit_message": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Commit Message"
                    },
                    "created_at": {
                        "type": "string",
                        "title": "Created At"
                    },
                    "prev_commit_hash": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Prev Commit Hash"
                    },
                    "next_commit_hash": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Next Commit Hash",
                        "default": []
                    }
                },
                "type": "object",
                "required": [
                    "commit_hash",
                    "created_at"
                ],
                "title": "ProjectCommitHistory"
            },
            "ProjectCommitRequest": {
                "properties": {
                    "commit_message": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Commit Message"
                    }
                },
                "type": "object",
                "title": "ProjectCommitRequest"
            },
            "ProjectConfig": {
                "properties": {
                    "name": {
                        "type": "string",
                        "maxLength": 255,
                        "minLength": 1,
                        "pattern": "^[a-zA-Z0-9_\\-/]+$",
                        "title": "Name",
                        "description": "A unique, user-defined name used when referencing  the project.",
                        "example": "eval-project",
                        "pattern_description": "Only letters, numbers, underscores, slashes, and hyphens are allowed"
                    },
                    "is_versioned": {
                        "type": "boolean",
                        "title": "Is Versioned",
                        "description": "Whether the project is versioned",
                        "default": false
                    },
                    "icon": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Icon",
                        "description": "Icon identifier for the project"
                    },
                    "order": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Order",
                        "description": "Position/order of the project in list"
                    },
                    "description": {
                        "anyOf": [
                            {
                                "type": "string",
                                "maxLength": 256
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description",
                        "description": "Optional description of the project"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ],
                "title": "ProjectConfig"
            },
            "ProjectOut": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The name of the project"
                    },
                    "description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description",
                        "description": "Description of the project"
                    },
                    "icon": {
                        "type": "string",
                        "title": "Icon",
                        "description": "Icon identifier for the project"
                    },
                    "is_versioned": {
                        "type": "boolean",
                        "title": "Is Versioned",
                        "description": "Whether the project is versioned"
                    },
                    "created_at": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Created At",
                        "description": "When the project was created"
                    },
                    "updated_at": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Updated At",
                        "description": "When the project was last updated"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "icon",
                    "is_versioned",
                    "created_at",
                    "updated_at"
                ],
                "title": "ProjectOut",
                "description": "Response model for detailed project data."
            },
            "ProjectRollbackRequest": {
                "properties": {
                    "commit_hash": {
                        "type": "string",
                        "title": "Commit Hash"
                    }
                },
                "type": "object",
                "required": [
                    "commit_hash"
                ],
                "title": "ProjectRollbackRequest"
            },
            "ProjectTemplateSchema": {
                "properties": {
                    "interfaces": {
                        "items": {
                            "$ref": "#/components/schemas/InterfaceTemplateSchema"
                        },
                        "type": "array",
                        "title": "Interfaces",
                        "default": []
                    },
                    "template_version": {
                        "type": "string",
                        "title": "Template Version",
                        "default": "1.0"
                    },
                    "description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "created_by": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Created By"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Tags",
                        "default": []
                    }
                },
                "type": "object",
                "title": "ProjectTemplateSchema",
                "description": "Template schema for multiple interfaces from a project"
            },
            "ProjectTreeItem": {
                "properties": {
                    "project": {
                        "type": "string",
                        "title": "Project"
                    },
                    "icon": {
                        "type": "string",
                        "title": "Icon"
                    },
                    "order": {
                        "type": "integer",
                        "title": "Order"
                    },
                    "interfaces": {
                        "items": {
                            "$ref": "#/components/schemas/InterfaceInfo"
                        },
                        "type": "array",
                        "title": "Interfaces"
                    },
                    "favorite": {
                        "type": "boolean",
                        "title": "Favorite",
                        "default": false
                    },
                    "position": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Position"
                    }
                },
                "type": "object",
                "required": [
                    "project",
                    "icon",
                    "order",
                    "interfaces"
                ],
                "title": "ProjectTreeItem"
            },
            "ProjectUpdate": {
                "properties": {
                    "name": {
                        "anyOf": [
                            {
                                "type": "string",
                                "maxLength": 255,
                                "minLength": 1,
                                "pattern": "^[a-zA-Z0-9_\\-/]+$"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "pattern": "^[a-zA-Z0-9_\\-/]+$",
                        "title": "Name",
                        "description": "A unique, user-defined name used when referencing  the project.",
                        "example": "eval-project",
                        "pattern_description": "Only letters, numbers, underscores, slashes, and hyphens are allowed"
                    },
                    "is_versioned": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Is Versioned",
                        "description": "Whether the project is versioned"
                    },
                    "icon": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Icon",
                        "description": "Icon identifier for the project"
                    },
                    "order": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Order",
                        "description": "Position/order of the project in list"
                    },
                    "description": {
                        "anyOf": [
                            {
                                "type": "string",
                                "maxLength": 256
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description",
                        "description": "Optional description of the project"
                    }
                },
                "type": "object",
                "title": "ProjectUpdate",
                "description": "Request model for updating a project."
            },
            "RecordingInfo": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "title": "Id"
                    },
                    "url": {
                        "type": "string",
                        "maxLength": 2083,
                        "minLength": 1,
                        "format": "uri",
                        "title": "Url"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "url",
                    "created_at"
                ],
                "title": "RecordingInfo"
            },
            "RenameContextRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "New name for the context, must meet naming rules",
                        "example": "experiment2/trial3"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ],
                "title": "RenameContextRequest",
                "description": "Request model for renaming an existing context."
            },
            "RenameFieldRequest": {
                "properties": {
                    "project": {
                        "type": "string",
                        "title": "Project",
                        "description": "Name of the project the field belongs to.",
                        "example": "eval-project"
                    },
                    "context": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Context",
                        "description": "The context of the field to rename.",
                        "default": "",
                        "example": "test-context"
                    },
                    "old_field_name": {
                        "type": "string",
                        "title": "Old Field Name",
                        "description": "The current name of the field to rename.",
                        "example": "score"
                    },
                    "new_field_name": {
                        "type": "string",
                        "title": "New Field Name",
                        "description": "The new name for the field.",
                        "example": "score_new"
                    }
                },
                "type": "object",
                "required": [
                    "project",
                    "old_field_name",
                    "new_field_name"
                ],
                "title": "RenameFieldRequest"
            },
            "ReplicatePredictionResponse": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "model": {
                        "type": "string",
                        "title": "Model"
                    },
                    "version": {
                        "type": "string",
                        "title": "Version"
                    },
                    "input": {
                        "anyOf": [
                            {
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Input"
                    },
                    "output": {
                        "anyOf": [
                            {},
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Output"
                    },
                    "logs": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Logs"
                    },
                    "error": {
                        "anyOf": [
                            {},
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Error"
                    },
                    "status": {
                        "type": "string",
                        "title": "Status"
                    },
                    "created_at": {
                        "type": "string",
                        "title": "Created At"
                    },
                    "completed_at": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Completed At"
                    },
                    "urls": {
                        "anyOf": [
                            {
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Urls"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "model",
                    "version",
                    "status",
                    "created_at"
                ],
                "title": "ReplicatePredictionResponse"
            },
            "StandardFieldDefinition": {
                "properties": {
                    "type": {
                        "type": "string",
                        "title": "Type"
                    },
                    "mutable": {
                        "type": "boolean",
                        "title": "Mutable",
                        "description": "If true, entries under this field can be updated via update endpoints; otherwise they are immutable after creation (default false).",
                        "default": false
                    },
                    "unique": {
                        "type": "boolean",
                        "title": "Unique",
                        "default": false
                    },
                    "description": {
                        "anyOf": [
                            {
                                "type": "string",
                                "maxLength": 256
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description",
                        "description": "Optional description for the field definition"
                    }
                },
                "type": "object",
                "required": [
                    "type"
                ],
                "title": "StandardFieldDefinition",
                "description": "Defines a standard field with type information and behavioral flags.\n\nThe `type` field specifies the data type of the field.\nThe `mutable` flag controls whether the field can later be modified via update endpoints.\nThe `unique` flag controls whether the field can only have one value per log.\nThe `description` field provides an optional human-readable description of the field."
            },
            "TabInfo": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "icon": {
                        "type": "string",
                        "title": "Icon"
                    },
                    "order": {
                        "type": "integer",
                        "title": "Order"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "icon",
                    "order"
                ],
                "title": "TabInfo"
            },
            "TabSchema": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "visible": {
                        "type": "boolean",
                        "title": "Visible",
                        "default": true
                    },
                    "active": {
                        "type": "boolean",
                        "title": "Active",
                        "default": false
                    },
                    "order": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Order"
                    },
                    "global_context": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Global Context"
                    },
                    "color": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Color"
                    },
                    "icon": {
                        "type": "string",
                        "title": "Icon"
                    },
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "interface_id": {
                        "type": "string",
                        "title": "Interface Id"
                    },
                    "created_at": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Created At"
                    },
                    "updated_at": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Updated At"
                    },
                    "is_checkpoint": {
                        "type": "boolean",
                        "title": "Is Checkpoint",
                        "default": false
                    },
                    "tiles": {
                        "items": {
                            "$ref": "#/components/schemas/TileSchema"
                        },
                        "type": "array",
                        "title": "Tiles",
                        "default": []
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "icon",
                    "id",
                    "interface_id"
                ],
                "title": "TabSchema",
                "description": "Complete Tab schema - now inherits from base"
            },
            "TabTemplateSchema": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "visible": {
                        "type": "boolean",
                        "title": "Visible",
                        "default": true
                    },
                    "active": {
                        "type": "boolean",
                        "title": "Active",
                        "default": false
                    },
                    "order": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Order"
                    },
                    "global_context": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Global Context"
                    },
                    "color": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Color"
                    },
                    "icon": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Icon"
                    },
                    "tiles": {
                        "items": {
                            "$ref": "#/components/schemas/TileTemplateSchema"
                        },
                        "type": "array",
                        "title": "Tiles",
                        "default": []
                    },
                    "template_version": {
                        "type": "string",
                        "title": "Template Version",
                        "default": "1.0"
                    },
                    "description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "created_by": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Created By"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Tags",
                        "default": []
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ],
                "title": "TabTemplateSchema",
                "description": "Template schema for a detached tab"
            },
            "TableTileSchema": {
                "properties": {
                    "id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Id"
                    },
                    "tile_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tile Id"
                    },
                    "table_type": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Table Type"
                    },
                    "page_number": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Page Number"
                    },
                    "column_order": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Column Order"
                    },
                    "hidden_columns": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Hidden Columns"
                    },
                    "default_hidden_columns": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Default Hidden Columns"
                    },
                    "sorting": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Sorting"
                    },
                    "group_sorting": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Group Sorting"
                    },
                    "columns_pin_left": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Columns Pin Left"
                    },
                    "columns_pin_right": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Columns Pin Right"
                    },
                    "selected": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Selected"
                    }
                },
                "type": "object",
                "title": "TableTileSchema"
            },
            "TemplateExportResponse": {
                "properties": {
                    "template": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ProjectTemplateSchema"
                            },
                            {
                                "$ref": "#/components/schemas/InterfaceTemplateSchema"
                            },
                            {
                                "$ref": "#/components/schemas/TabTemplateSchema"
                            },
                            {
                                "$ref": "#/components/schemas/TileTemplateSchema"
                            }
                        ],
                        "title": "Template"
                    },
                    "metadata": {
                        "type": "object",
                        "title": "Metadata"
                    },
                    "export_stats": {
                        "type": "object",
                        "title": "Export Stats"
                    }
                },
                "type": "object",
                "required": [
                    "template",
                    "metadata",
                    "export_stats"
                ],
                "title": "TemplateExportResponse",
                "description": "Response from exporting a template"
            },
            "TemplateImportResponse": {
                "properties": {
                    "success": {
                        "type": "boolean",
                        "title": "Success"
                    },
                    "validation_result": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ValidationResultSchema"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "import_stats": {
                        "type": "object",
                        "title": "Import Stats"
                    },
                    "created_ids": {
                        "type": "object",
                        "title": "Created Ids"
                    },
                    "warnings": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Warnings",
                        "default": []
                    }
                },
                "type": "object",
                "required": [
                    "success",
                    "import_stats",
                    "created_ids"
                ],
                "title": "TemplateImportResponse",
                "description": "Response from importing a template"
            },
            "TerminalTileSchema": {
                "properties": {
                    "id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Id"
                    },
                    "tile_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tile Id"
                    },
                    "shell_type": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Shell Type"
                    }
                },
                "type": "object",
                "title": "TerminalTileSchema"
            },
            "TilePosition": {
                "properties": {
                    "x": {
                        "type": "number",
                        "title": "X"
                    },
                    "y": {
                        "type": "number",
                        "title": "Y"
                    },
                    "width": {
                        "type": "number",
                        "title": "Width"
                    },
                    "height": {
                        "type": "number",
                        "title": "Height"
                    }
                },
                "type": "object",
                "required": [
                    "x",
                    "y",
                    "width",
                    "height"
                ],
                "title": "TilePosition"
            },
            "TileSchema": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "position": {
                        "$ref": "#/components/schemas/TilePosition"
                    },
                    "type": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Type"
                    },
                    "minW": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minw"
                    },
                    "minH": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minh"
                    },
                    "visible": {
                        "type": "boolean",
                        "title": "Visible",
                        "default": true
                    },
                    "locked": {
                        "type": "boolean",
                        "title": "Locked",
                        "default": false
                    },
                    "moved": {
                        "type": "boolean",
                        "title": "Moved",
                        "default": false
                    },
                    "static": {
                        "type": "boolean",
                        "title": "Static",
                        "default": false
                    },
                    "color": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Color"
                    },
                    "context": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Context"
                    },
                    "table": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Table"
                    },
                    "auto_update": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Auto Update"
                    },
                    "freeze": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Freeze"
                    },
                    "filters": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Filters"
                    },
                    "common_filter": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Common Filter"
                    },
                    "metric": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Metric"
                    },
                    "column_context": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Column Context"
                    },
                    "grouping": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Grouping"
                    },
                    "table_tile": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/TableTileSchema"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "plot_tile": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/PlotTileSchema"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "view_tile": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ViewTileSchema"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "editor_tile": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/EditorTileSchema"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "terminal_tile": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/TerminalTileSchema"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Id"
                    },
                    "tab_id": {
                        "type": "string",
                        "title": "Tab Id"
                    },
                    "created_at": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Created At"
                    },
                    "updated_at": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Updated At"
                    },
                    "is_checkpoint": {
                        "type": "boolean",
                        "title": "Is Checkpoint",
                        "default": false
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "position",
                    "tab_id"
                ],
                "title": "TileSchema",
                "description": "Complete Tile schema with type-specific properties - now inherits from base"
            },
            "TileTemplateSchema": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "position": {
                        "$ref": "#/components/schemas/TilePosition"
                    },
                    "type": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Type"
                    },
                    "minW": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minw"
                    },
                    "minH": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minh"
                    },
                    "visible": {
                        "type": "boolean",
                        "title": "Visible",
                        "default": true
                    },
                    "locked": {
                        "type": "boolean",
                        "title": "Locked",
                        "default": false
                    },
                    "moved": {
                        "type": "boolean",
                        "title": "Moved",
                        "default": false
                    },
                    "static": {
                        "type": "boolean",
                        "title": "Static",
                        "default": false
                    },
                    "color": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Color"
                    },
                    "context": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Context"
                    },
                    "table": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Table"
                    },
                    "auto_update": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Auto Update"
                    },
                    "freeze": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Freeze"
                    },
                    "filters": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Filters"
                    },
                    "common_filter": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Common Filter"
                    },
                    "metric": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Metric"
                    },
                    "column_context": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Column Context"
                    },
                    "grouping": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Grouping"
                    },
                    "table_tile": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/TableTileSchema"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "plot_tile": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/PlotTileSchema"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "view_tile": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ViewTileSchema"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "editor_tile": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/EditorTileSchema"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "terminal_tile": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/TerminalTileSchema"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "template_version": {
                        "type": "string",
                        "title": "Template Version",
                        "default": "1.0"
                    },
                    "description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "created_by": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Created By"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Tags",
                        "default": []
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "position"
                ],
                "title": "TileTemplateSchema",
                "description": "Template schema for a detached tile - inherits all fields from base"
            },
            "UpdateAccountTypeRequest": {
                "properties": {
                    "account_type": {
                        "type": "string",
                        "enum": [
                            "individual",
                            "business"
                        ],
                        "title": "Account Type"
                    },
                    "business_info": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/BusinessInfo"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "email": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Email"
                    },
                    "name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Name"
                    },
                    "last_name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Last Name"
                    }
                },
                "type": "object",
                "required": [
                    "account_type"
                ],
                "title": "UpdateAccountTypeRequest",
                "description": "Request to update user account type."
            },
            "UpdateBusinessInfoRequest": {
                "properties": {
                    "business_name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Business Name"
                    },
                    "tax_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tax Id"
                    },
                    "business_type": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Business Type"
                    },
                    "business_address": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/BusinessAddress"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "tax_exempt": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tax Exempt"
                    }
                },
                "type": "object",
                "title": "UpdateBusinessInfoRequest",
                "description": "Request to update business information."
            },
            "UpdateDerivedEntriesConfig": {
                "properties": {
                    "project": {
                        "type": "string",
                        "title": "Project",
                        "description": "Name of the project these derived logs belong to.",
                        "example": "eval-project"
                    },
                    "context": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ContextCreateRequest"
                            },
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Context",
                        "description": "Optional context path to update for the logs. Can use '/' for nested contexts (e.g. 'training/batch1'). Can be a string (which will be interpreted with description=None and is_versioned=False) or a ContextCreateRequest object.",
                        "example": "experiment1/trial1"
                    },
                    "target_derived_logs": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "integer"
                                },
                                "type": "array"
                            },
                            {
                                "type": "object"
                            }
                        ],
                        "title": "Target Derived Logs",
                        "description": "The derived logs to update, either as a list of derived_log IDs or as a set of arguments for the get_logs endpoint.",
                        "example": {
                            "log0": [
                                0,
                                1,
                                2
                            ],
                            "log1": {
                                "filter_expr": "derived_score > 0.5"
                            }
                        }
                    },
                    "key": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Key",
                        "description": "New key name for the derived entries",
                        "example": "temp_plus_20"
                    },
                    "equation": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Equation",
                        "description": "New equation for computing derived values",
                        "example": "{t:temperature} + 20"
                    },
                    "referenced_logs": {
                        "anyOf": [
                            {
                                "additionalProperties": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "type": "integer"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "object"
                                        }
                                    ]
                                },
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Referenced Logs",
                        "description": "Optional new referenced logs to use for computation. Can be specified either as a list of log IDs or as a set of arguments for the get_logs endpoint.",
                        "example": {
                            "other": {
                                "filter_expr": "score > 0.5"
                            },
                            "t": [
                                1,
                                2,
                                3
                            ]
                        }
                    }
                },
                "type": "object",
                "required": [
                    "project",
                    "target_derived_logs"
                ],
                "title": "UpdateDerivedEntriesConfig"
            },
            "UpdateInterfaceRequest": {
                "properties": {
                    "name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Name"
                    },
                    "active_tab_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Active Tab Id"
                    },
                    "order": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Order"
                    },
                    "color": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Color"
                    },
                    "icon": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Icon"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "UpdateInterfaceRequest",
                "description": "Request to update an interface - only includes fields that can be updated"
            },
            "UpdateLogRequest": {
                "properties": {
                    "logs": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "integer"
                                },
                                "type": "array"
                            },
                            {
                                "type": "object"
                            }
                        ],
                        "title": "Logs",
                        "description": "List of log IDs or a dict of filter arguments to select logs. Filter dicts are passed as key:value pairs (e.g. `{\"status\": \"done\", \"user_id\": 12}`).",
                        "examples": [
                            [
                                123,
                                456,
                                789
                            ],
                            {
                                "status": "done",
                                "user_id": 12
                            }
                        ]
                    },
                    "project": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Project",
                        "description": "Name of the project. Required when using filter dict in `logs`. Omit when passing a list of IDs.",
                        "example": "eval-project"
                    },
                    "context": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ContextCreateRequest"
                            },
                            {
                                "type": "string"
                            },
                            {
                                "items": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/ContextCreateRequest"
                                        },
                                        {
                                            "type": "string"
                                        }
                                    ]
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Context",
                        "description": "Optional context path to update for the logs. Can use '/' for nested contexts (e.g. 'training/batch1'). Can be a string (which will be interpreted with description=None and is_versioned=False) or a ContextCreateRequest object. Required when using filter dict in `logs` if project is not provided.",
                        "example": "experiment1/trial1"
                    },
                    "params": {
                        "anyOf": [
                            {
                                "type": "object"
                            },
                            {
                                "items": {
                                    "type": "object"
                                },
                                "type": "array"
                            }
                        ],
                        "title": "Params",
                        "description": "Dictionary or list of dictionaries of key-value parameter pairs to add or update in the logs.",
                        "default": {},
                        "example": {
                            "explicit_types": {
                                "category": {
                                    "description": "Task category",
                                    "restrict": false,
                                    "type": "enum",
                                    "values": [
                                        "A",
                                        "B",
                                        "C"
                                    ]
                                },
                                "priority": {
                                    "type": "enum"
                                },
                                "system-prompt": {
                                    "description": "System prompt for the model",
                                    "mutable": true,
                                    "type": "str"
                                }
                            },
                            "function_definition": "...",
                            "system-prompt": "..."
                        }
                    },
                    "entries": {
                        "anyOf": [
                            {
                                "type": "object"
                            },
                            {
                                "items": {
                                    "type": "object"
                                },
                                "type": "array"
                            }
                        ],
                        "title": "Entries",
                        "description": "Dictionary or list of dictionaries of key-value entry pairs to add or update in the logs. Supports nested path syntax using dot notation for object properties (e.g., 'metadata.author') and bracket notation for array indices (e.g., 'results[0]'). Complex paths like 'results[0].scores.accuracy' are also supported for deep updates.",
                        "default": {},
                        "example": {
                            "explicit_types": {
                                "input": {
                                    "description": "Input data for processing",
                                    "mutable": true,
                                    "type": "Image"
                                },
                                "label": {
                                    "type": "enum"
                                },
                                "status": {
                                    "description": "Current processing status",
                                    "restrict": true,
                                    "type": "enum",
                                    "values": [
                                        "pending",
                                        "completed",
                                        "failed"
                                    ]
                                }
                            },
                            "input": "...",
                            "score-test-1": "..."
                        }
                    },
                    "overwrite": {
                        "type": "boolean",
                        "title": "Overwrite",
                        "description": "Whether to overwrite existing logs",
                        "default": false,
                        "example": false
                    }
                },
                "type": "object",
                "required": [
                    "logs"
                ],
                "title": "UpdateLogRequest"
            },
            "UpdateOnboardingStatusRequest": {
                "properties": {
                    "onboarded": {
                        "type": "boolean",
                        "title": "Onboarded"
                    }
                },
                "type": "object",
                "required": [
                    "onboarded"
                ],
                "title": "UpdateOnboardingStatusRequest",
                "description": "Request to update user's onboarding status."
            },
            "UpdateQueryLoggingRequest": {
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "title": "Enabled"
                    }
                },
                "additionalProperties": true,
                "type": "object",
                "required": [
                    "enabled"
                ],
                "title": "UpdateQueryLoggingRequest"
            },
            "UpdateTabRequest": {
                "properties": {
                    "name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Name"
                    },
                    "visible": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Visible"
                    },
                    "active": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Active"
                    },
                    "order": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Order"
                    },
                    "global_context": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Global Context"
                    },
                    "color": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Color"
                    },
                    "icon": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Icon"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "UpdateTabRequest",
                "description": "Request to update a tab - only includes fields that can be updated"
            },
            "UpdateTileRequest": {
                "properties": {
                    "name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Name"
                    },
                    "position": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/TilePosition"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "type": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Type"
                    },
                    "minW": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minw"
                    },
                    "minH": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minh"
                    },
                    "visible": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Visible"
                    },
                    "locked": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Locked"
                    },
                    "moved": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Moved"
                    },
                    "static": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Static"
                    },
                    "color": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Color"
                    },
                    "context": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Context"
                    },
                    "table": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Table"
                    },
                    "auto_update": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Auto Update"
                    },
                    "freeze": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Freeze"
                    },
                    "filters": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Filters"
                    },
                    "common_filter": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Common Filter"
                    },
                    "metric": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Metric"
                    },
                    "column_context": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Column Context"
                    },
                    "grouping": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Grouping"
                    },
                    "table_tile": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/TableTileSchema"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "plot_tile": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/PlotTileSchema"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "view_tile": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ViewTileSchema"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "editor_tile": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/EditorTileSchema"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "terminal_tile": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/TerminalTileSchema"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "UpdateTileRequest",
                "description": "Request to update a tile - only includes fields that can be updated"
            },
            "UserBusinessStatusResponse": {
                "properties": {
                    "account_type": {
                        "type": "string",
                        "title": "Account Type"
                    },
                    "business_name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Business Name"
                    },
                    "tax_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tax Id"
                    },
                    "business_type": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Business Type"
                    },
                    "business_verified": {
                        "type": "boolean",
                        "title": "Business Verified"
                    },
                    "tax_exempt": {
                        "type": "boolean",
                        "title": "Tax Exempt"
                    },
                    "tax_jurisdiction": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tax Jurisdiction"
                    },
                    "business_address": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/BusinessAddress"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "account_type",
                    "business_verified",
                    "tax_exempt"
                ],
                "title": "UserBusinessStatusResponse",
                "description": "Response containing user's business classification status."
            },
            "ValidationError": {
                "properties": {
                    "loc": {
                        "items": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer"
                                }
                            ]
                        },
                        "type": "array",
                        "title": "Location"
                    },
                    "msg": {
                        "type": "string",
                        "title": "Message"
                    },
                    "type": {
                        "type": "string",
                        "title": "Error Type"
                    }
                },
                "type": "object",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "title": "ValidationError"
            },
            "ValidationIssue": {
                "properties": {
                    "level": {
                        "type": "string",
                        "title": "Level"
                    },
                    "component": {
                        "type": "string",
                        "title": "Component"
                    },
                    "component_name": {
                        "type": "string",
                        "title": "Component Name"
                    },
                    "issue_type": {
                        "type": "string",
                        "title": "Issue Type"
                    },
                    "message": {
                        "type": "string",
                        "title": "Message"
                    },
                    "suggested_fix": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Suggested Fix"
                    }
                },
                "type": "object",
                "required": [
                    "level",
                    "component",
                    "component_name",
                    "issue_type",
                    "message"
                ],
                "title": "ValidationIssue",
                "description": "Individual validation issue"
            },
            "ValidationResultSchema": {
                "properties": {
                    "is_valid": {
                        "type": "boolean",
                        "title": "Is Valid"
                    },
                    "issues": {
                        "items": {
                            "$ref": "#/components/schemas/ValidationIssue"
                        },
                        "type": "array",
                        "title": "Issues",
                        "default": []
                    },
                    "can_sanitize": {
                        "type": "boolean",
                        "title": "Can Sanitize"
                    },
                    "sanitized_template": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ProjectTemplateSchema"
                            },
                            {
                                "$ref": "#/components/schemas/InterfaceTemplateSchema"
                            },
                            {
                                "$ref": "#/components/schemas/TabTemplateSchema"
                            },
                            {
                                "$ref": "#/components/schemas/TileTemplateSchema"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Sanitized Template"
                    }
                },
                "type": "object",
                "required": [
                    "is_valid",
                    "can_sanitize"
                ],
                "title": "ValidationResultSchema",
                "description": "Result of validating a template against a project"
            },
            "ViewTileSchema": {
                "properties": {
                    "id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Id"
                    },
                    "tile_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tile Id"
                    },
                    "base_index": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Base Index"
                    }
                },
                "type": "object",
                "title": "ViewTileSchema"
            },
            "VoiceCreate": {
                "properties": {
                    "voice_id": {
                        "type": "string",
                        "title": "Voice Id",
                        "description": "Cartesia Voice ID",
                        "example": "bf0a246a-8642-498a-9950-80c35e9276b5"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "User-given name for the voice",
                        "example": "English Woman Calm 1"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description",
                        "description": "Description of the voice",
                        "example": "Calm and relaxing voice of an english-speaking woman"
                    },
                    "gender": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Gender",
                        "description": "Gender of the voice",
                        "example": "female"
                    },
                    "language": {
                        "type": "string",
                        "title": "Language",
                        "description": "Language code of the voice",
                        "example": "en"
                    },
                    "provider": {
                        "type": "string",
                        "enum": [
                            "cartesia",
                            "elevenlabs"
                        ],
                        "title": "Provider",
                        "description": "Provider of the voice (cartesia or elevenlabs)",
                        "default": "cartesia",
                        "example": "cartesia"
                    },
                    "is_preset": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Is Preset",
                        "description": "Whether this voice is a Cartesia preset or user-created.",
                        "default": false,
                        "example": true
                    }
                },
                "type": "object",
                "required": [
                    "voice_id",
                    "name",
                    "description",
                    "language"
                ],
                "title": "VoiceCreate",
                "description": "Schema for creating a new assistant voice entry in our DB.\nThe voice_id is provided by Cartesia after a successful clone/localize, or is a known preset ID."
            },
            "VoiceDesignCreateFromPreviewRequest": {
                "properties": {
                    "generated_voice_id": {
                        "type": "string",
                        "title": "Generated Voice Id",
                        "description": "The 'generated_voice_id' obtained from the '/design/preview'."
                    },
                    "voice_name": {
                        "type": "string",
                        "title": "Voice Name",
                        "description": "Name for the new voice."
                    },
                    "voice_description": {
                        "type": "string",
                        "title": "Voice Description",
                        "description": "Description for the new voice."
                    },
                    "audio_base_64": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Audio Base 64",
                        "description": "Base64 encoded audio sample from the selected voice preview. If provided, it's used for language detection."
                    },
                    "media_type": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Media Type",
                        "description": "MIME type of the audio sample, e.g., 'audio/mpeg'. Assumed 'audio/mpeg' if sample is provided but this is omitted."
                    },
                    "labels": {
                        "anyOf": [
                            {
                                "additionalProperties": {
                                    "type": "string"
                                },
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Labels",
                        "description": "Optional labels for ElevenLabs when creating the voice."
                    },
                    "language": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Language",
                        "description": "Language of the voice. If not provided, it will be auto-detected from the provided audio preview, or from the description if no audio is provided."
                    },
                    "gender": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Gender",
                        "description": "Gender of the voice."
                    }
                },
                "type": "object",
                "required": [
                    "generated_voice_id",
                    "voice_name",
                    "voice_description"
                ],
                "title": "VoiceDesignCreateFromPreviewRequest"
            },
            "VoiceDesignGeneratePreviewsAPIResponse": {
                "properties": {
                    "previews": {
                        "items": {
                            "$ref": "#/components/schemas/VoiceDesignPreviewItem"
                        },
                        "type": "array",
                        "title": "Previews"
                    },
                    "text": {
                        "type": "string",
                        "title": "Text"
                    }
                },
                "type": "object",
                "required": [
                    "previews",
                    "text"
                ],
                "title": "VoiceDesignGeneratePreviewsAPIResponse"
            },
            "VoiceDesignGeneratePreviewsRequest": {
                "properties": {
                    "voice_description": {
                        "anyOf": [
                            {
                                "type": "string",
                                "maxLength": 1000,
                                "minLength": 20
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Voice Description",
                        "description": "Text prompt describing the desired voice characteristics (e.g., 'A deep, resonant male voice with a British accent, suitable for narration.'). If `bio` is provided, this field can be used to add more specific voice instructions. At least one of bio or voice_description should be provided."
                    },
                    "bio": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Bio",
                        "description": "A biography or background of the character to generate a voice description from. Used with `voice_description` to generate a richer prompt for the TTS provider. At least one of bio or voice_description should be provided."
                    },
                    "text": {
                        "anyOf": [
                            {
                                "type": "string",
                                "maxLength": 1000,
                                "minLength": 100
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Text",
                        "description": "Optional: Text to be spoken in the generated voice previews. If not provided, and auto_generate_text is false, ElevenLabs might use a default or generic text."
                    },
                    "auto_generate_text": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Auto Generate Text",
                        "description": "Optional: Whether to automatically generate a text suitable for the voice description if 'text' is not provided. Defaults to false by ElevenLabs."
                    },
                    "model_id": {
                        "anyOf": [
                            {
                                "type": "string",
                                "enum": [
                                    "eleven_multilingual_ttv_v2",
                                    "eleven_ttv_v3"
                                ]
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Model Id",
                        "description": "Optional: Model to use for voice generation."
                    }
                },
                "type": "object",
                "title": "VoiceDesignGeneratePreviewsRequest"
            },
            "VoiceDesignPreviewItem": {
                "properties": {
                    "audio_base_64": {
                        "type": "string",
                        "title": "Audio Base 64",
                        "description": "Base64 encoded audio sample of the generated voice preview."
                    },
                    "generated_voice_id": {
                        "type": "string",
                        "title": "Generated Voice Id",
                        "description": "Temporary ID for this generated voice preview, used to create the full voice."
                    },
                    "media_type": {
                        "type": "string",
                        "title": "Media Type",
                        "description": "MIME type of the audio sample, e.g., 'audio/mpeg'."
                    },
                    "duration_secs": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Duration Secs",
                        "description": "Duration of the audio sample in seconds."
                    }
                },
                "type": "object",
                "required": [
                    "audio_base_64",
                    "generated_voice_id",
                    "media_type"
                ],
                "title": "VoiceDesignPreviewItem"
            },
            "VoiceGenerateRequest": {
                "properties": {
                    "text": {
                        "type": "string",
                        "title": "Text",
                        "description": "Text to synthesize."
                    },
                    "provider": {
                        "type": "string",
                        "enum": [
                            "cartesia",
                            "elevenlabs"
                        ],
                        "title": "Provider",
                        "description": "TTS provider."
                    },
                    "voice_id": {
                        "type": "string",
                        "title": "Voice Id",
                        "description": "Provider-specific voice ID for the speech."
                    },
                    "model_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Model Id",
                        "description": "Provider-specific model ID (e.g., 'sonic-2' for Cartesia, 'eleven_multilingual_v2' for ElevenLabs)."
                    },
                    "output_format": {
                        "type": "string",
                        "enum": [
                            "mp3",
                            "wav",
                            "flac",
                            "pcm_s16le",
                            "pcm_mulaw"
                        ],
                        "title": "Output Format",
                        "description": "Desired audio output format. This will determine the Content-Type of the response.",
                        "default": "mp3"
                    },
                    "cartesia_language": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Cartesia Language",
                        "description": "Language code for Cartesia TTS (e.g., 'en'). If None, Cartesia attempts auto-detection.",
                        "default": "en"
                    },
                    "cartesia_sample_rate": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Cartesia Sample Rate",
                        "description": "Optional sample rate for Cartesia (e.g., 24000, 44100). Provider defaults used if None."
                    },
                    "cartesia_bit_rate": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Cartesia Bit Rate",
                        "description": "Optional bit rate for Cartesia lossy formats like MP3 (e.g., 128000). Provider defaults used if None. Not for PCM."
                    },
                    "elevenlabs_optimize_streaming_latency": {
                        "anyOf": [
                            {
                                "type": "integer",
                                "maximum": 4.0,
                                "minimum": 0.0
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Elevenlabs Optimize Streaming Latency",
                        "description": "0-4. Optimize for streaming latency for ElevenLabs."
                    },
                    "elevenlabs_voice_settings_stability": {
                        "anyOf": [
                            {
                                "type": "number",
                                "maximum": 1.0,
                                "minimum": 0.0
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Elevenlabs Voice Settings Stability",
                        "description": "Stability for ElevenLabs voice settings."
                    },
                    "elevenlabs_voice_settings_similarity_boost": {
                        "anyOf": [
                            {
                                "type": "number",
                                "maximum": 1.0,
                                "minimum": 0.0
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Elevenlabs Voice Settings Similarity Boost",
                        "description": "Similarity boost for ElevenLabs voice settings."
                    }
                },
                "type": "object",
                "required": [
                    "text",
                    "provider",
                    "voice_id"
                ],
                "title": "VoiceGenerateRequest"
            },
            "VoiceRead": {
                "properties": {
                    "voice_id": {
                        "type": "string",
                        "title": "Voice Id",
                        "description": "Cartesia Voice ID",
                        "example": "bf0a246a-8642-498a-9950-80c35e9276b5"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "User-given name for the voice",
                        "example": "English Woman Calm 1"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description",
                        "description": "Description of the voice",
                        "example": "Calm and relaxing voice of an english-speaking woman"
                    },
                    "gender": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Gender",
                        "description": "Gender of the voice",
                        "example": "female"
                    },
                    "language": {
                        "type": "string",
                        "title": "Language",
                        "description": "Language code of the voice",
                        "example": "en"
                    },
                    "provider": {
                        "type": "string",
                        "enum": [
                            "cartesia",
                            "elevenlabs"
                        ],
                        "title": "Provider",
                        "description": "Provider of the voice (cartesia or elevenlabs)",
                        "default": "cartesia",
                        "example": "cartesia"
                    },
                    "is_preset": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Is Preset",
                        "description": "Whether this voice is a Cartesia preset or user-created.",
                        "default": false,
                        "example": true
                    }
                },
                "type": "object",
                "required": [
                    "voice_id",
                    "name",
                    "description",
                    "language"
                ],
                "title": "VoiceRead",
                "description": "Schema for reading voice data from the DB."
            }
        },
        "securitySchemes": {
            "HTTPBearer": {
                "type": "http",
                "scheme": "bearer"
            }
        }
    }
}